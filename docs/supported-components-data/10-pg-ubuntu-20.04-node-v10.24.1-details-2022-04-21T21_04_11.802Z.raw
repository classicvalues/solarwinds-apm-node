npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@4.5.5
added 4 packages from 7 contributors, removed 3 packages, updated 7 packages and audited 936 packages in 4.832s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:04:17.867Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:04:17.870Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:04:17.870Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:04:17.870Z appoptics:debug using context provider: ace-context
2022-04-21T21:04:17.928Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:04:18.130Z appoptics:patching patched crypto 
2022-04-21T21:04:18.168Z appoptics:patching patched https 
2022-04-21T21:04:18.168Z appoptics:patching patched http 
2022-04-21T21:04:18.190Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:04:18.190Z appoptics:patching patched fs 
2022-04-21T21:04:18.208Z appoptics:patching probes.generic-pool "acquire()" not found
2022-04-21T21:04:18.208Z appoptics:patching patched generic-pool 2.1.1
2022-04-21T21:04:18.210Z appoptics:patching patched pg 4.5.5
2022-04-21T21:04:18.236Z appoptics:debug starting runtimeMetrics


  probes.pg 4.5.5
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (24ms)
  1 failing

  1) probes.pg 4.5.5
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:426:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:345:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:105:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@4.5.6
updated 2 packages and audited 936 packages in 3.966s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:04:23.238Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:04:23.240Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:04:23.240Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:04:23.240Z appoptics:debug using context provider: ace-context
2022-04-21T21:04:23.294Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:04:23.468Z appoptics:patching patched crypto 
2022-04-21T21:04:23.498Z appoptics:patching patched https 
2022-04-21T21:04:23.498Z appoptics:patching patched http 
2022-04-21T21:04:23.523Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:04:23.524Z appoptics:patching patched fs 
2022-04-21T21:04:23.554Z appoptics:patching patched generic-pool 2.4.2
2022-04-21T21:04:23.556Z appoptics:patching patched pg 4.5.6
2022-04-21T21:04:23.605Z appoptics:debug starting runtimeMetrics


  probes.pg 4.5.6
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (24ms)
  1 failing

  1) probes.pg 4.5.6
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:426:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:345:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:105:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@4.5.7
added 1 package from 2 contributors, updated 1 package and audited 937 packages in 4.3s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:04:28.945Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:04:28.946Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:04:28.946Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:04:28.947Z appoptics:debug using context provider: ace-context
2022-04-21T21:04:29.001Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:04:29.165Z appoptics:patching patched crypto 
2022-04-21T21:04:29.212Z appoptics:patching patched https 
2022-04-21T21:04:29.212Z appoptics:patching patched http 
2022-04-21T21:04:29.240Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:04:29.241Z appoptics:patching patched fs 
2022-04-21T21:04:29.264Z appoptics:patching patched generic-pool 2.4.2
2022-04-21T21:04:29.266Z appoptics:patching patched pg 4.5.7
2022-04-21T21:04:29.298Z appoptics:debug starting runtimeMetrics


  probes.pg 4.5.7
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (15ms)
  1 failing

  1) probes.pg 4.5.7
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:426:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:345:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:105:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@5.0.0
removed 1 package, updated 3 packages and audited 936 packages in 3.924s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:04:34.328Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:04:34.329Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:04:34.329Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:04:34.330Z appoptics:debug using context provider: ace-context
2022-04-21T21:04:34.389Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:04:34.590Z appoptics:patching patched crypto 
2022-04-21T21:04:34.618Z appoptics:patching patched https 
2022-04-21T21:04:34.618Z appoptics:patching patched http 
2022-04-21T21:04:34.642Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:04:34.643Z appoptics:patching patched fs 
2022-04-21T21:04:34.660Z appoptics:patching patched generic-pool 2.4.2
2022-04-21T21:04:34.661Z appoptics:patching patched pg 5.0.0
2022-04-21T21:04:34.692Z appoptics:debug starting runtimeMetrics


  probes.pg 5.0.0
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (16ms)
  1 failing

  1) probes.pg 5.0.0
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:426:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:345:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:105:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@5.1.0
updated 2 packages and audited 936 packages in 4.11s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:04:40.055Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:04:40.057Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:04:40.057Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:04:40.058Z appoptics:debug using context provider: ace-context
2022-04-21T21:04:40.111Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:04:40.277Z appoptics:patching patched crypto 
2022-04-21T21:04:40.307Z appoptics:patching patched https 
2022-04-21T21:04:40.307Z appoptics:patching patched http 
2022-04-21T21:04:40.327Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:04:40.327Z appoptics:patching patched fs 
2022-04-21T21:04:40.341Z appoptics:patching patched generic-pool 2.4.2
2022-04-21T21:04:40.342Z appoptics:patching patched pg 5.1.0
2022-04-21T21:04:40.363Z appoptics:debug starting runtimeMetrics


  probes.pg 5.1.0
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (32ms)
  1 failing

  1) probes.pg 5.1.0
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:426:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:345:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:105:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@5.2.1
added 4 packages from 16 contributors, removed 1 package, updated 1 package and audited 939 packages in 4.044s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:04:45.433Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:04:45.434Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:04:45.435Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:04:45.435Z appoptics:debug using context provider: ace-context
2022-04-21T21:04:45.489Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:04:45.644Z appoptics:patching patched crypto 
2022-04-21T21:04:45.678Z appoptics:patching patched https 
2022-04-21T21:04:45.678Z appoptics:patching patched http 
2022-04-21T21:04:45.702Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:04:45.702Z appoptics:patching patched fs 
2022-04-21T21:04:45.720Z appoptics:patching patched generic-pool 2.4.3
2022-04-21T21:04:45.722Z appoptics:patching patched pg 5.2.1
2022-04-21T21:04:45.751Z appoptics:debug starting runtimeMetrics


  probes.pg 5.2.1
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (16ms)
  1 failing

  1) probes.pg 5.2.1
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:426:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:345:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:105:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.0.0
removed 1 package, updated 1 package and audited 938 packages in 3.697s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:04:50.616Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:04:50.618Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:04:50.618Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:04:50.619Z appoptics:debug using context provider: ace-context
2022-04-21T21:04:50.693Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:04:50.935Z appoptics:patching patched crypto 
2022-04-21T21:04:50.960Z appoptics:patching patched https 
2022-04-21T21:04:50.960Z appoptics:patching patched http 
2022-04-21T21:04:50.981Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:04:50.981Z appoptics:patching patched fs 
2022-04-21T21:04:50.995Z appoptics:patching patched generic-pool 2.4.3
2022-04-21T21:04:50.997Z appoptics:patching patched pg 6.0.0
2022-04-21T21:04:51.039Z appoptics:debug starting runtimeMetrics


  probes.pg 6.0.0
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (46ms)
  1 failing

  1) probes.pg 6.0.0
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:430:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:349:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:109:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.0.1
updated 1 package and audited 938 packages in 3.872s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:04:56.110Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:04:56.111Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:04:56.112Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:04:56.112Z appoptics:debug using context provider: ace-context
2022-04-21T21:04:56.167Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:04:56.322Z appoptics:patching patched crypto 
2022-04-21T21:04:56.355Z appoptics:patching patched https 
2022-04-21T21:04:56.355Z appoptics:patching patched http 
2022-04-21T21:04:56.378Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:04:56.378Z appoptics:patching patched fs 
2022-04-21T21:04:56.396Z appoptics:patching patched generic-pool 2.4.3
2022-04-21T21:04:56.398Z appoptics:patching patched pg 6.0.1
2022-04-21T21:04:56.428Z appoptics:debug starting runtimeMetrics


  probes.pg 6.0.1
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (16ms)
  1 failing

  1) probes.pg 6.0.1
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:430:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:349:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:109:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.0.2
updated 1 package and audited 938 packages in 3.733s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:05:01.173Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:05:01.174Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:05:01.175Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:05:01.175Z appoptics:debug using context provider: ace-context
2022-04-21T21:05:01.230Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:05:01.388Z appoptics:patching patched crypto 
2022-04-21T21:05:01.415Z appoptics:patching patched https 
2022-04-21T21:05:01.415Z appoptics:patching patched http 
2022-04-21T21:05:01.439Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:05:01.439Z appoptics:patching patched fs 
2022-04-21T21:05:01.457Z appoptics:patching patched generic-pool 2.4.3
2022-04-21T21:05:01.459Z appoptics:patching patched pg 6.0.2
2022-04-21T21:05:01.488Z appoptics:debug starting runtimeMetrics


  probes.pg 6.0.2
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (16ms)
  1 failing

  1) probes.pg 6.0.2
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:438:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:357:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:117:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.0.3
updated 1 package and audited 938 packages in 4.535s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:05:07.068Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:05:07.069Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:05:07.069Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:05:07.070Z appoptics:debug using context provider: ace-context
2022-04-21T21:05:07.137Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:05:07.310Z appoptics:patching patched crypto 
2022-04-21T21:05:07.336Z appoptics:patching patched https 
2022-04-21T21:05:07.336Z appoptics:patching patched http 
2022-04-21T21:05:07.359Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:05:07.360Z appoptics:patching patched fs 
2022-04-21T21:05:07.376Z appoptics:patching patched generic-pool 2.4.3
2022-04-21T21:05:07.379Z appoptics:patching patched pg 6.0.3
2022-04-21T21:05:07.410Z appoptics:debug starting runtimeMetrics


  probes.pg 6.0.3
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (16ms)
  1 failing

  1) probes.pg 6.0.3
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:438:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:357:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:117:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.0.4
added 1 package from 1 contributor, removed 2 packages, updated 2 packages and audited 937 packages in 3.71s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:05:12.144Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:05:12.145Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:05:12.145Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:05:12.146Z appoptics:debug using context provider: ace-context
2022-04-21T21:05:12.200Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:05:12.350Z appoptics:patching patched crypto 
2022-04-21T21:05:12.377Z appoptics:patching patched https 
2022-04-21T21:05:12.377Z appoptics:patching patched http 
2022-04-21T21:05:12.399Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:05:12.400Z appoptics:patching patched fs 
2022-04-21T21:05:12.416Z appoptics:patching patched generic-pool 2.4.3
2022-04-21T21:05:12.419Z appoptics:patching patched pg 6.0.4
2022-04-21T21:05:12.452Z appoptics:debug starting runtimeMetrics


  probes.pg 6.0.4
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (16ms)
  1 failing

  1) probes.pg 6.0.4
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:438:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:357:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:117:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.0.5
added 1 package from 2 contributors, updated 1 package and audited 938 packages in 4.571s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:05:18.029Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:05:18.031Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:05:18.031Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:05:18.032Z appoptics:debug using context provider: ace-context
2022-04-21T21:05:18.087Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:05:18.260Z appoptics:patching patched crypto 
2022-04-21T21:05:18.296Z appoptics:patching patched https 
2022-04-21T21:05:18.297Z appoptics:patching patched http 
2022-04-21T21:05:18.332Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:05:18.332Z appoptics:patching patched fs 
2022-04-21T21:05:18.351Z appoptics:patching patched generic-pool 2.4.3
2022-04-21T21:05:18.353Z appoptics:patching patched pg 6.0.5
2022-04-21T21:05:18.377Z appoptics:debug starting runtimeMetrics


  probes.pg 6.0.5
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (26ms)
  1 failing

  1) probes.pg 6.0.5
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:438:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:357:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:117:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.1.0
removed 1 package, updated 1 package and audited 937 packages in 3.588s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:05:23.012Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:05:23.014Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:05:23.014Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:05:23.014Z appoptics:debug using context provider: ace-context
2022-04-21T21:05:23.068Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:05:23.227Z appoptics:patching patched crypto 
2022-04-21T21:05:23.251Z appoptics:patching patched https 
2022-04-21T21:05:23.251Z appoptics:patching patched http 
2022-04-21T21:05:23.270Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:05:23.271Z appoptics:patching patched fs 
2022-04-21T21:05:23.285Z appoptics:patching patched generic-pool 2.4.3
2022-04-21T21:05:23.287Z appoptics:patching patched pg 6.1.0
2022-04-21T21:05:23.318Z appoptics:debug starting runtimeMetrics


  probes.pg 6.1.0
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (28ms)
  1 failing

  1) probes.pg 6.1.0
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:441:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:360:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:117:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.1.1
updated 1 package and audited 937 packages in 5.099s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:05:29.564Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:05:29.565Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:05:29.565Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:05:29.566Z appoptics:debug using context provider: ace-context
2022-04-21T21:05:29.620Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:05:29.774Z appoptics:patching patched crypto 
2022-04-21T21:05:29.800Z appoptics:patching patched https 
2022-04-21T21:05:29.800Z appoptics:patching patched http 
2022-04-21T21:05:29.824Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:05:29.824Z appoptics:patching patched fs 
2022-04-21T21:05:29.842Z appoptics:patching patched generic-pool 2.4.3
2022-04-21T21:05:29.844Z appoptics:patching patched pg 6.1.1
2022-04-21T21:05:29.876Z appoptics:debug starting runtimeMetrics


  probes.pg 6.1.1
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (16ms)
  1 failing

  1) probes.pg 6.1.1
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:441:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:360:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:117:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.1.2
updated 1 package and audited 937 packages in 3.605s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:05:34.512Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:05:34.513Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:05:34.513Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:05:34.514Z appoptics:debug using context provider: ace-context
2022-04-21T21:05:34.568Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:05:34.828Z appoptics:patching patched crypto 
2022-04-21T21:05:34.889Z appoptics:patching patched https 
2022-04-21T21:05:34.890Z appoptics:patching patched http 
2022-04-21T21:05:34.915Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:05:34.915Z appoptics:patching patched fs 
2022-04-21T21:05:34.932Z appoptics:patching patched generic-pool 2.4.3
2022-04-21T21:05:34.934Z appoptics:patching patched pg 6.1.2
2022-04-21T21:05:35.003Z appoptics:debug starting runtimeMetrics


  probes.pg 6.1.2
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (24ms)
  1 failing

  1) probes.pg 6.1.2
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:441:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:360:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:117:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.1.3
updated 1 package and audited 937 packages in 3.836s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:05:40.308Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:05:40.309Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:05:40.309Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:05:40.310Z appoptics:debug using context provider: ace-context
2022-04-21T21:05:40.384Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:05:40.598Z appoptics:patching patched crypto 
2022-04-21T21:05:40.624Z appoptics:patching patched https 
2022-04-21T21:05:40.624Z appoptics:patching patched http 
2022-04-21T21:05:40.644Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:05:40.645Z appoptics:patching patched fs 
2022-04-21T21:05:40.680Z appoptics:patching patched generic-pool 2.4.3
2022-04-21T21:05:40.682Z appoptics:patching patched pg 6.1.3
2022-04-21T21:05:40.706Z appoptics:debug starting runtimeMetrics


  probes.pg 6.1.3
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (40ms)
  1 failing

  1) probes.pg 6.1.3
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:456:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:375:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:132:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.1.4
updated 1 package and audited 937 packages in 3.779s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:05:45.657Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:05:45.659Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:05:45.659Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:05:45.659Z appoptics:debug using context provider: ace-context
2022-04-21T21:05:45.714Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:05:45.874Z appoptics:patching patched crypto 
2022-04-21T21:05:45.899Z appoptics:patching patched https 
2022-04-21T21:05:45.899Z appoptics:patching patched http 
2022-04-21T21:05:45.920Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:05:45.920Z appoptics:patching patched fs 
2022-04-21T21:05:45.937Z appoptics:patching patched generic-pool 2.4.3
2022-04-21T21:05:45.939Z appoptics:patching patched pg 6.1.4
2022-04-21T21:05:45.962Z appoptics:debug starting runtimeMetrics


  probes.pg 6.1.4
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (24ms)
  1 failing

  1) probes.pg 6.1.4
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:456:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:375:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:132:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.1.5
updated 1 package and audited 937 packages in 3.743s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:05:50.911Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:05:50.912Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:05:50.912Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:05:50.913Z appoptics:debug using context provider: ace-context
2022-04-21T21:05:50.968Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:05:51.134Z appoptics:patching patched crypto 
2022-04-21T21:05:51.159Z appoptics:patching patched https 
2022-04-21T21:05:51.159Z appoptics:patching patched http 
2022-04-21T21:05:51.179Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:05:51.179Z appoptics:patching patched fs 
2022-04-21T21:05:51.193Z appoptics:patching patched generic-pool 2.4.3
2022-04-21T21:05:51.195Z appoptics:patching patched pg 6.1.5
2022-04-21T21:05:51.218Z appoptics:debug starting runtimeMetrics


  probes.pg 6.1.5
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (25ms)
  1 failing

  1) probes.pg 6.1.5
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:456:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:375:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:132:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.1.6
added 1 package from 2 contributors, updated 1 package and audited 938 packages in 4.451s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:05:56.728Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:05:56.729Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:05:56.729Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:05:56.730Z appoptics:debug using context provider: ace-context
2022-04-21T21:05:56.785Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:05:56.951Z appoptics:patching patched crypto 
2022-04-21T21:05:56.976Z appoptics:patching patched https 
2022-04-21T21:05:56.977Z appoptics:patching patched http 
2022-04-21T21:05:56.997Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:05:56.997Z appoptics:patching patched fs 
2022-04-21T21:05:57.016Z appoptics:patching patched generic-pool 2.4.3
2022-04-21T21:05:57.017Z appoptics:patching patched pg 6.1.6
2022-04-21T21:05:57.041Z appoptics:debug starting runtimeMetrics


  probes.pg 6.1.6
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (25ms)
  1 failing

  1) probes.pg 6.1.6
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:456:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:375:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:132:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.2.2
removed 1 package, updated 2 packages and audited 937 packages in 3.977s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:06:02.069Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:06:02.070Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:06:02.070Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:06:02.071Z appoptics:debug using context provider: ace-context
2022-04-21T21:06:02.126Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:06:02.297Z appoptics:patching patched crypto 
2022-04-21T21:06:02.322Z appoptics:patching patched https 
2022-04-21T21:06:02.322Z appoptics:patching patched http 
2022-04-21T21:06:02.350Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:06:02.350Z appoptics:patching patched fs 
2022-04-21T21:06:02.373Z appoptics:patching patched generic-pool 2.4.3
2022-04-21T21:06:02.375Z appoptics:patching patched pg 6.2.2
2022-04-21T21:06:02.398Z appoptics:debug starting runtimeMetrics


  probes.pg 6.2.2
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (25ms)
  1 failing

  1) probes.pg 6.2.2
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:459:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:375:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:132:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.2.3
updated 1 package and audited 937 packages in 4.345s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:06:07.779Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:06:07.782Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:06:07.782Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:06:07.783Z appoptics:debug using context provider: ace-context
2022-04-21T21:06:07.848Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:06:08.004Z appoptics:patching patched crypto 
2022-04-21T21:06:08.031Z appoptics:patching patched https 
2022-04-21T21:06:08.031Z appoptics:patching patched http 
2022-04-21T21:06:08.055Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:06:08.055Z appoptics:patching patched fs 
2022-04-21T21:06:08.073Z appoptics:patching patched generic-pool 2.4.3
2022-04-21T21:06:08.075Z appoptics:patching patched pg 6.2.3
2022-04-21T21:06:08.109Z appoptics:debug starting runtimeMetrics


  probes.pg 6.2.3
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (16ms)
  1 failing

  1) probes.pg 6.2.3
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:459:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:375:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:132:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.2.4
updated 1 package and audited 937 packages in 3.933s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:06:13.117Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:06:13.118Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:06:13.118Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:06:13.119Z appoptics:debug using context provider: ace-context
2022-04-21T21:06:13.172Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:06:13.336Z appoptics:patching patched crypto 
2022-04-21T21:06:13.360Z appoptics:patching patched https 
2022-04-21T21:06:13.361Z appoptics:patching patched http 
2022-04-21T21:06:13.380Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:06:13.381Z appoptics:patching patched fs 
2022-04-21T21:06:13.398Z appoptics:patching patched generic-pool 2.4.3
2022-04-21T21:06:13.399Z appoptics:patching patched pg 6.2.4
2022-04-21T21:06:13.424Z appoptics:debug starting runtimeMetrics


  probes.pg 6.2.4
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (27ms)
  1 failing

  1) probes.pg 6.2.4
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.2.5
added 1 package from 2 contributors, updated 1 package and audited 938 packages in 4.174s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:06:18.613Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:06:18.615Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:06:18.615Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:06:18.615Z appoptics:debug using context provider: ace-context
2022-04-21T21:06:18.672Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:06:18.829Z appoptics:patching patched crypto 
2022-04-21T21:06:18.853Z appoptics:patching patched https 
2022-04-21T21:06:18.853Z appoptics:patching patched http 
2022-04-21T21:06:18.873Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:06:18.874Z appoptics:patching patched fs 
2022-04-21T21:06:18.890Z appoptics:patching patched generic-pool 2.4.3
2022-04-21T21:06:18.892Z appoptics:patching patched pg 6.2.5
2022-04-21T21:06:18.914Z appoptics:debug starting runtimeMetrics


  probes.pg 6.2.5
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (23ms)
  1 failing

  1) probes.pg 6.2.5
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.3.0
removed 1 package, updated 1 package and audited 937 packages in 3.863s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:06:23.914Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:06:23.915Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:06:23.915Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:06:23.916Z appoptics:debug using context provider: ace-context
2022-04-21T21:06:23.970Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:06:24.122Z appoptics:patching patched crypto 
2022-04-21T21:06:24.152Z appoptics:patching patched https 
2022-04-21T21:06:24.152Z appoptics:patching patched http 
2022-04-21T21:06:24.172Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:06:24.172Z appoptics:patching patched fs 
2022-04-21T21:06:24.187Z appoptics:patching patched generic-pool 2.4.3
2022-04-21T21:06:24.188Z appoptics:patching patched pg 6.3.0
2022-04-21T21:06:24.215Z appoptics:debug starting runtimeMetrics


  probes.pg 6.3.0
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (25ms)
  1 failing

  1) probes.pg 6.3.0
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.3.1
updated 1 package and audited 937 packages in 3.801s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:06:29.157Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:06:29.158Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:06:29.159Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:06:29.159Z appoptics:debug using context provider: ace-context
2022-04-21T21:06:29.233Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:06:29.452Z appoptics:patching patched crypto 
2022-04-21T21:06:29.494Z appoptics:patching patched https 
2022-04-21T21:06:29.494Z appoptics:patching patched http 
2022-04-21T21:06:29.534Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:06:29.534Z appoptics:patching patched fs 
2022-04-21T21:06:29.609Z appoptics:patching patched generic-pool 2.4.3
2022-04-21T21:06:29.612Z appoptics:patching patched pg 6.3.1
2022-04-21T21:06:29.643Z appoptics:debug starting runtimeMetrics


  probes.pg 6.3.1
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (52ms)
  1 failing

  1) probes.pg 6.3.1
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.3.3
added 1 package from 2 contributors, updated 1 package and audited 938 packages in 3.811s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:06:34.763Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:06:34.764Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:06:34.764Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:06:34.765Z appoptics:debug using context provider: ace-context
2022-04-21T21:06:34.819Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:06:34.974Z appoptics:patching patched crypto 
2022-04-21T21:06:35.010Z appoptics:patching patched https 
2022-04-21T21:06:35.010Z appoptics:patching patched http 
2022-04-21T21:06:35.040Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:06:35.040Z appoptics:patching patched fs 
2022-04-21T21:06:35.059Z appoptics:patching patched generic-pool 2.4.3
2022-04-21T21:06:35.060Z appoptics:patching patched pg 6.3.3
2022-04-21T21:06:35.105Z appoptics:debug starting runtimeMetrics


  probes.pg 6.3.3
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (26ms)
  1 failing

  1) probes.pg 6.3.3
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.4.0
removed 1 package, updated 1 package and audited 937 packages in 3.694s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:06:39.878Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:06:39.879Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:06:39.879Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:06:39.880Z appoptics:debug using context provider: ace-context
2022-04-21T21:06:39.957Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:06:40.115Z appoptics:patching patched crypto 
2022-04-21T21:06:40.141Z appoptics:patching patched https 
2022-04-21T21:06:40.141Z appoptics:patching patched http 
2022-04-21T21:06:40.165Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:06:40.166Z appoptics:patching patched fs 
2022-04-21T21:06:40.184Z appoptics:patching patched generic-pool 2.4.3
2022-04-21T21:06:40.186Z appoptics:patching patched pg 6.4.0
2022-04-21T21:06:40.219Z appoptics:debug starting runtimeMetrics


  probes.pg 6.4.0
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (16ms)
  1 failing

  1) probes.pg 6.4.0
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.4.1
updated 1 package and audited 937 packages in 4.378s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:06:45.722Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:06:45.724Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:06:45.724Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:06:45.724Z appoptics:debug using context provider: ace-context
2022-04-21T21:06:45.790Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:06:45.980Z appoptics:patching patched crypto 
2022-04-21T21:06:46.018Z appoptics:patching patched https 
2022-04-21T21:06:46.018Z appoptics:patching patched http 
2022-04-21T21:06:46.059Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:06:46.060Z appoptics:patching patched fs 
2022-04-21T21:06:46.105Z appoptics:patching patched generic-pool 2.4.3
2022-04-21T21:06:46.111Z appoptics:patching patched pg 6.4.1
2022-04-21T21:06:46.183Z appoptics:debug starting runtimeMetrics


  probes.pg 6.4.1
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (29ms)
  1 failing

  1) probes.pg 6.4.1
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.4.2
added 1 package from 2 contributors, updated 1 package and audited 938 packages in 3.807s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:06:51.025Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:06:51.027Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:06:51.027Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:06:51.028Z appoptics:debug using context provider: ace-context
2022-04-21T21:06:51.085Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:06:51.288Z appoptics:patching patched crypto 
2022-04-21T21:06:51.331Z appoptics:patching patched https 
2022-04-21T21:06:51.332Z appoptics:patching patched http 
2022-04-21T21:06:51.356Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:06:51.357Z appoptics:patching patched fs 
2022-04-21T21:06:51.375Z appoptics:patching patched generic-pool 2.4.3
2022-04-21T21:06:51.377Z appoptics:patching patched pg 6.4.2
2022-04-21T21:06:51.413Z appoptics:debug starting runtimeMetrics


  probes.pg 6.4.2
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (17ms)
  1 failing

  1) probes.pg 6.4.2
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.5.0
removed 3 packages, updated 3 packages and audited 935 packages in 4.729s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:06:57.204Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:06:57.205Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:06:57.205Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:06:57.206Z appoptics:debug using context provider: ace-context
2022-04-21T21:06:57.259Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:06:57.430Z appoptics:patching patched crypto 
2022-04-21T21:06:57.454Z appoptics:patching patched https 
2022-04-21T21:06:57.454Z appoptics:patching patched http 
2022-04-21T21:06:57.477Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:06:57.478Z appoptics:patching patched fs 
2022-04-21T21:06:57.486Z appoptics:patching patched pg 7.5.0
2022-04-21T21:06:57.512Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.5.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.5.0
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (97ms)
  64 failing

  1) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  2) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  3) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  4) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  5) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  6) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  7) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  8) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  9) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  10) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  11) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  12) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  13) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  14) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  15) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  16) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  17) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  18) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  19) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  20) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  21) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  22) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  23) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  24) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  25) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  26) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  27) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  28) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  29) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  30) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  31) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  32) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  33) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  34) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  35) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  36) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  37) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  38) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  39) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  40) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  41) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  42) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  43) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  44) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  45) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  46) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  47) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  48) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  49) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  50) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  51) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  52) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  53) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  54) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  55) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  56) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  57) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  58) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  59) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  60) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  61) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  62) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  63) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  64) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.6.0
updated 1 package and audited 935 packages in 3.72s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:07:02.330Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:07:02.332Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:07:02.332Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:07:02.333Z appoptics:debug using context provider: ace-context
2022-04-21T21:07:02.385Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:07:02.540Z appoptics:patching patched crypto 
2022-04-21T21:07:02.567Z appoptics:patching patched https 
2022-04-21T21:07:02.567Z appoptics:patching patched http 
2022-04-21T21:07:02.594Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:07:02.595Z appoptics:patching patched fs 
2022-04-21T21:07:02.604Z appoptics:patching patched pg 7.6.0
2022-04-21T21:07:02.640Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.6.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.6.0
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (83ms)
  64 failing

  1) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  2) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  3) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  4) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  5) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  6) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  7) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  8) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  9) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  10) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  11) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  12) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  13) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  14) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  15) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  16) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  17) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  18) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  19) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  20) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  21) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  22) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  23) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  24) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  25) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  26) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  27) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  28) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  29) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  30) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  31) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  32) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  33) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  34) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  35) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  36) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  37) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  38) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  39) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  40) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  41) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  42) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  43) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  44) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  45) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  46) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  47) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  48) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  49) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  50) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  51) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  52) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  53) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  54) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  55) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  56) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  57) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  58) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  59) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  60) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  61) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  62) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  63) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  64) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.6.1
updated 2 packages and audited 935 packages in 4.576s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:07:08.336Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:07:08.338Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:07:08.338Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:07:08.339Z appoptics:debug using context provider: ace-context
2022-04-21T21:07:08.418Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:07:08.592Z appoptics:patching patched crypto 
2022-04-21T21:07:08.623Z appoptics:patching patched https 
2022-04-21T21:07:08.623Z appoptics:patching patched http 
2022-04-21T21:07:08.646Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:07:08.646Z appoptics:patching patched fs 
2022-04-21T21:07:08.655Z appoptics:patching patched pg 7.6.1
2022-04-21T21:07:08.678Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.6.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.6.1
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (108ms)
  64 failing

  1) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  2) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  3) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  4) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  5) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  6) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  7) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  8) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  9) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  10) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  11) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  12) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  13) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  14) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  15) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  16) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  17) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  18) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  19) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  20) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  21) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  22) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  23) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  24) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  25) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  26) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  27) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  28) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  29) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  30) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  31) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  32) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  33) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  34) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  35) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  36) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  37) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  38) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  39) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  40) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  41) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  42) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  43) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  44) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  45) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  46) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  47) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  48) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  49) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  50) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  51) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  52) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  53) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  54) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  55) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  56) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  57) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  58) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  59) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  60) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  61) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  62) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  63) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  64) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.7.0
updated 1 package and audited 935 packages in 3.609s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:07:13.455Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:07:13.456Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:07:13.457Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:07:13.457Z appoptics:debug using context provider: ace-context
2022-04-21T21:07:13.512Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:07:13.668Z appoptics:patching patched crypto 
2022-04-21T21:07:13.697Z appoptics:patching patched https 
2022-04-21T21:07:13.697Z appoptics:patching patched http 
2022-04-21T21:07:13.726Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:07:13.726Z appoptics:patching patched fs 
2022-04-21T21:07:13.739Z appoptics:patching patched pg 7.7.0
2022-04-21T21:07:13.772Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.7.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.7.0
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (83ms)
  64 failing

  1) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  2) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  3) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  4) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  5) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  6) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  7) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  8) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  9) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  10) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  11) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  12) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  13) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  14) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  15) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  16) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  17) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  18) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  19) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  20) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  21) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  22) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  23) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  24) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  25) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  26) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  27) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  28) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  29) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  30) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  31) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  32) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  33) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  34) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  35) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  36) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  37) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  38) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  39) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  40) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  41) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  42) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  43) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  44) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  45) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  46) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  47) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  48) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  49) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  50) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  51) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  52) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  53) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  54) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  55) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  56) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  57) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  58) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  59) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  60) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  61) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  62) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  63) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  64) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.7.1
updated 1 package and audited 935 packages in 4.172s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:07:19.409Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:07:19.411Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:07:19.411Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:07:19.412Z appoptics:debug using context provider: ace-context
2022-04-21T21:07:19.500Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:07:19.752Z appoptics:patching patched crypto 
2022-04-21T21:07:19.781Z appoptics:patching patched https 
2022-04-21T21:07:19.781Z appoptics:patching patched http 
2022-04-21T21:07:19.805Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:07:19.805Z appoptics:patching patched fs 
2022-04-21T21:07:19.814Z appoptics:patching patched pg 7.7.1
2022-04-21T21:07:19.841Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.7.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.7.1
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (101ms)
  64 failing

  1) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  2) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  3) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  4) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  5) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  6) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  7) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  8) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  9) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  10) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  11) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  12) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  13) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  14) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  15) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  16) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  17) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  18) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  19) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  20) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  21) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  22) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  23) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  24) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  25) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  26) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  27) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  28) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  29) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  30) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  31) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  32) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  33) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  34) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  35) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  36) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  37) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  38) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  39) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  40) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  41) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  42) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  43) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  44) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  45) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  46) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  47) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  48) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  49) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  50) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  51) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  52) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  53) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  54) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  55) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  56) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  57) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  58) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  59) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  60) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  61) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  62) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  63) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  64) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.8.0
updated 3 packages and audited 935 packages in 3.652s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:07:24.672Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:07:24.673Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:07:24.673Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:07:24.674Z appoptics:debug using context provider: ace-context
2022-04-21T21:07:24.731Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:07:24.887Z appoptics:patching patched crypto 
2022-04-21T21:07:24.914Z appoptics:patching patched https 
2022-04-21T21:07:24.914Z appoptics:patching patched http 
2022-04-21T21:07:24.946Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:07:24.946Z appoptics:patching patched fs 
2022-04-21T21:07:24.956Z appoptics:patching patched pg 7.8.0
2022-04-21T21:07:24.989Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.8.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.8.0
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (81ms)
  64 failing

  1) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:443:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:359:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:120:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  2) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  3) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  4) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  5) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  6) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  7) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  8) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  9) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  10) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  11) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  12) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  13) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  14) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  15) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  16) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  17) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  18) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  19) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  20) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  21) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  22) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  23) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  24) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  25) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  26) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  27) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  28) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  29) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  30) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  31) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  32) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  33) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:443:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:359:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:120:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  34) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  35) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  36) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  37) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  38) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  39) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  40) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  41) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  42) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  43) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  44) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  45) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  46) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  47) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  48) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  49) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  50) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  51) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  52) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  53) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  54) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  55) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  56) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  57) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  58) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  59) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  60) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  61) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  62) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  63) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  64) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.8.1
updated 2 packages and audited 935 packages in 3.776s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:07:29.970Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:07:29.971Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:07:29.972Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:07:29.972Z appoptics:debug using context provider: ace-context
2022-04-21T21:07:30.062Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:07:30.332Z appoptics:patching patched crypto 
2022-04-21T21:07:30.359Z appoptics:patching patched https 
2022-04-21T21:07:30.359Z appoptics:patching patched http 
2022-04-21T21:07:30.384Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:07:30.384Z appoptics:patching patched fs 
2022-04-21T21:07:30.393Z appoptics:patching patched pg 7.8.1
2022-04-21T21:07:30.438Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.8.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.8.1
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (178ms)
  64 failing

  1) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:443:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:359:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:120:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  2) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  3) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  4) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  5) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  6) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  7) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  8) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  9) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  10) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  11) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  12) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  13) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  14) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  15) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  16) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  17) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  18) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  19) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  20) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  21) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  22) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  23) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  24) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  25) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  26) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  27) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  28) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  29) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  30) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  31) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  32) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  33) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:443:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:359:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:120:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  34) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  35) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  36) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  37) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  38) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  39) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  40) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  41) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  42) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  43) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  44) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  45) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  46) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  47) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  48) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  49) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  50) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  51) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  52) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  53) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  54) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  55) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  56) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  57) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  58) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  59) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  60) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  61) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  62) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  63) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  64) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.8.2
updated 1 package and audited 935 packages in 3.977s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:07:35.680Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:07:35.681Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:07:35.681Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:07:35.682Z appoptics:debug using context provider: ace-context
2022-04-21T21:07:35.735Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:07:35.893Z appoptics:patching patched crypto 
2022-04-21T21:07:35.917Z appoptics:patching patched https 
2022-04-21T21:07:35.917Z appoptics:patching patched http 
2022-04-21T21:07:35.942Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:07:35.943Z appoptics:patching patched fs 
2022-04-21T21:07:35.952Z appoptics:patching patched pg 7.8.2
2022-04-21T21:07:35.978Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.8.2 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.8.2
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (94ms)
  64 failing

  1) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:443:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:359:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:120:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  2) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  3) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  4) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  5) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  6) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  7) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  8) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  9) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  10) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  11) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  12) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  13) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  14) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  15) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  16) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  17) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  18) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  19) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  20) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  21) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  22) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  23) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  24) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  25) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  26) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  27) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  28) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  29) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  30) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  31) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  32) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  33) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:443:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:359:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:120:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  34) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  35) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  36) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  37) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  38) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  39) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  40) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  41) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  42) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  43) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  44) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  45) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  46) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  47) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  48) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  49) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  50) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  51) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  52) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  53) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  54) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  55) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  56) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  57) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  58) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  59) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  60) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  61) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  62) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  63) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  64) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.9.0
updated 1 package and audited 935 packages in 3.781s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:07:41.050Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:07:41.051Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:07:41.051Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:07:41.052Z appoptics:debug using context provider: ace-context
2022-04-21T21:07:41.124Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:07:41.279Z appoptics:patching patched crypto 
2022-04-21T21:07:41.312Z appoptics:patching patched https 
2022-04-21T21:07:41.312Z appoptics:patching patched http 
2022-04-21T21:07:41.336Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:07:41.337Z appoptics:patching patched fs 
2022-04-21T21:07:41.345Z appoptics:patching patched pg 7.9.0
2022-04-21T21:07:41.368Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.9.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.9.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (249ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (971ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (221ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (220ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (56ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (227ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (234ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (224ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (977ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (227ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (227ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.10.0
updated 1 package and audited 935 packages in 3.782s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:07:52.122Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:07:52.124Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:07:52.124Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:07:52.125Z appoptics:debug using context provider: ace-context
2022-04-21T21:07:52.187Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:07:52.359Z appoptics:patching patched crypto 
2022-04-21T21:07:52.384Z appoptics:patching patched https 
2022-04-21T21:07:52.384Z appoptics:patching patched http 
2022-04-21T21:07:52.409Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:07:52.409Z appoptics:patching patched fs 
2022-04-21T21:07:52.418Z appoptics:patching patched pg 7.10.0
2022-04-21T21:07:52.451Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.10.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.10.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (106ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (972ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (222ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (230ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (224ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (52ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (227ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (233ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (223ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (976ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (228ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (236ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (224ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.11.0
updated 1 package and audited 935 packages in 3.79s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:08:02.949Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:08:02.951Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:08:02.951Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:08:02.952Z appoptics:debug using context provider: ace-context
2022-04-21T21:08:03.024Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:08:03.237Z appoptics:patching patched crypto 
2022-04-21T21:08:03.262Z appoptics:patching patched https 
2022-04-21T21:08:03.262Z appoptics:patching patched http 
2022-04-21T21:08:03.287Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:08:03.287Z appoptics:patching patched fs 
2022-04-21T21:08:03.297Z appoptics:patching patched pg 7.11.0
2022-04-21T21:08:03.322Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.11.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.11.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (101ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (47ms)
        ✓ should trace a basic query using callback (957ms)
        ✓ should trace a basic query using promises (44ms)
        ✓ should trace a prepared statement using a callback (207ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (217ms)
        ✓ should truncate long queries using promises (45ms)
        ✓ should do nothing when disabled using a callback (202ms)
        ✓ should do nothing when disabled using promises (49ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (78ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (225ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (232ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (222ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (978ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (228ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (236ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (229ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.12.0
updated 1 package and audited 935 packages in 3.67s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:08:13.835Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:08:13.836Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:08:13.836Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:08:13.837Z appoptics:debug using context provider: ace-context
2022-04-21T21:08:13.906Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:08:14.119Z appoptics:patching patched crypto 
2022-04-21T21:08:14.144Z appoptics:patching patched https 
2022-04-21T21:08:14.144Z appoptics:patching patched http 
2022-04-21T21:08:14.168Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:08:14.169Z appoptics:patching patched fs 
2022-04-21T21:08:14.177Z appoptics:patching patched pg 7.12.0
2022-04-21T21:08:14.203Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.12.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.12.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (101ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (973ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (224ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (231ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (222ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (82ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (220ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (229ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (220ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (974ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (225ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (233ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (226ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.12.1
updated 2 packages and audited 935 packages in 3.709s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:08:24.616Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:08:24.617Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:08:24.618Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:08:24.618Z appoptics:debug using context provider: ace-context
2022-04-21T21:08:24.688Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:08:24.898Z appoptics:patching patched crypto 
2022-04-21T21:08:24.923Z appoptics:patching patched https 
2022-04-21T21:08:24.924Z appoptics:patching patched http 
2022-04-21T21:08:24.950Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:08:24.950Z appoptics:patching patched fs 
2022-04-21T21:08:24.966Z appoptics:patching patched pg 7.12.1
2022-04-21T21:08:25.003Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.12.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.12.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (101ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (971ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (221ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (229ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (222ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (83ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (229ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (250ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (245ms)
        ✓ should trace a basic query using callback (948ms)
        ✓ should trace a basic query using promises (54ms)
        ✓ should trace a prepared statement using a callback (198ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (49ms)
        ✓ should truncate long queries using a callback (205ms)
        ✓ should truncate long queries using promises (51ms)
        ✓ should do nothing when disabled using a callback (196ms)
        ✓ should do nothing when disabled using promises (54ms)


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.13.0
updated 1 package and audited 935 packages in 3.768s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:08:35.510Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:08:35.512Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:08:35.512Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:08:35.512Z appoptics:debug using context provider: ace-context
2022-04-21T21:08:35.588Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:08:35.809Z appoptics:patching patched crypto 
2022-04-21T21:08:35.834Z appoptics:patching patched https 
2022-04-21T21:08:35.835Z appoptics:patching patched http 
2022-04-21T21:08:35.860Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:08:35.861Z appoptics:patching patched fs 
2022-04-21T21:08:35.887Z appoptics:patching patched pg 7.13.0
2022-04-21T21:08:35.918Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.13.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.13.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (128ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (972ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (222ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (233ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (225ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (58ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (213ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (233ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (223ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (978ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (229ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (230ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.14.0
updated 1 package and audited 935 packages in 4.091s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:08:46.754Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:08:46.756Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:08:46.756Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:08:46.757Z appoptics:debug using context provider: ace-context
2022-04-21T21:08:46.828Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:08:47.050Z appoptics:patching patched crypto 
2022-04-21T21:08:47.077Z appoptics:patching patched https 
2022-04-21T21:08:47.077Z appoptics:patching patched http 
2022-04-21T21:08:47.103Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:08:47.103Z appoptics:patching patched fs 
2022-04-21T21:08:47.122Z appoptics:patching patched pg 7.14.0
2022-04-21T21:08:47.156Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.14.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.14.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (104ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (974ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (224ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (231ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (224ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (54ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (226ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (232ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (229ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (960ms)
        ✓ should trace a basic query using promises (41ms)
        ✓ should trace a prepared statement using a callback (210ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (217ms)
        ✓ should truncate long queries using promises (38ms)
        ✓ should do nothing when disabled using a callback (209ms)
        ✓ should do nothing when disabled using promises (41ms)


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.15.0
updated 1 package and audited 935 packages in 3.635s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:08:57.467Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:08:57.469Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:08:57.469Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:08:57.470Z appoptics:debug using context provider: ace-context
2022-04-21T21:08:57.545Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:08:57.814Z appoptics:patching patched crypto 
2022-04-21T21:08:57.861Z appoptics:patching patched https 
2022-04-21T21:08:57.861Z appoptics:patching patched http 
2022-04-21T21:08:57.919Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:08:57.919Z appoptics:patching patched fs 
2022-04-21T21:08:57.931Z appoptics:patching patched pg 7.15.0
2022-04-21T21:08:57.957Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.15.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.15.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (119ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (55ms)
        ✓ should trace a basic query using callback (950ms)
        ✓ should trace a basic query using promises (52ms)
        ✓ should trace a prepared statement using a callback (200ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (47ms)
        ✓ should truncate long queries using a callback (207ms)
        ✓ should truncate long queries using promises (49ms)
        ✓ should do nothing when disabled using a callback (199ms)
        ✓ should do nothing when disabled using promises (52ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (58ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (229ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (236ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (230ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (232ms)
        ✓ should trace a basic query using callback (977ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (227ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (211ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.15.1
updated 1 package and audited 935 packages in 3.571s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:09:08.246Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:09:08.248Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:09:08.248Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:09:08.249Z appoptics:debug using context provider: ace-context
2022-04-21T21:09:08.311Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:09:08.679Z appoptics:patching patched crypto 
2022-04-21T21:09:08.705Z appoptics:patching patched https 
2022-04-21T21:09:08.705Z appoptics:patching patched http 
2022-04-21T21:09:08.730Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:09:08.730Z appoptics:patching patched fs 
2022-04-21T21:09:08.751Z appoptics:patching patched pg 7.15.1
2022-04-21T21:09:08.780Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.15.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.15.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (111ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (42ms)
        ✓ should trace a basic query using callback (963ms)
        ✓ should trace a basic query using promises (38ms)
        ✓ should trace a prepared statement using a callback (215ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (222ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (213ms)
        ✓ should do nothing when disabled using promises (38ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (72ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (228ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (226ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (982ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (232ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (247ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (241ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.15.2
updated 1 package and audited 935 packages in 3.618s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:09:19.084Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:09:19.085Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:09:19.085Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:09:19.086Z appoptics:debug using context provider: ace-context
2022-04-21T21:09:19.141Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:09:19.378Z appoptics:patching patched crypto 
2022-04-21T21:09:19.403Z appoptics:patching patched https 
2022-04-21T21:09:19.404Z appoptics:patching patched http 
2022-04-21T21:09:19.428Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:09:19.428Z appoptics:patching patched fs 
2022-04-21T21:09:19.437Z appoptics:patching patched pg 7.15.2
2022-04-21T21:09:19.483Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.15.2 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.15.2
      ✓ UDP might lose a message
      ✓ should create the pg testing context (156ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (968ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (218ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (225ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (220ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (51ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (228ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (236ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (239ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (980ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (230ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (242ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (235ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.16.0
added 1 package, updated 1 package and audited 936 packages in 3.694s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:09:29.890Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:09:29.892Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:09:29.892Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:09:29.892Z appoptics:debug using context provider: ace-context
2022-04-21T21:09:29.948Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:09:30.159Z appoptics:patching patched crypto 
2022-04-21T21:09:30.205Z appoptics:patching patched https 
2022-04-21T21:09:30.205Z appoptics:patching patched http 
2022-04-21T21:09:30.237Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:09:30.237Z appoptics:patching patched fs 
2022-04-21T21:09:30.249Z appoptics:patching patched pg 7.16.0
2022-04-21T21:09:30.293Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.16.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.16.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (125ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (969ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (219ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (227ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (231ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (50ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (229ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (236ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (226ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (251ms)
        ✓ should trace a basic query using callback (979ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (229ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (229ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.16.1
updated 1 package and audited 936 packages in 4.065s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:09:41.273Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:09:41.274Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:09:41.275Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:09:41.276Z appoptics:debug using context provider: ace-context
2022-04-21T21:09:41.350Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:09:41.633Z appoptics:patching patched crypto 
2022-04-21T21:09:41.669Z appoptics:patching patched https 
2022-04-21T21:09:41.669Z appoptics:patching patched http 
2022-04-21T21:09:41.700Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:09:41.700Z appoptics:patching patched fs 
2022-04-21T21:09:41.711Z appoptics:patching patched pg 7.16.1
2022-04-21T21:09:41.744Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.16.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.16.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (98ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (971ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (221ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (229ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (221ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (50ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (228ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (236ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (226ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (980ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (231ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (240ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (232ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.17.0
updated 1 package and audited 936 packages in 4.691s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:09:53.109Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:09:53.110Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:09:53.110Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:09:53.111Z appoptics:debug using context provider: ace-context
2022-04-21T21:09:53.166Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:09:53.331Z appoptics:patching patched crypto 
2022-04-21T21:09:53.356Z appoptics:patching patched https 
2022-04-21T21:09:53.356Z appoptics:patching patched http 
2022-04-21T21:09:53.381Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:09:53.382Z appoptics:patching patched fs 
2022-04-21T21:09:53.392Z appoptics:patching patched pg 7.17.0
2022-04-21T21:09:53.418Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.17.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.17.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (102ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (39ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (982ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (231ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (237ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (232ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (53ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (229ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (236ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (225ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (982ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (231ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (240ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (233ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.17.1
updated 1 package and audited 936 packages in 4.751s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:10:04.934Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:10:04.935Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:10:04.935Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:10:04.936Z appoptics:debug using context provider: ace-context
2022-04-21T21:10:04.991Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:10:05.157Z appoptics:patching patched crypto 
2022-04-21T21:10:05.182Z appoptics:patching patched https 
2022-04-21T21:10:05.182Z appoptics:patching patched http 
2022-04-21T21:10:05.208Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:10:05.208Z appoptics:patching patched fs 
2022-04-21T21:10:05.218Z appoptics:patching patched pg 7.17.1
2022-04-21T21:10:05.245Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.17.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.17.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (99ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (982ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (233ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (240ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (236ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (53ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (228ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (236ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (227ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (982ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (232ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (240ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (233ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.18.0
updated 1 package and audited 936 packages in 4.647s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:10:16.452Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:10:16.453Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:10:16.453Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:10:16.454Z appoptics:debug using context provider: ace-context
2022-04-21T21:10:16.509Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:10:16.667Z appoptics:patching patched crypto 
2022-04-21T21:10:16.694Z appoptics:patching patched https 
2022-04-21T21:10:16.694Z appoptics:patching patched http 
2022-04-21T21:10:16.724Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:10:16.724Z appoptics:patching patched fs 
2022-04-21T21:10:16.735Z appoptics:patching patched pg 7.18.0
2022-04-21T21:10:16.774Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.18.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.18.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (97ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (970ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (220ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (228ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (223ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (52ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (226ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (234ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (225ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (977ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (227ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (236ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (228ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.18.1
updated 1 package and audited 936 packages in 4.781s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:10:28.083Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:10:28.084Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:10:28.085Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:10:28.085Z appoptics:debug using context provider: ace-context
2022-04-21T21:10:28.139Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:10:28.302Z appoptics:patching patched crypto 
2022-04-21T21:10:28.326Z appoptics:patching patched https 
2022-04-21T21:10:28.326Z appoptics:patching patched http 
2022-04-21T21:10:28.350Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:10:28.351Z appoptics:patching patched fs 
2022-04-21T21:10:28.360Z appoptics:patching patched pg 7.18.1
2022-04-21T21:10:28.385Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.18.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.18.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (102ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (973ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (224ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (231ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (223ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (53ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (227ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (226ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (978ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (228ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (236ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (214ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.18.2
updated 1 package and audited 936 packages in 4.702s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:10:39.743Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:10:39.744Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:10:39.744Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:10:39.745Z appoptics:debug using context provider: ace-context
2022-04-21T21:10:39.822Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:10:40.006Z appoptics:patching patched crypto 
2022-04-21T21:10:40.033Z appoptics:patching patched https 
2022-04-21T21:10:40.033Z appoptics:patching patched http 
2022-04-21T21:10:40.063Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:10:40.063Z appoptics:patching patched fs 
2022-04-21T21:10:40.074Z appoptics:patching patched pg 7.18.2
2022-04-21T21:10:40.108Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.18.2 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.18.2
      ✓ UDP might lose a message
      ✓ should create the pg testing context (94ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (50ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (974ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (224ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (230ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (224ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (57ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (222ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (228ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (218ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (974ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (225ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (232ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (226ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.0.0
updated 2 packages and audited 936 packages in 4.372s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:10:51.204Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:10:51.206Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:10:51.207Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:10:51.208Z appoptics:debug using context provider: ace-context
2022-04-21T21:10:51.294Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:10:51.531Z appoptics:patching patched crypto 
2022-04-21T21:10:51.556Z appoptics:patching patched https 
2022-04-21T21:10:51.556Z appoptics:patching patched http 
2022-04-21T21:10:51.584Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:10:51.584Z appoptics:patching patched fs 
2022-04-21T21:10:51.599Z appoptics:patching patched pg 8.0.0
2022-04-21T21:10:51.626Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.0.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (104ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (972ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (222ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (230ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (229ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (53ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (228ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (237ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (224ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (980ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (230ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (237ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (231ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.0.1
added 1 package, removed 1 package, updated 1 package and audited 936 packages in 4.425s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:11:02.820Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:11:02.822Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:11:02.823Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:11:02.824Z appoptics:debug using context provider: ace-context
2022-04-21T21:11:02.905Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:11:03.133Z appoptics:patching patched crypto 
2022-04-21T21:11:03.159Z appoptics:patching patched https 
2022-04-21T21:11:03.159Z appoptics:patching patched http 
2022-04-21T21:11:03.185Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:11:03.186Z appoptics:patching patched fs 
2022-04-21T21:11:03.215Z appoptics:patching patched pg 8.0.1
2022-04-21T21:11:03.246Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.0.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.0.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (181ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (970ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (219ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (227ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (218ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (54ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (228ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (236ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (236ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (977ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (227ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (227ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.0.2
updated 1 package and audited 936 packages in 4.15s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:11:14.307Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:11:14.308Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:11:14.308Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:11:14.309Z appoptics:debug using context provider: ace-context
2022-04-21T21:11:14.382Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:11:14.625Z appoptics:patching patched crypto 
2022-04-21T21:11:14.650Z appoptics:patching patched https 
2022-04-21T21:11:14.650Z appoptics:patching patched http 
2022-04-21T21:11:14.694Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:11:14.695Z appoptics:patching patched fs 
2022-04-21T21:11:14.706Z appoptics:patching patched pg 8.0.2
2022-04-21T21:11:14.766Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.0.2 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.0.2
      ✓ UDP might lose a message
      ✓ should create the pg testing context (143ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (40ms)
        ✓ should trace a basic query using callback (963ms)
        ✓ should trace a basic query using promises (38ms)
        ✓ should trace a prepared statement using a callback (213ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (221ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (214ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (51ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (228ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (234ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (227ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (977ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (228ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (228ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.0.3
updated 1 package and audited 936 packages in 4.071s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:11:25.653Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:11:25.654Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:11:25.655Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:11:25.656Z appoptics:debug using context provider: ace-context
2022-04-21T21:11:25.726Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:11:25.942Z appoptics:patching patched crypto 
2022-04-21T21:11:25.968Z appoptics:patching patched https 
2022-04-21T21:11:25.968Z appoptics:patching patched http 
2022-04-21T21:11:25.995Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:11:25.995Z appoptics:patching patched fs 
2022-04-21T21:11:26.009Z appoptics:patching patched pg 8.0.3
2022-04-21T21:11:26.037Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.0.3 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.0.3
      ✓ UDP might lose a message
      ✓ should create the pg testing context (137ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (39ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (42ms)
        ✓ should trace a basic query using callback (961ms)
        ✓ should trace a basic query using promises (40ms)
        ✓ should trace a prepared statement using a callback (211ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (219ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (211ms)
        ✓ should do nothing when disabled using promises (40ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (54ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (228ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (237ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (231ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (982ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (232ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (239ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (232ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.1.0
updated 2 packages and audited 936 packages in 3.925s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:11:36.659Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:11:36.660Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:11:36.660Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:11:36.661Z appoptics:debug using context provider: ace-context
2022-04-21T21:11:36.715Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:11:36.877Z appoptics:patching patched crypto 
2022-04-21T21:11:36.902Z appoptics:patching patched https 
2022-04-21T21:11:36.902Z appoptics:patching patched http 
2022-04-21T21:11:36.926Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:11:36.926Z appoptics:patching patched fs 
2022-04-21T21:11:36.935Z appoptics:patching patched pg 8.1.0
2022-04-21T21:11:36.970Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.1.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.1.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (125ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (41ms)
        ✓ should trace a basic query using callback (962ms)
        ✓ should trace a basic query using promises (40ms)
        ✓ should trace a prepared statement using a callback (211ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (222ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (215ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (61ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (226ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (234ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (225ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (980ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (231ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (239ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (231ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.2.0
updated 1 package and audited 936 packages in 3.755s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:11:47.477Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:11:47.478Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:11:47.478Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:11:47.479Z appoptics:debug using context provider: ace-context
2022-04-21T21:11:47.534Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:11:47.689Z appoptics:patching patched crypto 
2022-04-21T21:11:47.720Z appoptics:patching patched https 
2022-04-21T21:11:47.721Z appoptics:patching patched http 
2022-04-21T21:11:47.745Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:11:47.745Z appoptics:patching patched fs 
2022-04-21T21:11:47.756Z appoptics:patching patched pg 8.2.0
2022-04-21T21:11:47.780Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.2.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.2.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (102ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (67ms)
        ✓ should trace a basic query using callback (940ms)
        ✓ should trace a basic query using promises (61ms)
        ✓ should trace a prepared statement using a callback (191ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (54ms)
        ✓ should truncate long queries using a callback (200ms)
        ✓ should truncate long queries using promises (54ms)
        ✓ should do nothing when disabled using a callback (193ms)
        ✓ should do nothing when disabled using promises (58ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (60ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (228ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (236ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (227ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (981ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (232ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (239ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (236ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.2.1
updated 1 package and audited 936 packages in 3.787s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:11:58.278Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:11:58.279Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:11:58.279Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:11:58.280Z appoptics:debug using context provider: ace-context
2022-04-21T21:11:58.335Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:11:58.505Z appoptics:patching patched crypto 
2022-04-21T21:11:58.532Z appoptics:patching patched https 
2022-04-21T21:11:58.532Z appoptics:patching patched http 
2022-04-21T21:11:58.563Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:11:58.563Z appoptics:patching patched fs 
2022-04-21T21:11:58.576Z appoptics:patching patched pg 8.2.1
2022-04-21T21:11:58.615Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.2.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.2.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (99ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (38ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (980ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (229ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (237ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (235ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (75ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (62ms)
        ✓ should trace a basic query using promises (41ms)
        ✓ should trace a prepared statement using a callback (205ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (38ms)
        ✓ should truncate long queries using a callback (213ms)
        ✓ should truncate long queries using promises (40ms)
        ✓ should do nothing when disabled using a callback (207ms)
        ✓ should do nothing when disabled using promises (44ms)
      using pool with backed up queue
        ✓ should exhaust the pool (251ms)
        ✓ should trace a basic query using callback (957ms)
        ✓ should trace a basic query using promises (45ms)
        ✓ should trace a prepared statement using a callback (208ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (40ms)
        ✓ should truncate long queries using a callback (214ms)
        ✓ should truncate long queries using promises (40ms)
        ✓ should do nothing when disabled using a callback (208ms)
        ✓ should do nothing when disabled using promises (42ms)


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.2.2
updated 1 package and audited 936 packages in 3.806s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:12:09.212Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:12:09.213Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:12:09.213Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:12:09.214Z appoptics:debug using context provider: ace-context
2022-04-21T21:12:09.270Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:12:09.430Z appoptics:patching patched crypto 
2022-04-21T21:12:09.457Z appoptics:patching patched https 
2022-04-21T21:12:09.457Z appoptics:patching patched http 
2022-04-21T21:12:09.488Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:12:09.488Z appoptics:patching patched fs 
2022-04-21T21:12:09.501Z appoptics:patching patched pg 8.2.2
2022-04-21T21:12:09.539Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.2.2 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.2.2
      ✓ UDP might lose a message
      ✓ should create the pg testing context (97ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (38ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (979ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (229ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (238ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (235ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (83ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises (46ms)
        ✓ should trace a prepared statement using a callback (205ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (215ms)
        ✓ should truncate long queries using promises (42ms)
        ✓ should do nothing when disabled using a callback (206ms)
        ✓ should do nothing when disabled using promises (42ms)
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (959ms)
        ✓ should trace a basic query using promises (42ms)
        ✓ should trace a prepared statement using a callback (209ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (217ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (213ms)
        ✓ should do nothing when disabled using promises (39ms)


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.3.0
updated 1 package and audited 936 packages in 3.708s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:12:20.056Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:12:20.057Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:12:20.057Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:12:20.058Z appoptics:debug using context provider: ace-context
2022-04-21T21:12:20.118Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:12:20.295Z appoptics:patching patched crypto 
2022-04-21T21:12:20.320Z appoptics:patching patched https 
2022-04-21T21:12:20.320Z appoptics:patching patched http 
2022-04-21T21:12:20.344Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:12:20.344Z appoptics:patching patched fs 
2022-04-21T21:12:20.355Z appoptics:patching patched pg 8.3.0
2022-04-21T21:12:20.381Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.3.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.3.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (107ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (42ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (974ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (224ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (229ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (223ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (66ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (41ms)
        ✓ should trace a basic query using promises (57ms)
        ✓ should trace a prepared statement using a callback (180ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (66ms)
        ✓ should truncate long queries using a callback (187ms)
        ✓ should truncate long queries using promises (69ms)
        ✓ should do nothing when disabled using a callback (179ms)
        ✓ should do nothing when disabled using promises (68ms)
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (934ms)
        ✓ should trace a basic query using promises (67ms)
        ✓ should trace a prepared statement using a callback (185ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (62ms)
        ✓ should truncate long queries using a callback (192ms)
        ✓ should truncate long queries using promises (62ms)
        ✓ should do nothing when disabled using a callback (185ms)
        ✓ should do nothing when disabled using promises (65ms)


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.3.2
updated 1 package and audited 936 packages in 3.689s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:12:30.929Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:12:30.930Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:12:30.930Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:12:30.935Z appoptics:debug using context provider: ace-context
2022-04-21T21:12:31.009Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:12:31.168Z appoptics:patching patched crypto 
2022-04-21T21:12:31.200Z appoptics:patching patched https 
2022-04-21T21:12:31.200Z appoptics:patching patched http 
2022-04-21T21:12:31.231Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:12:31.231Z appoptics:patching patched fs 
2022-04-21T21:12:31.244Z appoptics:patching patched pg 8.3.2
2022-04-21T21:12:31.280Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.3.2 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.3.2
      ✓ UDP might lose a message
      ✓ should create the pg testing context (120ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (40ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (48ms)
        ✓ should trace a basic query using callback (955ms)
        ✓ should trace a basic query using promises (46ms)
        ✓ should trace a prepared statement using a callback (206ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (40ms)
        ✓ should truncate long queries using a callback (213ms)
        ✓ should truncate long queries using promises (42ms)
        ✓ should do nothing when disabled using a callback (207ms)
        ✓ should do nothing when disabled using promises (44ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (59ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (221ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (227ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (218ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (973ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (230ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (238ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (235ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.3.3
updated 1 package and audited 936 packages in 3.907s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:12:41.910Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:12:41.912Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:12:41.912Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:12:41.912Z appoptics:debug using context provider: ace-context
2022-04-21T21:12:41.964Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:12:42.125Z appoptics:patching patched crypto 
2022-04-21T21:12:42.149Z appoptics:patching patched https 
2022-04-21T21:12:42.149Z appoptics:patching patched http 
2022-04-21T21:12:42.173Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:12:42.174Z appoptics:patching patched fs 
2022-04-21T21:12:42.184Z appoptics:patching patched pg 8.3.3
2022-04-21T21:12:42.210Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.3.3 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.3.3
      ✓ UDP might lose a message
      ✓ should create the pg testing context (100ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (39ms)
        ✓ should trace a basic query using callback (965ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (216ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (223ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (216ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (52ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (229ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (238ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (227ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (247ms)
        ✓ should trace a basic query using callback (978ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (229ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (237ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (234ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.4.0
removed 1 package, updated 1 package and audited 935 packages in 3.976s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:12:52.811Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:12:52.813Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:12:52.813Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:12:52.814Z appoptics:debug using context provider: ace-context
2022-04-21T21:12:52.869Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:12:53.031Z appoptics:patching patched crypto 
2022-04-21T21:12:53.058Z appoptics:patching patched https 
2022-04-21T21:12:53.059Z appoptics:patching patched http 
2022-04-21T21:12:53.089Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:12:53.089Z appoptics:patching patched fs 
2022-04-21T21:12:53.101Z appoptics:patching patched pg 8.4.0
2022-04-21T21:12:53.138Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.4.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.4.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (116ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (38ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (981ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (232ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (240ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (235ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (76ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (217ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (234ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (223ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (977ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (227ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (228ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.4.1
updated 1 package and audited 935 packages in 4.014s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:13:03.846Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:13:03.848Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:13:03.848Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:13:03.848Z appoptics:debug using context provider: ace-context
2022-04-21T21:13:03.902Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:13:04.071Z appoptics:patching patched crypto 
2022-04-21T21:13:04.095Z appoptics:patching patched https 
2022-04-21T21:13:04.096Z appoptics:patching patched http 
2022-04-21T21:13:04.121Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:13:04.122Z appoptics:patching patched fs 
2022-04-21T21:13:04.134Z appoptics:patching patched pg 8.4.1
2022-04-21T21:13:04.161Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.4.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.4.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (100ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (973ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (225ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (233ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (225ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (53ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (228ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (236ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (227ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (981ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (232ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (238ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (232ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.4.2
updated 1 package and audited 935 packages in 3.947s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:13:14.740Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:13:14.741Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:13:14.741Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:13:14.742Z appoptics:debug using context provider: ace-context
2022-04-21T21:13:14.797Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:13:14.966Z appoptics:patching patched crypto 
2022-04-21T21:13:14.991Z appoptics:patching patched https 
2022-04-21T21:13:14.991Z appoptics:patching patched http 
2022-04-21T21:13:15.016Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:13:15.016Z appoptics:patching patched fs 
2022-04-21T21:13:15.027Z appoptics:patching patched pg 8.4.2
2022-04-21T21:13:15.050Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.4.2 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.4.2
      ✓ UDP might lose a message
      ✓ should create the pg testing context (101ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (970ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (221ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (230ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (222ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (53ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (227ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (226ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (979ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (230ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (238ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (233ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.5.0
updated 1 package and audited 935 packages in 3.943s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:13:25.618Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:13:25.619Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:13:25.620Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:13:25.620Z appoptics:debug using context provider: ace-context
2022-04-21T21:13:25.678Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:13:25.843Z appoptics:patching patched crypto 
2022-04-21T21:13:25.867Z appoptics:patching patched https 
2022-04-21T21:13:25.867Z appoptics:patching patched http 
2022-04-21T21:13:25.893Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:13:25.894Z appoptics:patching patched fs 
2022-04-21T21:13:25.909Z appoptics:patching patched pg 8.5.0
2022-04-21T21:13:25.944Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.5.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.5.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (114ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (972ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (223ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (230ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (224ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (61ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises (44ms)
        ✓ should trace a prepared statement using a callback (200ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (218ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (213ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (964ms)
        ✓ should trace a basic query using promises (38ms)
        ✓ should trace a prepared statement using a callback (214ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (223ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (218ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.5.1
updated 1 package and audited 935 packages in 3.625s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:13:36.452Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:13:36.453Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:13:36.454Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:13:36.454Z appoptics:debug using context provider: ace-context
2022-04-21T21:13:36.508Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:13:36.709Z appoptics:patching patched crypto 
2022-04-21T21:13:36.752Z appoptics:patching patched https 
2022-04-21T21:13:36.753Z appoptics:patching patched http 
2022-04-21T21:13:36.787Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:13:36.787Z appoptics:patching patched fs 
2022-04-21T21:13:36.805Z appoptics:patching patched pg 8.5.1
2022-04-21T21:13:36.835Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.5.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.5.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (95ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (38ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (980ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (230ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (239ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (232ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (61ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (227ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (244ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (233ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (251ms)
        ✓ should trace a basic query using callback (987ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (237ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (244ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (238ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.6.0
updated 1 package and audited 935 packages in 4.432s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:13:48.032Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:13:48.034Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:13:48.034Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:13:48.034Z appoptics:debug using context provider: ace-context
2022-04-21T21:13:48.089Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:13:48.256Z appoptics:patching patched crypto 
2022-04-21T21:13:48.281Z appoptics:patching patched https 
2022-04-21T21:13:48.281Z appoptics:patching patched http 
2022-04-21T21:13:48.308Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:13:48.308Z appoptics:patching patched fs 
2022-04-21T21:13:48.320Z appoptics:patching patched pg 8.6.0
2022-04-21T21:13:48.343Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.6.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.6.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (130ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (972ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (234ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (243ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (236ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (58ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises (43ms)
        ✓ should trace a prepared statement using a callback (206ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (217ms)
        ✓ should truncate long queries using promises (41ms)
        ✓ should do nothing when disabled using a callback (206ms)
        ✓ should do nothing when disabled using promises (41ms)
      using pool with backed up queue
        ✓ should exhaust the pool (251ms)
        ✓ should trace a basic query using callback (960ms)
        ✓ should trace a basic query using promises (41ms)
        ✓ should trace a prepared statement using a callback (211ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (229ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (223ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.7.0
updated 1 package and audited 935 packages in 3.98s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:13:59.195Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:13:59.196Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:13:59.196Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:13:59.197Z appoptics:debug using context provider: ace-context
2022-04-21T21:13:59.252Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:13:59.452Z appoptics:patching patched crypto 
2022-04-21T21:13:59.497Z appoptics:patching patched https 
2022-04-21T21:13:59.498Z appoptics:patching patched http 
2022-04-21T21:13:59.531Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:13:59.532Z appoptics:patching patched fs 
2022-04-21T21:13:59.544Z appoptics:patching patched pg 8.7.0
2022-04-21T21:13:59.579Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.7.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.7.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (109ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (977ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (227ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (228ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (77ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (221ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (232ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (221ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (976ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (226ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (233ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (227ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.7.1
updated 1 package and audited 935 packages in 3.969s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:14:10.341Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:14:10.343Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:14:10.343Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:14:10.343Z appoptics:debug using context provider: ace-context
2022-04-21T21:14:10.398Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:14:10.558Z appoptics:patching patched crypto 
2022-04-21T21:14:10.592Z appoptics:patching patched https 
2022-04-21T21:14:10.593Z appoptics:patching patched http 
2022-04-21T21:14:10.623Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:14:10.623Z appoptics:patching patched fs 
2022-04-21T21:14:10.636Z appoptics:patching patched pg 8.7.1
2022-04-21T21:14:10.669Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.7.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.7.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (107ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (976ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (222ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (228ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (222ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (73ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (220ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (227ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (217ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (251ms)
        ✓ should trace a basic query using callback (970ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (221ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (227ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (222ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.7.3
updated 1 package and audited 935 packages in 4.372s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-21T21:14:21.728Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-21T21:14:21.729Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-21T21:14:21.730Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-21T21:14:21.730Z appoptics:debug using context provider: ace-context
2022-04-21T21:14:21.782Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-21T21:14:21.954Z appoptics:patching patched crypto 
2022-04-21T21:14:21.986Z appoptics:patching patched https 
2022-04-21T21:14:21.986Z appoptics:patching patched http 
2022-04-21T21:14:22.011Z appoptics:patching fs.realpath - adding native method
2022-04-21T21:14:22.011Z appoptics:patching patched fs 
2022-04-21T21:14:22.022Z appoptics:patching patched pg 8.7.3
2022-04-21T21:14:22.043Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.7.3 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.7.3
      ✓ UDP might lose a message
      ✓ should create the pg testing context (140ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (65ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (39ms)
        ✓ should trace a basic query using callback (965ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (215ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (225ms)
        ✓ should truncate long queries using promises (41ms)
        ✓ should do nothing when disabled using a callback (194ms)
        ✓ should do nothing when disabled using promises (44ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (60ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises (47ms)
        ✓ should trace a prepared statement using a callback (205ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (43ms)
        ✓ should truncate long queries using a callback (211ms)
        ✓ should truncate long queries using promises (47ms)
        ✓ should do nothing when disabled using a callback (200ms)
        ✓ should do nothing when disabled using promises (48ms)
      using pool with backed up queue
        ✓ should exhaust the pool (251ms)
        ✓ should trace a basic query using callback (953ms)
        ✓ should trace a basic query using promises (49ms)
        ✓ should trace a prepared statement using a callback (204ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (38ms)
        ✓ should truncate long queries using a callback (215ms)
        ✓ should truncate long queries using promises (39ms)
        ✓ should do nothing when disabled using a callback (210ms)
        ✓ should do nothing when disabled using promises (41ms)


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.7.3
updated 1 package and audited 935 packages in 4.307s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
