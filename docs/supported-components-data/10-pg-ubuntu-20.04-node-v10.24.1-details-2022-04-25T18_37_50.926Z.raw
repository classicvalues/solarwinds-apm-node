npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@4.5.5
added 4 packages from 7 contributors, removed 3 packages, updated 7 packages and audited 936 packages in 7.088s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:38:00.204Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:38:00.206Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:38:00.206Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:38:00.207Z appoptics:debug using context provider: ace-context
2022-04-25T18:38:00.337Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:38:00.725Z appoptics:patching patched crypto 
2022-04-25T18:38:00.772Z appoptics:patching patched https 
2022-04-25T18:38:00.772Z appoptics:patching patched http 
2022-04-25T18:38:00.802Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:38:00.802Z appoptics:patching patched fs 
2022-04-25T18:38:00.830Z appoptics:patching probes.generic-pool "acquire()" not found
2022-04-25T18:38:00.830Z appoptics:patching patched generic-pool 2.1.1
2022-04-25T18:38:00.832Z appoptics:patching patched pg 4.5.5
2022-04-25T18:38:00.867Z appoptics:debug starting runtimeMetrics


  probes.pg 4.5.5
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (24ms)
  1 failing

  1) probes.pg 4.5.5
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:426:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:345:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:105:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@4.5.6
updated 2 packages and audited 936 packages in 5.273s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:38:07.393Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:38:07.394Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:38:07.394Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:38:07.395Z appoptics:debug using context provider: ace-context
2022-04-25T18:38:07.452Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:38:07.639Z appoptics:patching patched crypto 
2022-04-25T18:38:07.667Z appoptics:patching patched https 
2022-04-25T18:38:07.667Z appoptics:patching patched http 
2022-04-25T18:38:07.687Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:38:07.688Z appoptics:patching patched fs 
2022-04-25T18:38:07.704Z appoptics:patching patched generic-pool 2.4.2
2022-04-25T18:38:07.705Z appoptics:patching patched pg 4.5.6
2022-04-25T18:38:07.732Z appoptics:debug starting runtimeMetrics


  probes.pg 4.5.6
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (27ms)
  1 failing

  1) probes.pg 4.5.6
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:426:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:345:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:105:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@4.5.7
added 1 package from 2 contributors, updated 1 package and audited 937 packages in 5.915s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:38:14.926Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:38:14.928Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:38:14.928Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:38:14.928Z appoptics:debug using context provider: ace-context
2022-04-25T18:38:14.987Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:38:15.175Z appoptics:patching patched crypto 
2022-04-25T18:38:15.206Z appoptics:patching patched https 
2022-04-25T18:38:15.206Z appoptics:patching patched http 
2022-04-25T18:38:15.229Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:38:15.229Z appoptics:patching patched fs 
2022-04-25T18:38:15.244Z appoptics:patching patched generic-pool 2.4.2
2022-04-25T18:38:15.245Z appoptics:patching patched pg 4.5.7
2022-04-25T18:38:15.269Z appoptics:debug starting runtimeMetrics


  probes.pg 4.5.7
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (28ms)
  1 failing

  1) probes.pg 4.5.7
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:426:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:345:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:105:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@5.0.0
removed 1 package, updated 3 packages and audited 936 packages in 5.155s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:38:21.725Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:38:21.727Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:38:21.727Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:38:21.727Z appoptics:debug using context provider: ace-context
2022-04-25T18:38:21.788Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:38:22.023Z appoptics:patching patched crypto 
2022-04-25T18:38:22.048Z appoptics:patching patched https 
2022-04-25T18:38:22.048Z appoptics:patching patched http 
2022-04-25T18:38:22.072Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:38:22.072Z appoptics:patching patched fs 
2022-04-25T18:38:22.089Z appoptics:patching patched generic-pool 2.4.2
2022-04-25T18:38:22.090Z appoptics:patching patched pg 5.0.0
2022-04-25T18:38:22.114Z appoptics:debug starting runtimeMetrics


  probes.pg 5.0.0
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (34ms)
  1 failing

  1) probes.pg 5.0.0
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:426:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:345:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:105:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@5.1.0
updated 2 packages and audited 936 packages in 5.445s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:38:28.827Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:38:28.829Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:38:28.829Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:38:28.830Z appoptics:debug using context provider: ace-context
2022-04-25T18:38:28.887Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:38:29.074Z appoptics:patching patched crypto 
2022-04-25T18:38:29.101Z appoptics:patching patched https 
2022-04-25T18:38:29.101Z appoptics:patching patched http 
2022-04-25T18:38:29.125Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:38:29.126Z appoptics:patching patched fs 
2022-04-25T18:38:29.144Z appoptics:patching patched generic-pool 2.4.2
2022-04-25T18:38:29.146Z appoptics:patching patched pg 5.1.0
2022-04-25T18:38:29.175Z appoptics:debug starting runtimeMetrics


  probes.pg 5.1.0
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (17ms)
  1 failing

  1) probes.pg 5.1.0
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:426:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:345:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:105:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@5.2.1
added 4 packages from 16 contributors, removed 1 package, updated 1 package and audited 939 packages in 5.021s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:38:35.389Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:38:35.391Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:38:35.391Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:38:35.392Z appoptics:debug using context provider: ace-context
2022-04-25T18:38:35.457Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:38:35.633Z appoptics:patching patched crypto 
2022-04-25T18:38:35.658Z appoptics:patching patched https 
2022-04-25T18:38:35.658Z appoptics:patching patched http 
2022-04-25T18:38:35.677Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:38:35.678Z appoptics:patching patched fs 
2022-04-25T18:38:35.695Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:38:35.697Z appoptics:patching patched pg 5.2.1
2022-04-25T18:38:35.721Z appoptics:debug starting runtimeMetrics


  probes.pg 5.2.1
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (23ms)
  1 failing

  1) probes.pg 5.2.1
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:426:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:345:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:105:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.0.0
removed 1 package, updated 1 package and audited 938 packages in 5.45s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:38:42.572Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:38:42.573Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:38:42.573Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:38:42.574Z appoptics:debug using context provider: ace-context
2022-04-25T18:38:42.643Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:38:42.880Z appoptics:patching patched crypto 
2022-04-25T18:38:42.911Z appoptics:patching patched https 
2022-04-25T18:38:42.911Z appoptics:patching patched http 
2022-04-25T18:38:42.937Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:38:42.938Z appoptics:patching patched fs 
2022-04-25T18:38:42.961Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:38:42.962Z appoptics:patching patched pg 6.0.0
2022-04-25T18:38:42.988Z appoptics:debug starting runtimeMetrics


  probes.pg 6.0.0
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (24ms)
  1 failing

  1) probes.pg 6.0.0
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:430:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:349:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:109:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.0.1
updated 1 package and audited 938 packages in 4.909s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:38:49.206Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:38:49.207Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:38:49.207Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:38:49.208Z appoptics:debug using context provider: ace-context
2022-04-25T18:38:49.281Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:38:49.527Z appoptics:patching patched crypto 
2022-04-25T18:38:49.557Z appoptics:patching patched https 
2022-04-25T18:38:49.557Z appoptics:patching patched http 
2022-04-25T18:38:49.580Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:38:49.580Z appoptics:patching patched fs 
2022-04-25T18:38:49.616Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:38:49.618Z appoptics:patching patched pg 6.0.1
2022-04-25T18:38:49.646Z appoptics:debug starting runtimeMetrics


  probes.pg 6.0.1
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (36ms)
  1 failing

  1) probes.pg 6.0.1
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:430:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:349:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:109:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.0.2
updated 1 package and audited 938 packages in 5.264s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:38:56.337Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:38:56.339Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:38:56.339Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:38:56.339Z appoptics:debug using context provider: ace-context
2022-04-25T18:38:56.400Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:38:56.629Z appoptics:patching patched crypto 
2022-04-25T18:38:56.656Z appoptics:patching patched https 
2022-04-25T18:38:56.656Z appoptics:patching patched http 
2022-04-25T18:38:56.677Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:38:56.677Z appoptics:patching patched fs 
2022-04-25T18:38:56.693Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:38:56.695Z appoptics:patching patched pg 6.0.2
2022-04-25T18:38:56.718Z appoptics:debug starting runtimeMetrics


  probes.pg 6.0.2
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (27ms)
  1 failing

  1) probes.pg 6.0.2
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:438:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:357:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:117:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.0.3
updated 1 package and audited 938 packages in 5.624s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:39:04.217Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:39:04.220Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:39:04.220Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:39:04.220Z appoptics:debug using context provider: ace-context
2022-04-25T18:39:04.281Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:39:04.494Z appoptics:patching patched crypto 
2022-04-25T18:39:04.528Z appoptics:patching patched https 
2022-04-25T18:39:04.528Z appoptics:patching patched http 
2022-04-25T18:39:04.549Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:39:04.549Z appoptics:patching patched fs 
2022-04-25T18:39:04.570Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:39:04.571Z appoptics:patching patched pg 6.0.3
2022-04-25T18:39:04.599Z appoptics:debug starting runtimeMetrics


  probes.pg 6.0.3
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (51ms)
  1 failing

  1) probes.pg 6.0.3
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:438:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:357:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:117:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.0.4
added 1 package from 1 contributor, removed 2 packages, updated 2 packages and audited 937 packages in 4.926s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:39:10.858Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:39:10.859Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:39:10.859Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:39:10.860Z appoptics:debug using context provider: ace-context
2022-04-25T18:39:10.925Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:39:11.171Z appoptics:patching patched crypto 
2022-04-25T18:39:11.207Z appoptics:patching patched https 
2022-04-25T18:39:11.207Z appoptics:patching patched http 
2022-04-25T18:39:11.233Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:39:11.233Z appoptics:patching patched fs 
2022-04-25T18:39:11.252Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:39:11.263Z appoptics:patching patched pg 6.0.4
2022-04-25T18:39:11.293Z appoptics:debug starting runtimeMetrics


  probes.pg 6.0.4
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (19ms)
  1 failing

  1) probes.pg 6.0.4
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:438:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:357:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:117:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.0.5
added 1 package from 2 contributors, updated 1 package and audited 938 packages in 5.708s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:39:18.184Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:39:18.186Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:39:18.186Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:39:18.187Z appoptics:debug using context provider: ace-context
2022-04-25T18:39:18.249Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:39:18.418Z appoptics:patching patched crypto 
2022-04-25T18:39:18.449Z appoptics:patching patched https 
2022-04-25T18:39:18.449Z appoptics:patching patched http 
2022-04-25T18:39:18.474Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:39:18.474Z appoptics:patching patched fs 
2022-04-25T18:39:18.490Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:39:18.492Z appoptics:patching patched pg 6.0.5
2022-04-25T18:39:18.515Z appoptics:debug starting runtimeMetrics


  probes.pg 6.0.5
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (17ms)
  1 failing

  1) probes.pg 6.0.5
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:438:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:357:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:117:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.1.0
removed 1 package, updated 1 package and audited 937 packages in 4.616s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:39:24.364Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:39:24.366Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:39:24.366Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:39:24.366Z appoptics:debug using context provider: ace-context
2022-04-25T18:39:24.426Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:39:24.623Z appoptics:patching patched crypto 
2022-04-25T18:39:24.653Z appoptics:patching patched https 
2022-04-25T18:39:24.654Z appoptics:patching patched http 
2022-04-25T18:39:24.677Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:39:24.678Z appoptics:patching patched fs 
2022-04-25T18:39:24.695Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:39:24.697Z appoptics:patching patched pg 6.1.0
2022-04-25T18:39:24.722Z appoptics:debug starting runtimeMetrics


  probes.pg 6.1.0
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (27ms)
  1 failing

  1) probes.pg 6.1.0
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:441:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:360:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:117:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.1.1
updated 1 package and audited 937 packages in 5.357s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:39:31.347Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:39:31.349Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:39:31.349Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:39:31.350Z appoptics:debug using context provider: ace-context
2022-04-25T18:39:31.406Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:39:31.589Z appoptics:patching patched crypto 
2022-04-25T18:39:31.618Z appoptics:patching patched https 
2022-04-25T18:39:31.618Z appoptics:patching patched http 
2022-04-25T18:39:31.642Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:39:31.643Z appoptics:patching patched fs 
2022-04-25T18:39:31.663Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:39:31.665Z appoptics:patching patched pg 6.1.1
2022-04-25T18:39:31.693Z appoptics:debug starting runtimeMetrics


  probes.pg 6.1.1
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (28ms)
  1 failing

  1) probes.pg 6.1.1
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:441:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:360:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:117:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.1.2
updated 1 package and audited 937 packages in 4.693s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:39:37.779Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:39:37.780Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:39:37.780Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:39:37.781Z appoptics:debug using context provider: ace-context
2022-04-25T18:39:37.842Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:39:38.037Z appoptics:patching patched crypto 
2022-04-25T18:39:38.068Z appoptics:patching patched https 
2022-04-25T18:39:38.068Z appoptics:patching patched http 
2022-04-25T18:39:38.094Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:39:38.094Z appoptics:patching patched fs 
2022-04-25T18:39:38.117Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:39:38.119Z appoptics:patching patched pg 6.1.2
2022-04-25T18:39:38.153Z appoptics:debug starting runtimeMetrics


  probes.pg 6.1.2
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (26ms)
  1 failing

  1) probes.pg 6.1.2
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:441:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:360:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:117:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.1.3
updated 1 package and audited 937 packages in 5.584s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:39:45.086Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:39:45.088Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:39:45.088Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:39:45.089Z appoptics:debug using context provider: ace-context
2022-04-25T18:39:45.149Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:39:45.351Z appoptics:patching patched crypto 
2022-04-25T18:39:45.380Z appoptics:patching patched https 
2022-04-25T18:39:45.380Z appoptics:patching patched http 
2022-04-25T18:39:45.403Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:39:45.404Z appoptics:patching patched fs 
2022-04-25T18:39:45.421Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:39:45.424Z appoptics:patching patched pg 6.1.3
2022-04-25T18:39:45.452Z appoptics:debug starting runtimeMetrics


  probes.pg 6.1.3
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (29ms)
  1 failing

  1) probes.pg 6.1.3
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:456:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:375:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:132:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.1.4
updated 1 package and audited 937 packages in 5.257s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:39:52.070Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:39:52.071Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:39:52.071Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:39:52.072Z appoptics:debug using context provider: ace-context
2022-04-25T18:39:52.147Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:39:52.390Z appoptics:patching patched crypto 
2022-04-25T18:39:52.421Z appoptics:patching patched https 
2022-04-25T18:39:52.421Z appoptics:patching patched http 
2022-04-25T18:39:52.445Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:39:52.445Z appoptics:patching patched fs 
2022-04-25T18:39:52.490Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:39:52.494Z appoptics:patching patched pg 6.1.4
2022-04-25T18:39:52.529Z appoptics:debug starting runtimeMetrics


  probes.pg 6.1.4
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (32ms)
  1 failing

  1) probes.pg 6.1.4
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:456:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:375:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:132:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.1.5
updated 1 package and audited 937 packages in 4.927s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:39:58.953Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:39:58.955Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:39:58.955Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:39:58.955Z appoptics:debug using context provider: ace-context
2022-04-25T18:39:59.057Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:39:59.301Z appoptics:patching patched crypto 
2022-04-25T18:39:59.328Z appoptics:patching patched https 
2022-04-25T18:39:59.329Z appoptics:patching patched http 
2022-04-25T18:39:59.352Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:39:59.352Z appoptics:patching patched fs 
2022-04-25T18:39:59.368Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:39:59.379Z appoptics:patching patched pg 6.1.5
2022-04-25T18:39:59.407Z appoptics:debug starting runtimeMetrics


  probes.pg 6.1.5
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (27ms)
  1 failing

  1) probes.pg 6.1.5
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:456:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:375:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:132:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.1.6
added 1 package from 2 contributors, updated 1 package and audited 938 packages in 5.304s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:40:06.173Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:40:06.175Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:40:06.175Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:40:06.177Z appoptics:debug using context provider: ace-context
2022-04-25T18:40:06.270Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:40:06.544Z appoptics:patching patched crypto 
2022-04-25T18:40:06.571Z appoptics:patching patched https 
2022-04-25T18:40:06.571Z appoptics:patching patched http 
2022-04-25T18:40:06.592Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:40:06.593Z appoptics:patching patched fs 
2022-04-25T18:40:06.610Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:40:06.612Z appoptics:patching patched pg 6.1.6
2022-04-25T18:40:06.638Z appoptics:debug starting runtimeMetrics


  probes.pg 6.1.6
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (35ms)
  1 failing

  1) probes.pg 6.1.6
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:456:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:375:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:132:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.2.2
removed 1 package, updated 2 packages and audited 937 packages in 5.3s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:40:13.184Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:40:13.185Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:40:13.185Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:40:13.186Z appoptics:debug using context provider: ace-context
2022-04-25T18:40:13.247Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:40:13.444Z appoptics:patching patched crypto 
2022-04-25T18:40:13.470Z appoptics:patching patched https 
2022-04-25T18:40:13.470Z appoptics:patching patched http 
2022-04-25T18:40:13.494Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:40:13.494Z appoptics:patching patched fs 
2022-04-25T18:40:13.517Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:40:13.520Z appoptics:patching patched pg 6.2.2
2022-04-25T18:40:13.558Z appoptics:debug starting runtimeMetrics


  probes.pg 6.2.2
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (27ms)
  1 failing

  1) probes.pg 6.2.2
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:459:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:375:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:132:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.2.3
updated 1 package and audited 937 packages in 5.229s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:40:20.017Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:40:20.018Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:40:20.018Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:40:20.019Z appoptics:debug using context provider: ace-context
2022-04-25T18:40:20.078Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:40:20.289Z appoptics:patching patched crypto 
2022-04-25T18:40:20.319Z appoptics:patching patched https 
2022-04-25T18:40:20.319Z appoptics:patching patched http 
2022-04-25T18:40:20.348Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:40:20.349Z appoptics:patching patched fs 
2022-04-25T18:40:20.369Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:40:20.371Z appoptics:patching patched pg 6.2.3
2022-04-25T18:40:20.414Z appoptics:debug starting runtimeMetrics


  probes.pg 6.2.3
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (23ms)
  1 failing

  1) probes.pg 6.2.3
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:459:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:375:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:132:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.2.4
updated 1 package and audited 937 packages in 5.175s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:40:26.829Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:40:26.831Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:40:26.831Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:40:26.831Z appoptics:debug using context provider: ace-context
2022-04-25T18:40:26.884Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:40:27.067Z appoptics:patching patched crypto 
2022-04-25T18:40:27.096Z appoptics:patching patched https 
2022-04-25T18:40:27.096Z appoptics:patching patched http 
2022-04-25T18:40:27.120Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:40:27.120Z appoptics:patching patched fs 
2022-04-25T18:40:27.138Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:40:27.141Z appoptics:patching patched pg 6.2.4
2022-04-25T18:40:27.172Z appoptics:debug starting runtimeMetrics


  probes.pg 6.2.4
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (17ms)
  1 failing

  1) probes.pg 6.2.4
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.2.5
added 1 package from 2 contributors, updated 1 package and audited 938 packages in 5.266s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:40:33.666Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:40:33.668Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:40:33.668Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:40:33.669Z appoptics:debug using context provider: ace-context
2022-04-25T18:40:33.728Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:40:33.944Z appoptics:patching patched crypto 
2022-04-25T18:40:33.972Z appoptics:patching patched https 
2022-04-25T18:40:33.972Z appoptics:patching patched http 
2022-04-25T18:40:33.995Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:40:33.995Z appoptics:patching patched fs 
2022-04-25T18:40:34.016Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:40:34.023Z appoptics:patching patched pg 6.2.5
2022-04-25T18:40:34.055Z appoptics:debug starting runtimeMetrics


  probes.pg 6.2.5
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (17ms)
  1 failing

  1) probes.pg 6.2.5
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.3.0
removed 1 package, updated 1 package and audited 937 packages in 4.992s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:40:40.276Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:40:40.278Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:40:40.278Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:40:40.279Z appoptics:debug using context provider: ace-context
2022-04-25T18:40:40.344Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:40:40.531Z appoptics:patching patched crypto 
2022-04-25T18:40:40.555Z appoptics:patching patched https 
2022-04-25T18:40:40.556Z appoptics:patching patched http 
2022-04-25T18:40:40.576Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:40:40.577Z appoptics:patching patched fs 
2022-04-25T18:40:40.593Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:40:40.595Z appoptics:patching patched pg 6.3.0
2022-04-25T18:40:40.633Z appoptics:debug starting runtimeMetrics


  probes.pg 6.3.0
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (31ms)
  1 failing

  1) probes.pg 6.3.0
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.3.1
updated 1 package and audited 937 packages in 6.237s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:40:48.202Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:40:48.204Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:40:48.204Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:40:48.205Z appoptics:debug using context provider: ace-context
2022-04-25T18:40:48.289Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:40:48.488Z appoptics:patching patched crypto 
2022-04-25T18:40:48.521Z appoptics:patching patched https 
2022-04-25T18:40:48.522Z appoptics:patching patched http 
2022-04-25T18:40:48.543Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:40:48.544Z appoptics:patching patched fs 
2022-04-25T18:40:48.561Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:40:48.563Z appoptics:patching patched pg 6.3.1
2022-04-25T18:40:48.587Z appoptics:debug starting runtimeMetrics


  probes.pg 6.3.1
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (32ms)
  1 failing

  1) probes.pg 6.3.1
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.3.3
added 1 package from 2 contributors, updated 1 package and audited 938 packages in 5.659s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:40:55.865Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:40:55.867Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:40:55.867Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:40:55.868Z appoptics:debug using context provider: ace-context
2022-04-25T18:40:55.949Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:40:56.239Z appoptics:patching patched crypto 
2022-04-25T18:40:56.273Z appoptics:patching patched https 
2022-04-25T18:40:56.273Z appoptics:patching patched http 
2022-04-25T18:40:56.302Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:40:56.303Z appoptics:patching patched fs 
2022-04-25T18:40:56.349Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:40:56.352Z appoptics:patching patched pg 6.3.3
2022-04-25T18:40:56.390Z appoptics:debug starting runtimeMetrics


  probes.pg 6.3.3
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (42ms)
  1 failing

  1) probes.pg 6.3.3
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.4.0
removed 1 package, updated 1 package and audited 937 packages in 4.879s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:41:02.781Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:41:02.783Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:41:02.783Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:41:02.784Z appoptics:debug using context provider: ace-context
2022-04-25T18:41:02.848Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:41:03.051Z appoptics:patching patched crypto 
2022-04-25T18:41:03.092Z appoptics:patching patched https 
2022-04-25T18:41:03.092Z appoptics:patching patched http 
2022-04-25T18:41:03.128Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:41:03.129Z appoptics:patching patched fs 
2022-04-25T18:41:03.155Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:41:03.158Z appoptics:patching patched pg 6.4.0
2022-04-25T18:41:03.194Z appoptics:debug starting runtimeMetrics


  probes.pg 6.4.0
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (19ms)
  1 failing

  1) probes.pg 6.4.0
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.4.1
updated 1 package and audited 937 packages in 5.68s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:41:10.174Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:41:10.176Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:41:10.176Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:41:10.177Z appoptics:debug using context provider: ace-context
2022-04-25T18:41:10.241Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:41:10.436Z appoptics:patching patched crypto 
2022-04-25T18:41:10.464Z appoptics:patching patched https 
2022-04-25T18:41:10.464Z appoptics:patching patched http 
2022-04-25T18:41:10.484Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:41:10.484Z appoptics:patching patched fs 
2022-04-25T18:41:10.500Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:41:10.501Z appoptics:patching patched pg 6.4.1
2022-04-25T18:41:10.531Z appoptics:debug starting runtimeMetrics


  probes.pg 6.4.1
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (27ms)
  1 failing

  1) probes.pg 6.4.1
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.4.2
added 1 package from 2 contributors, updated 1 package and audited 938 packages in 4.844s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:41:16.815Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:41:16.816Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:41:16.816Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:41:16.817Z appoptics:debug using context provider: ace-context
2022-04-25T18:41:16.896Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:41:17.122Z appoptics:patching patched crypto 
2022-04-25T18:41:17.163Z appoptics:patching patched https 
2022-04-25T18:41:17.163Z appoptics:patching patched http 
2022-04-25T18:41:17.186Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:41:17.186Z appoptics:patching patched fs 
2022-04-25T18:41:17.203Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:41:17.205Z appoptics:patching patched pg 6.4.2
2022-04-25T18:41:17.230Z appoptics:debug starting runtimeMetrics


  probes.pg 6.4.2
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (18ms)
  1 failing

  1) probes.pg 6.4.2
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.5.0
removed 3 packages, updated 3 packages and audited 935 packages in 5.43s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:41:23.903Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:41:23.905Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:41:23.905Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:41:23.906Z appoptics:debug using context provider: ace-context
2022-04-25T18:41:23.972Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:41:24.151Z appoptics:patching patched crypto 
2022-04-25T18:41:24.178Z appoptics:patching patched https 
2022-04-25T18:41:24.179Z appoptics:patching patched http 
2022-04-25T18:41:24.207Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:41:24.208Z appoptics:patching patched fs 
2022-04-25T18:41:24.219Z appoptics:patching patched pg 7.5.0
2022-04-25T18:41:24.255Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.5.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.5.0
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (90ms)
  64 failing

  1) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  2) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  3) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  4) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  5) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  6) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  7) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  8) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  9) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  10) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  11) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  12) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  13) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  14) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  15) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  16) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  17) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  18) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  19) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  20) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  21) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  22) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  23) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  24) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  25) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  26) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  27) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  28) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  29) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  30) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  31) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  32) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  33) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  34) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  35) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  36) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  37) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  38) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  39) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  40) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  41) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  42) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  43) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  44) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  45) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  46) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  47) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  48) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  49) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  50) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  51) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  52) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  53) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  54) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  55) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  56) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  57) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  58) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  59) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  60) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  61) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  62) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  63) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  64) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.6.0
updated 1 package and audited 935 packages in 5.046s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:41:30.600Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:41:30.601Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:41:30.601Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:41:30.602Z appoptics:debug using context provider: ace-context
2022-04-25T18:41:30.660Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:41:30.836Z appoptics:patching patched crypto 
2022-04-25T18:41:30.864Z appoptics:patching patched https 
2022-04-25T18:41:30.864Z appoptics:patching patched http 
2022-04-25T18:41:30.896Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:41:30.896Z appoptics:patching patched fs 
2022-04-25T18:41:30.906Z appoptics:patching patched pg 7.6.0
2022-04-25T18:41:30.931Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.6.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.6.0
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (97ms)
  64 failing

  1) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  2) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  3) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  4) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  5) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  6) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  7) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  8) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  9) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  10) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  11) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  12) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  13) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  14) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  15) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  16) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  17) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  18) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  19) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  20) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  21) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  22) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  23) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  24) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  25) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  26) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  27) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  28) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  29) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  30) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  31) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  32) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  33) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  34) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  35) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  36) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  37) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  38) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  39) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  40) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  41) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  42) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  43) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  44) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  45) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  46) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  47) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  48) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  49) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  50) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  51) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  52) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  53) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  54) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  55) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  56) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  57) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  58) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  59) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  60) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  61) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  62) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  63) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  64) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.6.1
updated 2 packages and audited 935 packages in 5.356s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:41:37.694Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:41:37.695Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:41:37.695Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:41:37.696Z appoptics:debug using context provider: ace-context
2022-04-25T18:41:37.761Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:41:37.994Z appoptics:patching patched crypto 
2022-04-25T18:41:38.022Z appoptics:patching patched https 
2022-04-25T18:41:38.023Z appoptics:patching patched http 
2022-04-25T18:41:38.056Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:41:38.056Z appoptics:patching patched fs 
2022-04-25T18:41:38.082Z appoptics:patching patched pg 7.6.1
2022-04-25T18:41:38.115Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.6.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.6.1
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (148ms)
  64 failing

  1) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  2) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  3) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  4) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  5) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  6) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  7) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  8) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  9) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  10) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  11) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  12) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  13) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  14) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  15) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  16) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  17) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  18) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  19) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  20) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  21) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  22) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  23) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  24) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  25) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  26) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  27) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  28) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  29) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  30) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  31) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  32) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  33) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  34) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  35) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  36) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  37) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  38) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  39) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  40) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  41) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  42) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  43) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  44) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  45) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  46) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  47) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  48) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  49) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  50) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  51) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  52) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  53) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  54) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  55) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  56) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  57) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  58) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  59) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  60) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  61) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  62) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  63) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  64) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.7.0
updated 1 package and audited 935 packages in 5.081s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:41:44.802Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:41:44.804Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:41:44.804Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:41:44.805Z appoptics:debug using context provider: ace-context
2022-04-25T18:41:44.905Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:41:45.305Z appoptics:patching patched crypto 
2022-04-25T18:41:45.365Z appoptics:patching patched https 
2022-04-25T18:41:45.366Z appoptics:patching patched http 
2022-04-25T18:41:45.406Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:41:45.407Z appoptics:patching patched fs 
2022-04-25T18:41:45.428Z appoptics:patching patched pg 7.7.0
2022-04-25T18:41:45.458Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.7.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.7.0
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (123ms)
  64 failing

  1) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  2) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  3) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  4) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  5) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  6) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  7) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  8) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  9) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  10) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  11) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  12) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  13) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  14) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  15) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  16) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  17) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  18) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  19) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  20) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  21) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  22) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  23) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  24) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  25) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  26) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  27) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  28) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  29) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  30) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  31) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  32) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  33) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  34) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  35) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  36) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  37) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  38) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  39) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  40) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  41) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  42) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  43) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  44) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  45) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  46) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  47) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  48) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  49) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  50) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  51) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  52) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  53) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  54) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  55) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  56) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  57) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  58) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  59) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  60) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  61) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  62) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  63) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  64) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.7.1
updated 1 package and audited 935 packages in 4.63s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:41:51.674Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:41:51.676Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:41:51.676Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:41:51.677Z appoptics:debug using context provider: ace-context
2022-04-25T18:41:51.737Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:41:51.933Z appoptics:patching patched crypto 
2022-04-25T18:41:51.958Z appoptics:patching patched https 
2022-04-25T18:41:51.959Z appoptics:patching patched http 
2022-04-25T18:41:51.987Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:41:51.987Z appoptics:patching patched fs 
2022-04-25T18:41:51.997Z appoptics:patching patched pg 7.7.1
2022-04-25T18:41:52.027Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.7.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.7.1
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (102ms)
  64 failing

  1) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  2) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  3) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  4) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  5) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  6) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  7) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  8) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  9) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  10) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  11) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  12) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  13) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  14) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  15) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  16) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  17) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  18) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  19) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  20) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  21) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  22) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  23) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  24) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  25) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  26) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  27) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  28) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  29) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  30) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  31) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  32) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  33) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  34) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  35) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  36) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  37) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  38) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  39) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  40) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  41) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  42) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  43) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  44) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  45) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  46) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  47) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  48) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  49) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  50) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  51) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  52) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  53) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  54) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  55) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  56) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  57) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  58) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  59) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  60) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  61) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  62) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  63) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  64) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.8.0
updated 3 packages and audited 935 packages in 5.111s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:41:58.566Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:41:58.568Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:41:58.568Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:41:58.569Z appoptics:debug using context provider: ace-context
2022-04-25T18:41:58.627Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:41:58.801Z appoptics:patching patched crypto 
2022-04-25T18:41:58.828Z appoptics:patching patched https 
2022-04-25T18:41:58.828Z appoptics:patching patched http 
2022-04-25T18:41:58.855Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:41:58.855Z appoptics:patching patched fs 
2022-04-25T18:41:58.867Z appoptics:patching patched pg 7.8.0
2022-04-25T18:41:58.900Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.8.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.8.0
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (98ms)
  64 failing

  1) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:443:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:359:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:120:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  2) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  3) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  4) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  5) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  6) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  7) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  8) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  9) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  10) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  11) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  12) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  13) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  14) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  15) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  16) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  17) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  18) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  19) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  20) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  21) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  22) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  23) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  24) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  25) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  26) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  27) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  28) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  29) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  30) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  31) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  32) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  33) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:443:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:359:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:120:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  34) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  35) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  36) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  37) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  38) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  39) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  40) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  41) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  42) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  43) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  44) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  45) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  46) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  47) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  48) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  49) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  50) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  51) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  52) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  53) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  54) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  55) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  56) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  57) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  58) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  59) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  60) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  61) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  62) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  63) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  64) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.8.1
updated 2 packages and audited 935 packages in 4.791s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:42:05.134Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:42:05.136Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:42:05.136Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:42:05.137Z appoptics:debug using context provider: ace-context
2022-04-25T18:42:05.209Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:42:05.401Z appoptics:patching patched crypto 
2022-04-25T18:42:05.433Z appoptics:patching patched https 
2022-04-25T18:42:05.433Z appoptics:patching patched http 
2022-04-25T18:42:05.466Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:42:05.466Z appoptics:patching patched fs 
2022-04-25T18:42:05.477Z appoptics:patching patched pg 7.8.1
2022-04-25T18:42:05.514Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.8.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.8.1
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (109ms)
  64 failing

  1) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:443:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:359:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:120:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  2) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  3) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  4) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  5) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  6) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  7) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  8) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  9) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  10) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  11) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  12) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  13) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  14) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  15) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  16) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  17) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  18) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  19) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  20) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  21) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  22) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  23) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  24) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  25) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  26) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  27) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  28) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  29) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  30) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  31) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  32) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  33) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:443:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:359:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:120:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  34) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  35) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  36) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  37) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  38) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  39) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  40) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  41) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  42) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  43) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  44) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  45) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  46) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  47) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  48) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  49) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  50) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  51) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  52) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  53) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  54) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  55) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  56) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  57) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  58) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  59) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  60) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  61) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  62) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  63) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  64) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.8.2
updated 1 package and audited 935 packages in 5.577s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:42:12.443Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:42:12.444Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:42:12.444Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:42:12.445Z appoptics:debug using context provider: ace-context
2022-04-25T18:42:12.506Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:42:12.690Z appoptics:patching patched crypto 
2022-04-25T18:42:12.719Z appoptics:patching patched https 
2022-04-25T18:42:12.720Z appoptics:patching patched http 
2022-04-25T18:42:12.751Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:42:12.751Z appoptics:patching patched fs 
2022-04-25T18:42:12.762Z appoptics:patching patched pg 7.8.2
2022-04-25T18:42:12.798Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.8.2 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.8.2
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (94ms)
  64 failing

  1) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:443:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:359:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:120:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  2) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  3) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  4) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  5) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  6) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  7) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  8) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  9) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  10) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  11) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  12) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  13) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  14) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  15) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  16) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  17) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  18) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  19) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  20) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  21) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  22) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  23) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  24) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  25) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  26) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  27) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  28) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  29) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  30) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  31) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  32) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  33) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:443:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:359:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:120:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  34) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  35) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  36) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  37) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  38) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  39) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  40) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  41) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  42) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  43) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  44) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  45) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  46) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  47) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  48) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  49) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  50) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  51) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  52) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  53) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  54) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  55) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  56) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  57) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  58) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  59) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  60) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  61) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  62) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  63) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  64) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.9.0
updated 1 package and audited 935 packages in 4.712s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:42:18.858Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:42:18.859Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:42:18.859Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:42:18.860Z appoptics:debug using context provider: ace-context
2022-04-25T18:42:18.918Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:42:19.104Z appoptics:patching patched crypto 
2022-04-25T18:42:19.131Z appoptics:patching patched https 
2022-04-25T18:42:19.131Z appoptics:patching patched http 
2022-04-25T18:42:19.157Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:42:19.158Z appoptics:patching patched fs 
2022-04-25T18:42:19.169Z appoptics:patching patched pg 7.9.0
2022-04-25T18:42:19.198Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.9.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.9.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (297ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (48ms)
        ✓ should trace a basic query using callback (957ms)
        ✓ should trace a basic query using promises (44ms)
        ✓ should trace a prepared statement using a callback (207ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (38ms)
        ✓ should truncate long queries using a callback (216ms)
        ✓ should truncate long queries using promises (39ms)
        ✓ should do nothing when disabled using a callback (209ms)
        ✓ should do nothing when disabled using promises (43ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (110ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (54ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (184ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (60ms)
        ✓ should truncate long queries using a callback (192ms)
        ✓ should truncate long queries using promises (65ms)
        ✓ should do nothing when disabled using a callback (182ms)
        ✓ should do nothing when disabled using promises (66ms)
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (936ms)
        ✓ should trace a basic query using promises (64ms)
        ✓ should trace a prepared statement using a callback (188ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (57ms)
        ✓ should truncate long queries using a callback (197ms)
        ✓ should truncate long queries using promises (57ms)
        ✓ should do nothing when disabled using a callback (190ms)
        ✓ should do nothing when disabled using promises (60ms)


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.10.0
updated 1 package and audited 935 packages in 4.695s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:42:31.000Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:42:31.001Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:42:31.001Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:42:31.002Z appoptics:debug using context provider: ace-context
2022-04-25T18:42:31.065Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:42:31.246Z appoptics:patching patched crypto 
2022-04-25T18:42:31.272Z appoptics:patching patched https 
2022-04-25T18:42:31.272Z appoptics:patching patched http 
2022-04-25T18:42:31.296Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:42:31.297Z appoptics:patching patched fs 
2022-04-25T18:42:31.307Z appoptics:patching patched pg 7.10.0
2022-04-25T18:42:31.333Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.10.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.10.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (109ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (973ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (226ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (227ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (91ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (230ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (240ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (229ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (983ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (234ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (243ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (236ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.11.0
updated 1 package and audited 935 packages in 4.627s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:42:42.818Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:42:42.820Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:42:42.820Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:42:42.821Z appoptics:debug using context provider: ace-context
2022-04-25T18:42:42.877Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:42:43.064Z appoptics:patching patched crypto 
2022-04-25T18:42:43.089Z appoptics:patching patched https 
2022-04-25T18:42:43.089Z appoptics:patching patched http 
2022-04-25T18:42:43.116Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:42:43.117Z appoptics:patching patched fs 
2022-04-25T18:42:43.126Z appoptics:patching patched pg 7.11.0
2022-04-25T18:42:43.153Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.11.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.11.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (112ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (38ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (980ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (231ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (240ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (235ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (119ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (223ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (234ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (226ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (981ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (233ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (244ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (236ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.12.0
updated 1 package and audited 935 packages in 4.473s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:42:54.710Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:42:54.711Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:42:54.711Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:42:54.712Z appoptics:debug using context provider: ace-context
2022-04-25T18:42:54.786Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:42:55.043Z appoptics:patching patched crypto 
2022-04-25T18:42:55.076Z appoptics:patching patched https 
2022-04-25T18:42:55.076Z appoptics:patching patched http 
2022-04-25T18:42:55.103Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:42:55.103Z appoptics:patching patched fs 
2022-04-25T18:42:55.112Z appoptics:patching patched pg 7.12.0
2022-04-25T18:42:55.136Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.12.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.12.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (112ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (39ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (969ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (221ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (231ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (224ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (122ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (230ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (238ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (242ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (978ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (230ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (241ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (223ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.12.1
updated 2 packages and audited 935 packages in 4.848s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:43:06.892Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:43:06.894Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:43:06.894Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:43:06.895Z appoptics:debug using context provider: ace-context
2022-04-25T18:43:06.961Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:43:07.185Z appoptics:patching patched crypto 
2022-04-25T18:43:07.213Z appoptics:patching patched https 
2022-04-25T18:43:07.213Z appoptics:patching patched http 
2022-04-25T18:43:07.251Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:43:07.252Z appoptics:patching patched fs 
2022-04-25T18:43:07.263Z appoptics:patching patched pg 7.12.1
2022-04-25T18:43:07.307Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.12.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.12.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (97ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (983ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (240ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (250ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (228ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (75ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (221ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (229ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (218ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (975ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (225ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (233ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (226ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.13.0
updated 1 package and audited 935 packages in 4.68s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:43:18.760Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:43:18.762Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:43:18.762Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:43:18.762Z appoptics:debug using context provider: ace-context
2022-04-25T18:43:18.820Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:43:19.018Z appoptics:patching patched crypto 
2022-04-25T18:43:19.074Z appoptics:patching patched https 
2022-04-25T18:43:19.074Z appoptics:patching patched http 
2022-04-25T18:43:19.108Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:43:19.109Z appoptics:patching patched fs 
2022-04-25T18:43:19.121Z appoptics:patching patched pg 7.13.0
2022-04-25T18:43:19.166Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.13.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.13.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (155ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (41ms)
        ✓ should trace a basic query using callback (963ms)
        ✓ should trace a basic query using promises (39ms)
        ✓ should trace a prepared statement using a callback (212ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (220ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (215ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (68ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (221ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (227ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (218ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (972ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (221ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (229ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (222ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.14.0
updated 1 package and audited 935 packages in 5.035s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:43:31.246Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:43:31.248Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:43:31.248Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:43:31.249Z appoptics:debug using context provider: ace-context
2022-04-25T18:43:31.327Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:43:31.564Z appoptics:patching patched crypto 
2022-04-25T18:43:31.593Z appoptics:patching patched https 
2022-04-25T18:43:31.593Z appoptics:patching patched http 
2022-04-25T18:43:31.623Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:43:31.625Z appoptics:patching patched fs 
2022-04-25T18:43:31.654Z appoptics:patching patched pg 7.14.0
2022-04-25T18:43:31.688Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.14.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.14.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (133ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (49ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (972ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (222ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (232ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (225ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (51ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (231ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (244ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (238ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (248ms)
        ✓ should trace a basic query using callback (989ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (240ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (249ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (242ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.15.0
updated 1 package and audited 935 packages in 4.761s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:43:43.423Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:43:43.424Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:43:43.424Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:43:43.425Z appoptics:debug using context provider: ace-context
2022-04-25T18:43:43.499Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:43:43.731Z appoptics:patching patched crypto 
2022-04-25T18:43:43.759Z appoptics:patching patched https 
2022-04-25T18:43:43.760Z appoptics:patching patched http 
2022-04-25T18:43:43.788Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:43:43.789Z appoptics:patching patched fs 
2022-04-25T18:43:43.821Z appoptics:patching patched pg 7.15.0
2022-04-25T18:43:43.852Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.15.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.15.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (205ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (43ms)
        ✓ should trace a basic query using callback (961ms)
        ✓ should trace a basic query using promises (40ms)
        ✓ should trace a prepared statement using a callback (212ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (222ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (212ms)
        ✓ should do nothing when disabled using promises (39ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (51ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (40ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (219ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (228ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (231ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (975ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (226ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (228ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.15.1
updated 1 package and audited 935 packages in 4.475s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:43:55.495Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:43:55.497Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:43:55.497Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:43:55.498Z appoptics:debug using context provider: ace-context
2022-04-25T18:43:55.578Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:43:55.834Z appoptics:patching patched crypto 
2022-04-25T18:43:55.862Z appoptics:patching patched https 
2022-04-25T18:43:55.862Z appoptics:patching patched http 
2022-04-25T18:43:55.891Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:43:55.892Z appoptics:patching patched fs 
2022-04-25T18:43:55.921Z appoptics:patching patched pg 7.15.1
2022-04-25T18:43:55.951Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.15.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.15.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (166ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (38ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (969ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (219ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (226ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (219ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (77ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (221ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (229ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (223ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (973ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (224ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (234ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (227ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.15.2
updated 1 package and audited 935 packages in 5.557s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:44:08.743Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:44:08.745Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:44:08.745Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:44:08.747Z appoptics:debug using context provider: ace-context
2022-04-25T18:44:08.869Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:44:09.162Z appoptics:patching patched crypto 
2022-04-25T18:44:09.188Z appoptics:patching patched https 
2022-04-25T18:44:09.188Z appoptics:patching patched http 
2022-04-25T18:44:09.216Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:44:09.216Z appoptics:patching patched fs 
2022-04-25T18:44:09.226Z appoptics:patching patched pg 7.15.2
2022-04-25T18:44:09.252Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.15.2 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.15.2
      ✓ UDP might lose a message
      ✓ should create the pg testing context (114ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (980ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (230ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (239ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (231ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (65ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (220ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (229ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (221ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (973ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (226ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (236ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (230ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.16.0
added 1 package, updated 1 package and audited 936 packages in 4.903s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:44:21.318Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:44:21.319Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:44:21.319Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:44:21.320Z appoptics:debug using context provider: ace-context
2022-04-25T18:44:21.523Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:44:21.976Z appoptics:patching patched crypto 
2022-04-25T18:44:22.025Z appoptics:patching patched https 
2022-04-25T18:44:22.025Z appoptics:patching patched http 
2022-04-25T18:44:22.061Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:44:22.061Z appoptics:patching patched fs 
2022-04-25T18:44:22.076Z appoptics:patching patched pg 7.16.0
2022-04-25T18:44:22.135Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.16.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.16.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (102ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (975ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (226ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (233ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (227ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (74ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (226ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (243ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (229ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (986ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (236ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (244ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (239ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.16.1
updated 1 package and audited 936 packages in 5.292s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:44:34.396Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:44:34.398Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:44:34.398Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:44:34.399Z appoptics:debug using context provider: ace-context
2022-04-25T18:44:34.486Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:44:34.814Z appoptics:patching patched crypto 
2022-04-25T18:44:34.841Z appoptics:patching patched https 
2022-04-25T18:44:34.841Z appoptics:patching patched http 
2022-04-25T18:44:34.869Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:44:34.870Z appoptics:patching patched fs 
2022-04-25T18:44:34.880Z appoptics:patching patched pg 7.16.1
2022-04-25T18:44:34.908Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.16.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.16.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (114ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (968ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (220ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (227ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (219ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (55ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (227ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (237ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (227ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (978ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (231ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (240ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (232ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.17.0
updated 1 package and audited 936 packages in 5.066s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:44:46.978Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:44:46.980Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:44:46.980Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:44:46.981Z appoptics:debug using context provider: ace-context
2022-04-25T18:44:47.087Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:44:47.439Z appoptics:patching patched crypto 
2022-04-25T18:44:47.465Z appoptics:patching patched https 
2022-04-25T18:44:47.465Z appoptics:patching patched http 
2022-04-25T18:44:47.491Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:44:47.491Z appoptics:patching patched fs 
2022-04-25T18:44:47.504Z appoptics:patching patched pg 7.17.0
2022-04-25T18:44:47.529Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.17.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.17.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (121ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (975ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (225ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (234ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (227ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (58ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (229ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (236ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (227ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (982ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (233ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (242ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (233ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.17.1
updated 1 package and audited 936 packages in 5.36s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:44:59.897Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:44:59.899Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:44:59.899Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:44:59.900Z appoptics:debug using context provider: ace-context
2022-04-25T18:44:59.959Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:45:00.130Z appoptics:patching patched crypto 
2022-04-25T18:45:00.162Z appoptics:patching patched https 
2022-04-25T18:45:00.162Z appoptics:patching patched http 
2022-04-25T18:45:00.204Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:45:00.205Z appoptics:patching patched fs 
2022-04-25T18:45:00.215Z appoptics:patching patched pg 7.17.1
2022-04-25T18:45:00.241Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.17.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.17.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (119ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (977ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (228ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (237ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (232ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (53ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (228ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (218ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (978ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (228ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (234ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (224ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.18.0
updated 1 package and audited 936 packages in 5.824s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:45:13.052Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:45:13.053Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:45:13.053Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:45:13.054Z appoptics:debug using context provider: ace-context
2022-04-25T18:45:13.116Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:45:13.297Z appoptics:patching patched crypto 
2022-04-25T18:45:13.326Z appoptics:patching patched https 
2022-04-25T18:45:13.327Z appoptics:patching patched http 
2022-04-25T18:45:13.359Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:45:13.359Z appoptics:patching patched fs 
2022-04-25T18:45:13.370Z appoptics:patching patched pg 7.18.0
2022-04-25T18:45:13.404Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.18.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.18.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (106ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (39ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (972ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (223ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (233ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (226ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (63ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (38ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (230ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (250ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (242ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (993ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (243ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (251ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (243ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.18.1
updated 1 package and audited 936 packages in 5.095s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:45:25.463Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:45:25.464Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:45:25.464Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:45:25.465Z appoptics:debug using context provider: ace-context
2022-04-25T18:45:25.521Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:45:25.698Z appoptics:patching patched crypto 
2022-04-25T18:45:25.725Z appoptics:patching patched https 
2022-04-25T18:45:25.726Z appoptics:patching patched http 
2022-04-25T18:45:25.754Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:45:25.754Z appoptics:patching patched fs 
2022-04-25T18:45:25.765Z appoptics:patching patched pg 7.18.1
2022-04-25T18:45:25.797Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.18.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.18.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (109ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (40ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (971ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (222ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (230ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (230ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (55ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (229ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (237ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (228ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (983ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (233ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (243ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (235ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.18.2
updated 1 package and audited 936 packages in 5.055s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:45:37.913Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:45:37.916Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:45:37.916Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:45:37.917Z appoptics:debug using context provider: ace-context
2022-04-25T18:45:37.991Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:45:38.200Z appoptics:patching patched crypto 
2022-04-25T18:45:38.237Z appoptics:patching patched https 
2022-04-25T18:45:38.237Z appoptics:patching patched http 
2022-04-25T18:45:38.262Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:45:38.263Z appoptics:patching patched fs 
2022-04-25T18:45:38.273Z appoptics:patching patched pg 7.18.2
2022-04-25T18:45:38.298Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.18.2 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.18.2
      ✓ UDP might lose a message
      ✓ should create the pg testing context (122ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (971ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (221ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (230ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (218ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (67ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (227ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (225ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (979ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (229ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (239ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (231ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.0.0
updated 2 packages and audited 936 packages in 5.706s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:45:50.946Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:45:50.948Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:45:50.948Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:45:50.949Z appoptics:debug using context provider: ace-context
2022-04-25T18:45:51.009Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:45:51.201Z appoptics:patching patched crypto 
2022-04-25T18:45:51.227Z appoptics:patching patched https 
2022-04-25T18:45:51.227Z appoptics:patching patched http 
2022-04-25T18:45:51.254Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:45:51.254Z appoptics:patching patched fs 
2022-04-25T18:45:51.263Z appoptics:patching patched pg 8.0.0
2022-04-25T18:45:51.300Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.0.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (107ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (38ms)
        ✓ should trace a basic query using callback (966ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (218ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (227ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (222ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (52ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (230ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (238ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (229ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (985ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (236ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (242ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (237ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.0.1
added 1 package, removed 1 package, updated 1 package and audited 936 packages in 5.94s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:46:04.046Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:46:04.047Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:46:04.047Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:46:04.048Z appoptics:debug using context provider: ace-context
2022-04-25T18:46:04.102Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:46:04.295Z appoptics:patching patched crypto 
2022-04-25T18:46:04.327Z appoptics:patching patched https 
2022-04-25T18:46:04.328Z appoptics:patching patched http 
2022-04-25T18:46:04.358Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:46:04.358Z appoptics:patching patched fs 
2022-04-25T18:46:04.368Z appoptics:patching patched pg 8.0.1
2022-04-25T18:46:04.400Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.0.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.0.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (106ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (971ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (221ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (230ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (224ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (54ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (225ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (234ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (223ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (977ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (228ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (237ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (229ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.0.2
updated 1 package and audited 936 packages in 5.353s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:46:16.567Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:46:16.569Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:46:16.569Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:46:16.570Z appoptics:debug using context provider: ace-context
2022-04-25T18:46:16.628Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:46:16.827Z appoptics:patching patched crypto 
2022-04-25T18:46:16.860Z appoptics:patching patched https 
2022-04-25T18:46:16.860Z appoptics:patching patched http 
2022-04-25T18:46:16.889Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:46:16.889Z appoptics:patching patched fs 
2022-04-25T18:46:16.899Z appoptics:patching patched pg 8.0.2
2022-04-25T18:46:16.934Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.0.2 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.0.2
      ✓ UDP might lose a message
      ✓ should create the pg testing context (111ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (974ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (226ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (230ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (55ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (227ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (216ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (979ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (230ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (240ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (232ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.0.3
updated 1 package and audited 936 packages in 5.304s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:46:29.182Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:46:29.184Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:46:29.184Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:46:29.184Z appoptics:debug using context provider: ace-context
2022-04-25T18:46:29.249Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:46:29.456Z appoptics:patching patched crypto 
2022-04-25T18:46:29.486Z appoptics:patching patched https 
2022-04-25T18:46:29.487Z appoptics:patching patched http 
2022-04-25T18:46:29.522Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:46:29.522Z appoptics:patching patched fs 
2022-04-25T18:46:29.535Z appoptics:patching patched pg 8.0.3
2022-04-25T18:46:29.572Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.0.3 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.0.3
      ✓ UDP might lose a message
      ✓ should create the pg testing context (120ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (41ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (978ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (227ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (237ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (231ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (68ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (230ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (242ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (232ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (988ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (238ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (247ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (239ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.1.0
updated 2 packages and audited 936 packages in 5.314s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:46:41.790Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:46:41.792Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:46:41.792Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:46:41.792Z appoptics:debug using context provider: ace-context
2022-04-25T18:46:41.855Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:46:42.036Z appoptics:patching patched crypto 
2022-04-25T18:46:42.064Z appoptics:patching patched https 
2022-04-25T18:46:42.064Z appoptics:patching patched http 
2022-04-25T18:46:42.091Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:46:42.091Z appoptics:patching patched fs 
2022-04-25T18:46:42.105Z appoptics:patching patched pg 8.1.0
2022-04-25T18:46:42.134Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.1.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.1.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (109ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (974ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (224ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (233ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (228ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (53ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (227ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (227ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (981ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (232ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (239ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (232ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.2.0
updated 1 package and audited 936 packages in 5.185s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:46:54.284Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:46:54.286Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:46:54.286Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:46:54.287Z appoptics:debug using context provider: ace-context
2022-04-25T18:46:54.345Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:46:54.525Z appoptics:patching patched crypto 
2022-04-25T18:46:54.551Z appoptics:patching patched https 
2022-04-25T18:46:54.551Z appoptics:patching patched http 
2022-04-25T18:46:54.577Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:46:54.578Z appoptics:patching patched fs 
2022-04-25T18:46:54.589Z appoptics:patching patched pg 8.2.0
2022-04-25T18:46:54.616Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.2.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.2.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (103ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (976ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (226ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (233ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (227ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (51ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (227ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (236ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (225ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (251ms)
        ✓ should trace a basic query using callback (978ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (229ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (243ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (239ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.2.1
updated 1 package and audited 936 packages in 5.518s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:47:06.947Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:47:06.949Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:47:06.949Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:47:06.950Z appoptics:debug using context provider: ace-context
2022-04-25T18:47:07.007Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:47:07.195Z appoptics:patching patched crypto 
2022-04-25T18:47:07.220Z appoptics:patching patched https 
2022-04-25T18:47:07.221Z appoptics:patching patched http 
2022-04-25T18:47:07.248Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:47:07.248Z appoptics:patching patched fs 
2022-04-25T18:47:07.260Z appoptics:patching patched pg 8.2.1
2022-04-25T18:47:07.287Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.2.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.2.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (104ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (971ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (223ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (231ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (224ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (63ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (229ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (240ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (227ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (981ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (232ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (240ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (236ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.2.2
updated 1 package and audited 936 packages in 5.639s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:47:19.822Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:47:19.823Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:47:19.823Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:47:19.824Z appoptics:debug using context provider: ace-context
2022-04-25T18:47:19.882Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:47:20.071Z appoptics:patching patched crypto 
2022-04-25T18:47:20.103Z appoptics:patching patched https 
2022-04-25T18:47:20.103Z appoptics:patching patched http 
2022-04-25T18:47:20.137Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:47:20.138Z appoptics:patching patched fs 
2022-04-25T18:47:20.152Z appoptics:patching patched pg 8.2.2
2022-04-25T18:47:20.190Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.2.2 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.2.2
      ✓ UDP might lose a message
      ✓ should create the pg testing context (106ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (980ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (231ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (241ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (232ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (67ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises (44ms)
        ✓ should trace a prepared statement using a callback (207ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (216ms)
        ✓ should truncate long queries using promises (39ms)
        ✓ should do nothing when disabled using a callback (207ms)
        ✓ should do nothing when disabled using promises (40ms)
      using pool with backed up queue
        ✓ should exhaust the pool (251ms)
        ✓ should trace a basic query using callback (961ms)
        ✓ should trace a basic query using promises (40ms)
        ✓ should trace a prepared statement using a callback (211ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (221ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (215ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.3.0
updated 1 package and audited 936 packages in 5.314s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:47:32.346Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:47:32.347Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:47:32.347Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:47:32.348Z appoptics:debug using context provider: ace-context
2022-04-25T18:47:32.409Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:47:32.583Z appoptics:patching patched crypto 
2022-04-25T18:47:32.609Z appoptics:patching patched https 
2022-04-25T18:47:32.609Z appoptics:patching patched http 
2022-04-25T18:47:32.637Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:47:32.639Z appoptics:patching patched fs 
2022-04-25T18:47:32.652Z appoptics:patching patched pg 8.3.0
2022-04-25T18:47:32.677Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.3.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.3.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (107ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (974ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (225ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (237ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (232ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (55ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (229ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (238ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (229ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (984ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (236ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (244ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (238ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.3.2
updated 1 package and audited 936 packages in 5.221s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:47:44.695Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:47:44.696Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:47:44.697Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:47:44.697Z appoptics:debug using context provider: ace-context
2022-04-25T18:47:44.755Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:47:44.973Z appoptics:patching patched crypto 
2022-04-25T18:47:45.017Z appoptics:patching patched https 
2022-04-25T18:47:45.017Z appoptics:patching patched http 
2022-04-25T18:47:45.052Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:47:45.052Z appoptics:patching patched fs 
2022-04-25T18:47:45.067Z appoptics:patching patched pg 8.3.2
2022-04-25T18:47:45.101Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.3.2 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.3.2
      ✓ UDP might lose a message
      ✓ should create the pg testing context (100ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (983ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (234ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (246ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (239ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (62ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (222ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (230ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (220ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (974ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (226ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (236ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (231ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.3.3
updated 1 package and audited 936 packages in 4.999s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:47:56.865Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:47:56.866Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:47:56.867Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:47:56.867Z appoptics:debug using context provider: ace-context
2022-04-25T18:47:56.925Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:47:57.111Z appoptics:patching patched crypto 
2022-04-25T18:47:57.135Z appoptics:patching patched https 
2022-04-25T18:47:57.135Z appoptics:patching patched http 
2022-04-25T18:47:57.162Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:47:57.162Z appoptics:patching patched fs 
2022-04-25T18:47:57.175Z appoptics:patching patched pg 8.3.3
2022-04-25T18:47:57.203Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.3.3 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.3.3
      ✓ UDP might lose a message
      ✓ should create the pg testing context (114ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (39ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (41ms)
        ✓ should trace a basic query using callback (964ms)
        ✓ should trace a basic query using promises (38ms)
        ✓ should trace a prepared statement using a callback (214ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (223ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (218ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (56ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (228ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (238ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (226ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (979ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (229ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (238ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (232ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.4.0
removed 1 package, updated 1 package and audited 935 packages in 5.359s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:48:09.430Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:48:09.432Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:48:09.432Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:48:09.432Z appoptics:debug using context provider: ace-context
2022-04-25T18:48:09.499Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:48:09.678Z appoptics:patching patched crypto 
2022-04-25T18:48:09.705Z appoptics:patching patched https 
2022-04-25T18:48:09.706Z appoptics:patching patched http 
2022-04-25T18:48:09.737Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:48:09.737Z appoptics:patching patched fs 
2022-04-25T18:48:09.750Z appoptics:patching patched pg 8.4.0
2022-04-25T18:48:09.784Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.4.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.4.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (131ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (62ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (44ms)
        ✓ should trace a basic query using callback (960ms)
        ✓ should trace a basic query using promises (41ms)
        ✓ should trace a prepared statement using a callback (211ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (222ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (214ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (64ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (231ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (248ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (241ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (995ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (247ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (252ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (245ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.4.1
updated 1 package and audited 935 packages in 5.108s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:48:21.932Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:48:21.933Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:48:21.933Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:48:21.934Z appoptics:debug using context provider: ace-context
2022-04-25T18:48:21.992Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:48:22.217Z appoptics:patching patched crypto 
2022-04-25T18:48:22.269Z appoptics:patching patched https 
2022-04-25T18:48:22.269Z appoptics:patching patched http 
2022-04-25T18:48:22.300Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:48:22.300Z appoptics:patching patched fs 
2022-04-25T18:48:22.314Z appoptics:patching patched pg 8.4.1
2022-04-25T18:48:22.347Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.4.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.4.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (118ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (39ms)
        ✓ should trace a basic query using callback (966ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (214ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (223ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (216ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (60ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (229ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (241ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (235ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (990ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (240ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (247ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (243ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.4.2
updated 1 package and audited 935 packages in 5.664s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:48:34.775Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:48:34.777Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:48:34.777Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:48:34.778Z appoptics:debug using context provider: ace-context
2022-04-25T18:48:34.835Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:48:35.017Z appoptics:patching patched crypto 
2022-04-25T18:48:35.047Z appoptics:patching patched https 
2022-04-25T18:48:35.048Z appoptics:patching patched http 
2022-04-25T18:48:35.074Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:48:35.074Z appoptics:patching patched fs 
2022-04-25T18:48:35.089Z appoptics:patching patched pg 8.4.2
2022-04-25T18:48:35.121Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.4.2 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.4.2
      ✓ UDP might lose a message
      ✓ should create the pg testing context (106ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (971ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (221ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (229ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (223ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (61ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (231ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (238ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (230ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (984ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (234ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (244ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (238ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.5.0
updated 1 package and audited 935 packages in 5.888s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:48:47.806Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:48:47.807Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:48:47.807Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:48:47.808Z appoptics:debug using context provider: ace-context
2022-04-25T18:48:47.866Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:48:48.064Z appoptics:patching patched crypto 
2022-04-25T18:48:48.096Z appoptics:patching patched https 
2022-04-25T18:48:48.096Z appoptics:patching patched http 
2022-04-25T18:48:48.128Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:48:48.128Z appoptics:patching patched fs 
2022-04-25T18:48:48.142Z appoptics:patching patched pg 8.5.0
2022-04-25T18:48:48.173Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.5.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.5.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (103ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (980ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (231ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (241ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (232ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (63ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (228ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (244ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (235ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (990ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (241ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (249ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (245ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.5.1
updated 1 package and audited 935 packages in 5.547s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:49:00.558Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:49:00.560Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:49:00.560Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:49:00.561Z appoptics:debug using context provider: ace-context
2022-04-25T18:49:00.619Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:49:00.831Z appoptics:patching patched crypto 
2022-04-25T18:49:00.858Z appoptics:patching patched https 
2022-04-25T18:49:00.858Z appoptics:patching patched http 
2022-04-25T18:49:00.898Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:49:00.898Z appoptics:patching patched fs 
2022-04-25T18:49:00.912Z appoptics:patching patched pg 8.5.1
2022-04-25T18:49:00.936Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.5.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.5.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (113ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (972ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (222ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (237ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (224ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (69ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (226ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (236ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (218ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (970ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (220ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (227ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (222ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.6.0
updated 1 package and audited 935 packages in 5.246s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:49:13.056Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:49:13.057Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:49:13.057Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:49:13.058Z appoptics:debug using context provider: ace-context
2022-04-25T18:49:13.116Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:49:13.291Z appoptics:patching patched crypto 
2022-04-25T18:49:13.319Z appoptics:patching patched https 
2022-04-25T18:49:13.319Z appoptics:patching patched http 
2022-04-25T18:49:13.348Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:49:13.348Z appoptics:patching patched fs 
2022-04-25T18:49:13.362Z appoptics:patching patched pg 8.6.0
2022-04-25T18:49:13.387Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.6.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.6.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (160ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (969ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (220ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (244ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (222ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (95ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (44ms)
        ✓ should trace a basic query using promises (57ms)
        ✓ should trace a prepared statement using a callback (187ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (50ms)
        ✓ should truncate long queries using a callback (204ms)
        ✓ should truncate long queries using promises (51ms)
        ✓ should do nothing when disabled using a callback (196ms)
        ✓ should do nothing when disabled using promises (51ms)
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (952ms)
        ✓ should trace a basic query using promises (49ms)
        ✓ should trace a prepared statement using a callback (203ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (44ms)
        ✓ should truncate long queries using a callback (210ms)
        ✓ should truncate long queries using promises (44ms)
        ✓ should do nothing when disabled using a callback (204ms)
        ✓ should do nothing when disabled using promises (46ms)


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.7.0
updated 1 package and audited 935 packages in 5.501s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:49:25.810Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:49:25.812Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:49:25.812Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:49:25.812Z appoptics:debug using context provider: ace-context
2022-04-25T18:49:25.868Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:49:26.046Z appoptics:patching patched crypto 
2022-04-25T18:49:26.074Z appoptics:patching patched https 
2022-04-25T18:49:26.074Z appoptics:patching patched http 
2022-04-25T18:49:26.102Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:49:26.102Z appoptics:patching patched fs 
2022-04-25T18:49:26.114Z appoptics:patching patched pg 8.7.0
2022-04-25T18:49:26.147Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.7.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.7.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (139ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (40ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (60ms)
        ✓ should trace a basic query using callback (944ms)
        ✓ should trace a basic query using promises (57ms)
        ✓ should trace a prepared statement using a callback (197ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (48ms)
        ✓ should truncate long queries using a callback (206ms)
        ✓ should truncate long queries using promises (48ms)
        ✓ should do nothing when disabled using a callback (200ms)
        ✓ should do nothing when disabled using promises (50ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (66ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises (43ms)
        ✓ should trace a prepared statement using a callback (209ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (218ms)
        ✓ should truncate long queries using promises (38ms)
        ✓ should do nothing when disabled using a callback (210ms)
        ✓ should do nothing when disabled using promises (39ms)
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (964ms)
        ✓ should trace a basic query using promises (40ms)
        ✓ should trace a prepared statement using a callback (212ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (221ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (213ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.7.1
updated 1 package and audited 935 packages in 5.54s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:49:38.552Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:49:38.553Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:49:38.553Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:49:38.554Z appoptics:debug using context provider: ace-context
2022-04-25T18:49:38.611Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:49:38.805Z appoptics:patching patched crypto 
2022-04-25T18:49:38.830Z appoptics:patching patched https 
2022-04-25T18:49:38.830Z appoptics:patching patched http 
2022-04-25T18:49:38.856Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:49:38.857Z appoptics:patching patched fs 
2022-04-25T18:49:38.870Z appoptics:patching patched pg 8.7.1
2022-04-25T18:49:38.894Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.7.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.7.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (118ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (45ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (977ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (228ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (236ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (226ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (69ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (48ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (218ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (225ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (216ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (974ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (225ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (230ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.7.3
updated 1 package and audited 935 packages in 5.487s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:49:51.271Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:49:51.272Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:49:51.272Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:49:51.273Z appoptics:debug using context provider: ace-context
2022-04-25T18:49:51.332Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:49:51.559Z appoptics:patching patched crypto 
2022-04-25T18:49:51.600Z appoptics:patching patched https 
2022-04-25T18:49:51.601Z appoptics:patching patched http 
2022-04-25T18:49:51.635Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:49:51.636Z appoptics:patching patched fs 
2022-04-25T18:49:51.647Z appoptics:patching patched pg 8.7.3
2022-04-25T18:49:51.673Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.7.3 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.7.3
      ✓ UDP might lose a message
      ✓ should create the pg testing context (130ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (970ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (219ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (230ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (222ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (75ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (47ms)
        ✓ should trace a basic query using promises (65ms)
        ✓ should trace a prepared statement using a callback (187ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (57ms)
        ✓ should truncate long queries using a callback (196ms)
        ✓ should truncate long queries using promises (60ms)
        ✓ should do nothing when disabled using a callback (186ms)
        ✓ should do nothing when disabled using promises (60ms)
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (940ms)
        ✓ should trace a basic query using promises (61ms)
        ✓ should trace a prepared statement using a callback (192ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (53ms)
        ✓ should truncate long queries using a callback (202ms)
        ✓ should truncate long queries using promises (50ms)
        ✓ should do nothing when disabled using a callback (197ms)
        ✓ should do nothing when disabled using promises (53ms)


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.7.3
updated 1 package and audited 935 packages in 5.69s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
