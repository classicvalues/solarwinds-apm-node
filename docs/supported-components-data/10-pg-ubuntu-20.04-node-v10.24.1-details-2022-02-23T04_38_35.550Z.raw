npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@4.5.5
added 4 packages from 7 contributors, removed 3 packages, updated 7 packages and audited 914 packages in 6.49s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:38:43.876Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:38:43.878Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:38:43.878Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:38:43.878Z appoptics:debug using context provider: ace-context
2022-02-23T04:38:43.951Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:38:44.245Z appoptics:patching patched crypto 
2022-02-23T04:38:44.285Z appoptics:patching patched https 
2022-02-23T04:38:44.285Z appoptics:patching patched http 
2022-02-23T04:38:44.311Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:38:44.312Z appoptics:patching patched fs 
2022-02-23T04:38:44.334Z appoptics:patching probes.generic-pool "acquire()" not found
2022-02-23T04:38:44.334Z appoptics:patching patched generic-pool 2.1.1
2022-02-23T04:38:44.335Z appoptics:patching patched pg 4.5.5
2022-02-23T04:38:44.376Z appoptics:debug starting runtimeMetrics


  probes.pg 4.5.5
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (33ms)
  1 failing

  1) probes.pg 4.5.5
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:426:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:345:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:105:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@4.5.6
updated 2 packages and audited 914 packages in 6.305s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:38:52.121Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:38:52.123Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:38:52.124Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:38:52.125Z appoptics:debug using context provider: ace-context
2022-02-23T04:38:52.193Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:38:52.397Z appoptics:patching patched crypto 
2022-02-23T04:38:52.428Z appoptics:patching patched https 
2022-02-23T04:38:52.428Z appoptics:patching patched http 
2022-02-23T04:38:52.468Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:38:52.468Z appoptics:patching patched fs 
2022-02-23T04:38:52.507Z appoptics:patching patched generic-pool 2.4.2
2022-02-23T04:38:52.509Z appoptics:patching patched pg 4.5.6
2022-02-23T04:38:52.539Z appoptics:debug starting runtimeMetrics


  probes.pg 4.5.6
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (34ms)
  1 failing

  1) probes.pg 4.5.6
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:426:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:345:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:105:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@4.5.7
added 1 package from 2 contributors, updated 1 package and audited 915 packages in 5.558s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:38:59.603Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:38:59.605Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:38:59.605Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:38:59.606Z appoptics:debug using context provider: ace-context
2022-02-23T04:38:59.674Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:38:59.900Z appoptics:patching patched crypto 
2022-02-23T04:38:59.941Z appoptics:patching patched https 
2022-02-23T04:38:59.942Z appoptics:patching patched http 
2022-02-23T04:38:59.971Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:38:59.972Z appoptics:patching patched fs 
2022-02-23T04:38:59.995Z appoptics:patching patched generic-pool 2.4.2
2022-02-23T04:38:59.997Z appoptics:patching patched pg 4.5.7
2022-02-23T04:39:00.049Z appoptics:debug starting runtimeMetrics


  probes.pg 4.5.7
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (39ms)
  1 failing

  1) probes.pg 4.5.7
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:426:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:345:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:105:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@5.0.0
removed 1 package, updated 3 packages and audited 914 packages in 6.473s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:39:08.188Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:39:08.190Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:39:08.190Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:39:08.191Z appoptics:debug using context provider: ace-context
2022-02-23T04:39:08.277Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:39:08.549Z appoptics:patching patched crypto 
2022-02-23T04:39:08.580Z appoptics:patching patched https 
2022-02-23T04:39:08.580Z appoptics:patching patched http 
2022-02-23T04:39:08.607Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:39:08.607Z appoptics:patching patched fs 
2022-02-23T04:39:08.650Z appoptics:patching patched generic-pool 2.4.2
2022-02-23T04:39:08.651Z appoptics:patching patched pg 5.0.0
2022-02-23T04:39:08.679Z appoptics:debug starting runtimeMetrics


  probes.pg 5.0.0
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (31ms)
  1 failing

  1) probes.pg 5.0.0
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:426:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:345:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:105:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@5.1.0
updated 2 packages and audited 914 packages in 5.546s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:39:15.909Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:39:15.911Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:39:15.911Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:39:15.912Z appoptics:debug using context provider: ace-context
2022-02-23T04:39:15.995Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:39:16.279Z appoptics:patching patched crypto 
2022-02-23T04:39:16.317Z appoptics:patching patched https 
2022-02-23T04:39:16.317Z appoptics:patching patched http 
2022-02-23T04:39:16.348Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:39:16.349Z appoptics:patching patched fs 
2022-02-23T04:39:16.397Z appoptics:patching patched generic-pool 2.4.2
2022-02-23T04:39:16.398Z appoptics:patching patched pg 5.1.0
2022-02-23T04:39:16.437Z appoptics:debug starting runtimeMetrics


  probes.pg 5.1.0
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (49ms)
  1 failing

  1) probes.pg 5.1.0
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:426:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:345:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:105:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@5.2.1
added 4 packages from 16 contributors, removed 1 package, updated 1 package and audited 917 packages in 5.831s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:39:23.869Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:39:23.871Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:39:23.871Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:39:23.872Z appoptics:debug using context provider: ace-context
2022-02-23T04:39:23.936Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:39:24.209Z appoptics:patching patched crypto 
2022-02-23T04:39:24.246Z appoptics:patching patched https 
2022-02-23T04:39:24.248Z appoptics:patching patched http 
2022-02-23T04:39:24.275Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:39:24.275Z appoptics:patching patched fs 
2022-02-23T04:39:24.296Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:39:24.299Z appoptics:patching patched pg 5.2.1
2022-02-23T04:39:24.335Z appoptics:debug starting runtimeMetrics


  probes.pg 5.2.1
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (32ms)
  1 failing

  1) probes.pg 5.2.1
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:426:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:345:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:105:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.0.0
removed 1 package, updated 1 package and audited 916 packages in 5.932s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:39:31.771Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:39:31.774Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:39:31.774Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:39:31.775Z appoptics:debug using context provider: ace-context
2022-02-23T04:39:31.843Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:39:32.064Z appoptics:patching patched crypto 
2022-02-23T04:39:32.098Z appoptics:patching patched https 
2022-02-23T04:39:32.098Z appoptics:patching patched http 
2022-02-23T04:39:32.129Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:39:32.129Z appoptics:patching patched fs 
2022-02-23T04:39:32.150Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:39:32.152Z appoptics:patching patched pg 6.0.0
2022-02-23T04:39:32.192Z appoptics:debug starting runtimeMetrics


  probes.pg 6.0.0
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (20ms)
  1 failing

  1) probes.pg 6.0.0
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:430:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:349:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:109:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.0.1
updated 1 package and audited 916 packages in 5.371s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:39:38.926Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:39:38.928Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:39:38.928Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:39:38.929Z appoptics:debug using context provider: ace-context
2022-02-23T04:39:38.987Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:39:39.204Z appoptics:patching patched crypto 
2022-02-23T04:39:39.236Z appoptics:patching patched https 
2022-02-23T04:39:39.236Z appoptics:patching patched http 
2022-02-23T04:39:39.260Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:39:39.261Z appoptics:patching patched fs 
2022-02-23T04:39:39.284Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:39:39.286Z appoptics:patching patched pg 6.0.1
2022-02-23T04:39:39.318Z appoptics:debug starting runtimeMetrics


  probes.pg 6.0.1
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (36ms)
  1 failing

  1) probes.pg 6.0.1
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:430:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:349:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:109:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.0.2
updated 1 package and audited 916 packages in 6.595s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:39:47.435Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:39:47.437Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:39:47.437Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:39:47.438Z appoptics:debug using context provider: ace-context
2022-02-23T04:39:47.505Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:39:47.733Z appoptics:patching patched crypto 
2022-02-23T04:39:47.763Z appoptics:patching patched https 
2022-02-23T04:39:47.764Z appoptics:patching patched http 
2022-02-23T04:39:47.789Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:39:47.789Z appoptics:patching patched fs 
2022-02-23T04:39:47.810Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:39:47.812Z appoptics:patching patched pg 6.0.2
2022-02-23T04:39:47.842Z appoptics:debug starting runtimeMetrics


  probes.pg 6.0.2
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (29ms)
  1 failing

  1) probes.pg 6.0.2
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:438:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:357:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:117:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.0.3
updated 1 package and audited 916 packages in 5.791s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:39:55.247Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:39:55.249Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:39:55.249Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:39:55.250Z appoptics:debug using context provider: ace-context
2022-02-23T04:39:55.337Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:39:55.732Z appoptics:patching patched crypto 
2022-02-23T04:39:55.777Z appoptics:patching patched https 
2022-02-23T04:39:55.777Z appoptics:patching patched http 
2022-02-23T04:39:55.807Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:39:55.807Z appoptics:patching patched fs 
2022-02-23T04:39:55.836Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:39:55.839Z appoptics:patching patched pg 6.0.3
2022-02-23T04:39:55.876Z appoptics:debug starting runtimeMetrics


  probes.pg 6.0.3
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (27ms)
  1 failing

  1) probes.pg 6.0.3
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:438:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:357:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:117:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.0.4
added 1 package from 1 contributor, removed 2 packages, updated 2 packages and audited 915 packages in 5.14s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:40:02.701Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:40:02.703Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:40:02.703Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:40:02.704Z appoptics:debug using context provider: ace-context
2022-02-23T04:40:02.764Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:40:02.975Z appoptics:patching patched crypto 
2022-02-23T04:40:03.012Z appoptics:patching patched https 
2022-02-23T04:40:03.012Z appoptics:patching patched http 
2022-02-23T04:40:03.051Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:40:03.051Z appoptics:patching patched fs 
2022-02-23T04:40:03.073Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:40:03.076Z appoptics:patching patched pg 6.0.4
2022-02-23T04:40:03.113Z appoptics:debug starting runtimeMetrics


  probes.pg 6.0.4
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (20ms)
  1 failing

  1) probes.pg 6.0.4
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:438:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:357:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:117:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.0.5
added 1 package from 2 contributors, updated 1 package and audited 916 packages in 5.935s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:40:10.532Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:40:10.534Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:40:10.534Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:40:10.535Z appoptics:debug using context provider: ace-context
2022-02-23T04:40:10.596Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:40:10.811Z appoptics:patching patched crypto 
2022-02-23T04:40:10.839Z appoptics:patching patched https 
2022-02-23T04:40:10.840Z appoptics:patching patched http 
2022-02-23T04:40:10.863Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:40:10.863Z appoptics:patching patched fs 
2022-02-23T04:40:10.883Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:40:10.885Z appoptics:patching patched pg 6.0.5
2022-02-23T04:40:10.920Z appoptics:debug starting runtimeMetrics


  probes.pg 6.0.5
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (33ms)
  1 failing

  1) probes.pg 6.0.5
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:438:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:357:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:117:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.1.0
removed 1 package, updated 1 package and audited 915 packages in 5.413s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:40:17.915Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:40:17.918Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:40:17.918Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:40:17.919Z appoptics:debug using context provider: ace-context
2022-02-23T04:40:17.985Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:40:18.216Z appoptics:patching patched crypto 
2022-02-23T04:40:18.246Z appoptics:patching patched https 
2022-02-23T04:40:18.246Z appoptics:patching patched http 
2022-02-23T04:40:18.269Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:40:18.270Z appoptics:patching patched fs 
2022-02-23T04:40:18.291Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:40:18.293Z appoptics:patching patched pg 6.1.0
2022-02-23T04:40:18.321Z appoptics:debug starting runtimeMetrics


  probes.pg 6.1.0
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (31ms)
  1 failing

  1) probes.pg 6.1.0
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:441:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:360:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:117:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.1.1
updated 1 package and audited 915 packages in 6.286s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:40:26.062Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:40:26.064Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:40:26.064Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:40:26.065Z appoptics:debug using context provider: ace-context
2022-02-23T04:40:26.139Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:40:26.406Z appoptics:patching patched crypto 
2022-02-23T04:40:26.446Z appoptics:patching patched https 
2022-02-23T04:40:26.446Z appoptics:patching patched http 
2022-02-23T04:40:26.472Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:40:26.472Z appoptics:patching patched fs 
2022-02-23T04:40:26.491Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:40:26.493Z appoptics:patching patched pg 6.1.1
2022-02-23T04:40:26.522Z appoptics:debug starting runtimeMetrics


  probes.pg 6.1.1
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (31ms)
  1 failing

  1) probes.pg 6.1.1
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:441:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:360:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:117:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.1.2
updated 1 package and audited 915 packages in 5.215s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:40:33.702Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:40:33.704Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:40:33.704Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:40:33.705Z appoptics:debug using context provider: ace-context
2022-02-23T04:40:33.799Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:40:34.118Z appoptics:patching patched crypto 
2022-02-23T04:40:34.180Z appoptics:patching patched https 
2022-02-23T04:40:34.180Z appoptics:patching patched http 
2022-02-23T04:40:34.234Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:40:34.234Z appoptics:patching patched fs 
2022-02-23T04:40:34.303Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:40:34.307Z appoptics:patching patched pg 6.1.2
2022-02-23T04:40:34.375Z appoptics:debug starting runtimeMetrics


  probes.pg 6.1.2
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (49ms)
  1 failing

  1) probes.pg 6.1.2
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:441:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:360:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:117:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.1.3
updated 1 package and audited 915 packages in 5.197s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:40:41.130Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:40:41.132Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:40:41.132Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:40:41.133Z appoptics:debug using context provider: ace-context
2022-02-23T04:40:41.195Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:40:41.423Z appoptics:patching patched crypto 
2022-02-23T04:40:41.454Z appoptics:patching patched https 
2022-02-23T04:40:41.454Z appoptics:patching patched http 
2022-02-23T04:40:41.480Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:40:41.481Z appoptics:patching patched fs 
2022-02-23T04:40:41.500Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:40:41.502Z appoptics:patching patched pg 6.1.3
2022-02-23T04:40:41.541Z appoptics:debug starting runtimeMetrics


  probes.pg 6.1.3
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (32ms)
  1 failing

  1) probes.pg 6.1.3
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:456:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:375:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:132:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.1.4
updated 1 package and audited 915 packages in 6.066s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:40:49.087Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:40:49.089Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:40:49.089Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:40:49.091Z appoptics:debug using context provider: ace-context
2022-02-23T04:40:49.161Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:40:49.432Z appoptics:patching patched crypto 
2022-02-23T04:40:49.486Z appoptics:patching patched https 
2022-02-23T04:40:49.487Z appoptics:patching patched http 
2022-02-23T04:40:49.520Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:40:49.521Z appoptics:patching patched fs 
2022-02-23T04:40:49.548Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:40:49.554Z appoptics:patching patched pg 6.1.4
2022-02-23T04:40:49.614Z appoptics:debug starting runtimeMetrics


  probes.pg 6.1.4
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (30ms)
  1 failing

  1) probes.pg 6.1.4
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:456:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:375:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:132:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.1.5
updated 1 package and audited 915 packages in 5.218s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:40:56.290Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:40:56.291Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:40:56.291Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:40:56.292Z appoptics:debug using context provider: ace-context
2022-02-23T04:40:56.354Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:40:56.591Z appoptics:patching patched crypto 
2022-02-23T04:40:56.625Z appoptics:patching patched https 
2022-02-23T04:40:56.625Z appoptics:patching patched http 
2022-02-23T04:40:56.650Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:40:56.650Z appoptics:patching patched fs 
2022-02-23T04:40:56.672Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:40:56.674Z appoptics:patching patched pg 6.1.5
2022-02-23T04:40:56.705Z appoptics:debug starting runtimeMetrics


  probes.pg 6.1.5
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (33ms)
  1 failing

  1) probes.pg 6.1.5
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:456:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:375:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:132:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.1.6
added 1 package from 2 contributors, updated 1 package and audited 916 packages in 6.27s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:41:04.410Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:41:04.412Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:41:04.412Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:41:04.413Z appoptics:debug using context provider: ace-context
2022-02-23T04:41:04.479Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:41:04.730Z appoptics:patching patched crypto 
2022-02-23T04:41:04.759Z appoptics:patching patched https 
2022-02-23T04:41:04.759Z appoptics:patching patched http 
2022-02-23T04:41:04.783Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:41:04.784Z appoptics:patching patched fs 
2022-02-23T04:41:04.804Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:41:04.806Z appoptics:patching patched pg 6.1.6
2022-02-23T04:41:04.835Z appoptics:debug starting runtimeMetrics


  probes.pg 6.1.6
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (29ms)
  1 failing

  1) probes.pg 6.1.6
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:456:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:375:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:132:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.2.2
removed 1 package, updated 2 packages and audited 915 packages in 5.223s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:41:11.987Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:41:11.989Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:41:11.989Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:41:11.992Z appoptics:debug using context provider: ace-context
2022-02-23T04:41:12.140Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:41:12.628Z appoptics:patching patched crypto 
2022-02-23T04:41:12.721Z appoptics:patching patched https 
2022-02-23T04:41:12.725Z appoptics:patching patched http 
2022-02-23T04:41:12.776Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:41:12.776Z appoptics:patching patched fs 
2022-02-23T04:41:12.816Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:41:12.819Z appoptics:patching patched pg 6.2.2
2022-02-23T04:41:12.861Z appoptics:debug starting runtimeMetrics


  probes.pg 6.2.2
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (30ms)
  1 failing

  1) probes.pg 6.2.2
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:459:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:375:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:132:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.2.3
updated 1 package and audited 915 packages in 5.237s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:41:19.852Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:41:19.854Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:41:19.854Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:41:19.855Z appoptics:debug using context provider: ace-context
2022-02-23T04:41:19.915Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:41:20.128Z appoptics:patching patched crypto 
2022-02-23T04:41:20.161Z appoptics:patching patched https 
2022-02-23T04:41:20.162Z appoptics:patching patched http 
2022-02-23T04:41:20.190Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:41:20.190Z appoptics:patching patched fs 
2022-02-23T04:41:20.212Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:41:20.215Z appoptics:patching patched pg 6.2.3
2022-02-23T04:41:20.248Z appoptics:debug starting runtimeMetrics


  probes.pg 6.2.3
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (21ms)
  1 failing

  1) probes.pg 6.2.3
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:459:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:375:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:132:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.2.4
updated 1 package and audited 915 packages in 6.222s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:41:27.964Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:41:27.965Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:41:27.966Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:41:27.966Z appoptics:debug using context provider: ace-context
2022-02-23T04:41:28.036Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:41:28.261Z appoptics:patching patched crypto 
2022-02-23T04:41:28.290Z appoptics:patching patched https 
2022-02-23T04:41:28.290Z appoptics:patching patched http 
2022-02-23T04:41:28.314Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:41:28.315Z appoptics:patching patched fs 
2022-02-23T04:41:28.335Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:41:28.339Z appoptics:patching patched pg 6.2.4
2022-02-23T04:41:28.366Z appoptics:debug starting runtimeMetrics


  probes.pg 6.2.4
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (31ms)
  1 failing

  1) probes.pg 6.2.4
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.2.5
added 1 package from 2 contributors, updated 1 package and audited 916 packages in 5.323s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:41:35.214Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:41:35.216Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:41:35.216Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:41:35.217Z appoptics:debug using context provider: ace-context
2022-02-23T04:41:35.281Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:41:35.506Z appoptics:patching patched crypto 
2022-02-23T04:41:35.538Z appoptics:patching patched https 
2022-02-23T04:41:35.538Z appoptics:patching patched http 
2022-02-23T04:41:35.563Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:41:35.563Z appoptics:patching patched fs 
2022-02-23T04:41:35.589Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:41:35.591Z appoptics:patching patched pg 6.2.5
2022-02-23T04:41:35.618Z appoptics:debug starting runtimeMetrics


  probes.pg 6.2.5
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (29ms)
  1 failing

  1) probes.pg 6.2.5
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.3.0
removed 1 package, updated 1 package and audited 915 packages in 5.899s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:41:42.944Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:41:42.945Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:41:42.946Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:41:42.946Z appoptics:debug using context provider: ace-context
2022-02-23T04:41:43.008Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:41:43.239Z appoptics:patching patched crypto 
2022-02-23T04:41:43.292Z appoptics:patching patched https 
2022-02-23T04:41:43.293Z appoptics:patching patched http 
2022-02-23T04:41:43.330Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:41:43.330Z appoptics:patching patched fs 
2022-02-23T04:41:43.353Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:41:43.360Z appoptics:patching patched pg 6.3.0
2022-02-23T04:41:43.393Z appoptics:debug starting runtimeMetrics


  probes.pg 6.3.0
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (21ms)
  1 failing

  1) probes.pg 6.3.0
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.3.1
updated 1 package and audited 915 packages in 5.633s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:41:50.547Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:41:50.549Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:41:50.549Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:41:50.550Z appoptics:debug using context provider: ace-context
2022-02-23T04:41:50.645Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:41:50.928Z appoptics:patching patched crypto 
2022-02-23T04:41:50.960Z appoptics:patching patched https 
2022-02-23T04:41:50.960Z appoptics:patching patched http 
2022-02-23T04:41:50.985Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:41:50.986Z appoptics:patching patched fs 
2022-02-23T04:41:51.024Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:41:51.027Z appoptics:patching patched pg 6.3.1
2022-02-23T04:41:51.058Z appoptics:debug starting runtimeMetrics


  probes.pg 6.3.1
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (43ms)
  1 failing

  1) probes.pg 6.3.1
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.3.3
added 1 package from 2 contributors, updated 1 package and audited 916 packages in 5.436s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:41:58.166Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:41:58.168Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:41:58.168Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:41:58.169Z appoptics:debug using context provider: ace-context
2022-02-23T04:41:58.249Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:41:58.468Z appoptics:patching patched crypto 
2022-02-23T04:41:58.501Z appoptics:patching patched https 
2022-02-23T04:41:58.501Z appoptics:patching patched http 
2022-02-23T04:41:58.529Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:41:58.530Z appoptics:patching patched fs 
2022-02-23T04:41:58.552Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:41:58.555Z appoptics:patching patched pg 6.3.3
2022-02-23T04:41:58.597Z appoptics:debug starting runtimeMetrics


  probes.pg 6.3.3
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (20ms)
  1 failing

  1) probes.pg 6.3.3
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.4.0
removed 1 package, updated 1 package and audited 915 packages in 5.768s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:42:05.787Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:42:05.789Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:42:05.789Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:42:05.790Z appoptics:debug using context provider: ace-context
2022-02-23T04:42:05.857Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:42:06.073Z appoptics:patching patched crypto 
2022-02-23T04:42:06.103Z appoptics:patching patched https 
2022-02-23T04:42:06.103Z appoptics:patching patched http 
2022-02-23T04:42:06.127Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:42:06.128Z appoptics:patching patched fs 
2022-02-23T04:42:06.152Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:42:06.154Z appoptics:patching patched pg 6.4.0
2022-02-23T04:42:06.185Z appoptics:debug starting runtimeMetrics


  probes.pg 6.4.0
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (27ms)
  1 failing

  1) probes.pg 6.4.0
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.4.1
updated 1 package and audited 915 packages in 5.391s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:42:12.996Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:42:12.998Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:42:12.998Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:42:12.999Z appoptics:debug using context provider: ace-context
2022-02-23T04:42:13.087Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:42:13.317Z appoptics:patching patched crypto 
2022-02-23T04:42:13.348Z appoptics:patching patched https 
2022-02-23T04:42:13.348Z appoptics:patching patched http 
2022-02-23T04:42:13.374Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:42:13.375Z appoptics:patching patched fs 
2022-02-23T04:42:13.395Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:42:13.398Z appoptics:patching patched pg 6.4.1
2022-02-23T04:42:13.427Z appoptics:debug starting runtimeMetrics


  probes.pg 6.4.1
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (26ms)
  1 failing

  1) probes.pg 6.4.1
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.4.2
added 1 package from 2 contributors, updated 1 package and audited 916 packages in 6.457s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:42:21.331Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:42:21.333Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:42:21.333Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:42:21.334Z appoptics:debug using context provider: ace-context
2022-02-23T04:42:21.398Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:42:21.632Z appoptics:patching patched crypto 
2022-02-23T04:42:21.674Z appoptics:patching patched https 
2022-02-23T04:42:21.675Z appoptics:patching patched http 
2022-02-23T04:42:21.700Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:42:21.700Z appoptics:patching patched fs 
2022-02-23T04:42:21.720Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:42:21.722Z appoptics:patching patched pg 6.4.2
2022-02-23T04:42:21.759Z appoptics:debug starting runtimeMetrics


  probes.pg 6.4.2
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (25ms)
  1 failing

  1) probes.pg 6.4.2
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.5.0
removed 3 packages, updated 3 packages and audited 913 packages in 5.456s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:42:28.959Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:42:28.961Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:42:28.961Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:42:28.969Z appoptics:debug using context provider: ace-context
2022-02-23T04:42:29.122Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:42:29.453Z appoptics:patching patched crypto 
2022-02-23T04:42:29.532Z appoptics:patching patched https 
2022-02-23T04:42:29.532Z appoptics:patching patched http 
2022-02-23T04:42:29.601Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:42:29.602Z appoptics:patching patched fs 
2022-02-23T04:42:29.617Z appoptics:patching patched pg 7.5.0
2022-02-23T04:42:29.689Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.5.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.5.0
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (219ms)
  64 failing

  1) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  2) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  3) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  4) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  5) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  6) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  7) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  8) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  9) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  10) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  11) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  12) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  13) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  14) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  15) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  16) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  17) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  18) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  19) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  20) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  21) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  22) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  23) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  24) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  25) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  26) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  27) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  28) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  29) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  30) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  31) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  32) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  33) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  34) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  35) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  36) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  37) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  38) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  39) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  40) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  41) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  42) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  43) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  44) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  45) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  46) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  47) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  48) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  49) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  50) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  51) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  52) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  53) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  54) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  55) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  56) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  57) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  58) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  59) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  60) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  61) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  62) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  63) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  64) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.6.0
updated 1 package and audited 913 packages in 5.248s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:42:37.003Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:42:37.005Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:42:37.005Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:42:37.006Z appoptics:debug using context provider: ace-context
2022-02-23T04:42:37.069Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:42:37.298Z appoptics:patching patched crypto 
2022-02-23T04:42:37.328Z appoptics:patching patched https 
2022-02-23T04:42:37.328Z appoptics:patching patched http 
2022-02-23T04:42:37.357Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:42:37.357Z appoptics:patching patched fs 
2022-02-23T04:42:37.367Z appoptics:patching patched pg 7.6.0
2022-02-23T04:42:37.406Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.6.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.6.0
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (182ms)
  64 failing

  1) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  2) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  3) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  4) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  5) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  6) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  7) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  8) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  9) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  10) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  11) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  12) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  13) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  14) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  15) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  16) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  17) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  18) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  19) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  20) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  21) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  22) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  23) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  24) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  25) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  26) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  27) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  28) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  29) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  30) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  31) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  32) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  33) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  34) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  35) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  36) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  37) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  38) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  39) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  40) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  41) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  42) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  43) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  44) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  45) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  46) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  47) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  48) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  49) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  50) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  51) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  52) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  53) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  54) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  55) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  56) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  57) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  58) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  59) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  60) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  61) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  62) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  63) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  64) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.6.1
updated 2 packages and audited 913 packages in 6.262s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:42:45.233Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:42:45.235Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:42:45.235Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:42:45.236Z appoptics:debug using context provider: ace-context
2022-02-23T04:42:45.305Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:42:45.526Z appoptics:patching patched crypto 
2022-02-23T04:42:45.575Z appoptics:patching patched https 
2022-02-23T04:42:45.576Z appoptics:patching patched http 
2022-02-23T04:42:45.629Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:42:45.629Z appoptics:patching patched fs 
2022-02-23T04:42:45.642Z appoptics:patching patched pg 7.6.1
2022-02-23T04:42:45.719Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.6.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.6.1
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (128ms)
  64 failing

  1) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  2) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  3) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  4) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  5) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  6) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  7) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  8) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  9) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  10) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  11) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  12) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  13) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  14) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  15) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  16) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  17) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  18) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  19) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  20) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  21) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  22) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  23) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  24) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  25) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  26) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  27) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  28) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  29) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  30) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  31) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  32) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  33) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  34) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  35) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  36) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  37) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  38) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  39) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  40) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  41) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  42) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  43) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  44) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  45) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  46) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  47) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  48) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  49) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  50) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  51) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  52) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  53) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  54) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  55) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  56) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  57) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  58) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  59) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  60) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  61) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  62) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  63) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  64) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.7.0
updated 1 package and audited 913 packages in 5.189s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:42:52.512Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:42:52.514Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:42:52.514Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:42:52.515Z appoptics:debug using context provider: ace-context
2022-02-23T04:42:52.584Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:42:52.852Z appoptics:patching patched crypto 
2022-02-23T04:42:52.883Z appoptics:patching patched https 
2022-02-23T04:42:52.883Z appoptics:patching patched http 
2022-02-23T04:42:52.914Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:42:52.914Z appoptics:patching patched fs 
2022-02-23T04:42:52.943Z appoptics:patching patched pg 7.7.0
2022-02-23T04:42:52.979Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.7.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.7.0
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (143ms)
  64 failing

  1) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  2) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  3) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  4) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  5) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  6) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  7) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  8) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  9) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  10) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  11) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  12) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  13) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  14) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  15) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  16) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  17) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  18) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  19) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  20) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  21) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  22) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  23) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  24) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  25) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  26) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  27) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  28) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  29) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  30) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  31) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  32) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  33) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  34) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  35) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  36) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  37) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  38) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  39) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  40) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  41) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  42) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  43) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  44) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  45) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  46) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  47) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  48) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  49) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  50) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  51) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  52) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  53) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  54) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  55) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  56) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  57) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  58) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  59) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  60) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  61) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  62) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  63) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  64) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.7.1
updated 1 package and audited 913 packages in 6.081s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:43:00.603Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:43:00.604Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:43:00.604Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:43:00.606Z appoptics:debug using context provider: ace-context
2022-02-23T04:43:00.670Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:43:00.905Z appoptics:patching patched crypto 
2022-02-23T04:43:00.946Z appoptics:patching patched https 
2022-02-23T04:43:00.946Z appoptics:patching patched http 
2022-02-23T04:43:00.977Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:43:00.978Z appoptics:patching patched fs 
2022-02-23T04:43:00.989Z appoptics:patching patched pg 7.7.1
2022-02-23T04:43:01.020Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.7.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.7.1
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (131ms)
  64 failing

  1) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  2) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  3) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  4) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  5) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  6) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  7) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  8) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  9) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  10) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  11) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  12) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  13) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  14) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  15) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  16) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  17) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  18) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  19) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  20) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  21) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  22) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  23) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  24) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  25) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  26) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  27) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  28) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  29) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  30) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  31) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  32) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  33) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  34) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  35) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  36) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  37) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  38) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  39) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  40) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  41) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  42) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  43) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  44) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  45) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  46) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  47) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  48) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  49) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  50) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  51) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  52) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  53) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  54) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  55) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  56) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  57) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  58) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  59) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  60) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  61) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  62) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  63) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  64) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.8.0
updated 3 packages and audited 913 packages in 5.511s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:43:08.243Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:43:08.245Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:43:08.245Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:43:08.246Z appoptics:debug using context provider: ace-context
2022-02-23T04:43:08.327Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:43:08.601Z appoptics:patching patched crypto 
2022-02-23T04:43:08.634Z appoptics:patching patched https 
2022-02-23T04:43:08.635Z appoptics:patching patched http 
2022-02-23T04:43:08.667Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:43:08.668Z appoptics:patching patched fs 
2022-02-23T04:43:08.699Z appoptics:patching patched pg 7.8.0
2022-02-23T04:43:08.733Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.8.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.8.0
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (143ms)
  64 failing

  1) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:443:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:359:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:120:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  2) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  3) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  4) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  5) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  6) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  7) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  8) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  9) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  10) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  11) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  12) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  13) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  14) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  15) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  16) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  17) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  18) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  19) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  20) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  21) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  22) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  23) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  24) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  25) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  26) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  27) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  28) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  29) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  30) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  31) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  32) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  33) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:443:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:359:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:120:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  34) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  35) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  36) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  37) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  38) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  39) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  40) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  41) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  42) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  43) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  44) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  45) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  46) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  47) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  48) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  49) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  50) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  51) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  52) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  53) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  54) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  55) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  56) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  57) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  58) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  59) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  60) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  61) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  62) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  63) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  64) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.8.1
updated 2 packages and audited 913 packages in 5.114s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:43:15.709Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:43:15.711Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:43:15.711Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:43:15.712Z appoptics:debug using context provider: ace-context
2022-02-23T04:43:15.772Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:43:15.985Z appoptics:patching patched crypto 
2022-02-23T04:43:16.016Z appoptics:patching patched https 
2022-02-23T04:43:16.016Z appoptics:patching patched http 
2022-02-23T04:43:16.046Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:43:16.046Z appoptics:patching patched fs 
2022-02-23T04:43:16.061Z appoptics:patching patched pg 7.8.1
2022-02-23T04:43:16.091Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.8.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.8.1
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (151ms)
  64 failing

  1) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:443:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:359:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:120:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  2) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  3) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  4) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  5) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  6) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  7) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  8) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  9) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  10) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  11) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  12) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  13) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  14) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  15) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  16) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  17) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  18) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  19) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  20) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  21) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  22) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  23) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  24) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  25) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  26) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  27) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  28) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  29) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  30) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  31) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  32) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  33) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:443:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:359:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:120:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  34) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  35) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  36) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  37) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  38) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  39) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  40) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  41) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  42) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  43) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  44) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  45) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  46) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  47) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  48) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  49) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  50) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  51) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  52) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  53) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  54) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  55) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  56) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  57) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  58) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  59) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  60) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  61) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  62) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  63) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  64) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.8.2
updated 1 package and audited 913 packages in 5.64s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:43:23.349Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:43:23.351Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:43:23.351Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:43:23.352Z appoptics:debug using context provider: ace-context
2022-02-23T04:43:23.418Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:43:23.647Z appoptics:patching patched crypto 
2022-02-23T04:43:23.677Z appoptics:patching patched https 
2022-02-23T04:43:23.678Z appoptics:patching patched http 
2022-02-23T04:43:23.709Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:43:23.709Z appoptics:patching patched fs 
2022-02-23T04:43:23.727Z appoptics:patching patched pg 7.8.2
2022-02-23T04:43:23.766Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.8.2 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.8.2
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (136ms)
  64 failing

  1) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:443:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:359:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:120:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  2) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  3) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  4) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  5) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  6) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  7) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  8) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  9) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  10) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  11) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  12) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  13) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  14) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  15) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  16) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  17) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  18) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  19) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  20) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  21) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  22) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  23) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  24) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  25) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  26) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  27) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  28) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  29) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  30) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  31) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  32) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  33) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:443:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:359:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:120:22)
      at addChunk (_stream_readable.js:288:12)
      at readableAddChunk (_stream_readable.js:269:11)
      at Socket.Readable.push (_stream_readable.js:224:10)
      at TCP.onStreamRead [as onread] (internal/stream_base_commons.js:94:17)

  34) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  35) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  36) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  37) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  38) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  39) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  40) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  41) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  42) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)

  43) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)

  44) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  45) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  46) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  47) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  48) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  49) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  50) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  51) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  52) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)

  53) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)

  54) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)

  55) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  56) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  57) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  58) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  59) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  60) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  61) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  62) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)

  63) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)

  64) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.9.0
updated 1 package and audited 913 packages in 5.514s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:43:30.855Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:43:30.857Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:43:30.857Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:43:30.858Z appoptics:debug using context provider: ace-context
2022-02-23T04:43:30.919Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:43:31.134Z appoptics:patching patched crypto 
2022-02-23T04:43:31.162Z appoptics:patching patched https 
2022-02-23T04:43:31.162Z appoptics:patching patched http 
2022-02-23T04:43:31.193Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:43:31.193Z appoptics:patching patched fs 
2022-02-23T04:43:31.207Z appoptics:patching patched pg 7.9.0
2022-02-23T04:43:31.240Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.9.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.9.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (216ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (970ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (222ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (231ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (225ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (87ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (224ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (233ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (221ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (978ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (228ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (237ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (230ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.10.0
updated 1 package and audited 913 packages in 5.036s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:43:43.444Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:43:43.446Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:43:43.446Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:43:43.447Z appoptics:debug using context provider: ace-context
2022-02-23T04:43:43.508Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:43:43.730Z appoptics:patching patched crypto 
2022-02-23T04:43:43.761Z appoptics:patching patched https 
2022-02-23T04:43:43.761Z appoptics:patching patched http 
2022-02-23T04:43:43.793Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:43:43.794Z appoptics:patching patched fs 
2022-02-23T04:43:43.808Z appoptics:patching patched pg 7.10.0
2022-02-23T04:43:43.857Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.10.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.10.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (146ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (42ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (53ms)
        ✓ should trace a basic query using callback (952ms)
        ✓ should trace a basic query using promises (50ms)
        ✓ should trace a prepared statement using a callback (200ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (45ms)
        ✓ should truncate long queries using a callback (209ms)
        ✓ should truncate long queries using promises (46ms)
        ✓ should do nothing when disabled using a callback (201ms)
        ✓ should do nothing when disabled using promises (48ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (77ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (48ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (220ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (228ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (218ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (975ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (224ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (234ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (225ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.11.0
updated 1 package and audited 913 packages in 5.021s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:43:56.294Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:43:56.296Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:43:56.296Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:43:56.297Z appoptics:debug using context provider: ace-context
2022-02-23T04:43:56.362Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:43:56.710Z appoptics:patching patched crypto 
2022-02-23T04:43:56.766Z appoptics:patching patched https 
2022-02-23T04:43:56.766Z appoptics:patching patched http 
2022-02-23T04:43:56.813Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:43:56.814Z appoptics:patching patched fs 
2022-02-23T04:43:56.828Z appoptics:patching patched pg 7.11.0
2022-02-23T04:43:56.931Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.11.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.11.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (205ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (47ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (56ms)
        ✓ should trace a basic query using callback (948ms)
        ✓ should trace a basic query using promises (54ms)
        ✓ should trace a prepared statement using a callback (197ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (49ms)
        ✓ should truncate long queries using a callback (204ms)
        ✓ should truncate long queries using promises (50ms)
        ✓ should do nothing when disabled using a callback (197ms)
        ✓ should do nothing when disabled using promises (53ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (64ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (226ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (236ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (226ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (251ms)
        ✓ should trace a basic query using callback (980ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (231ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (240ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (234ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.12.0
updated 1 package and audited 913 packages in 5.39s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:44:10.297Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:44:10.299Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:44:10.299Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:44:10.300Z appoptics:debug using context provider: ace-context
2022-02-23T04:44:10.401Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:44:10.812Z appoptics:patching patched crypto 
2022-02-23T04:44:10.874Z appoptics:patching patched https 
2022-02-23T04:44:10.874Z appoptics:patching patched http 
2022-02-23T04:44:10.915Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:44:10.916Z appoptics:patching patched fs 
2022-02-23T04:44:10.932Z appoptics:patching patched pg 7.12.0
2022-02-23T04:44:10.978Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.12.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.12.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (135ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (38ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (966ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (218ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (227ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (218ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (73ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (224ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (232ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (223ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (251ms)
        ✓ should trace a basic query using callback (978ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (227ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (237ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (231ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.12.1
updated 2 packages and audited 913 packages in 5.905s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:44:24.148Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:44:24.150Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:44:24.150Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:44:24.151Z appoptics:debug using context provider: ace-context
2022-02-23T04:44:24.216Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:44:24.453Z appoptics:patching patched crypto 
2022-02-23T04:44:24.490Z appoptics:patching patched https 
2022-02-23T04:44:24.490Z appoptics:patching patched http 
2022-02-23T04:44:24.532Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:44:24.532Z appoptics:patching patched fs 
2022-02-23T04:44:24.548Z appoptics:patching patched pg 7.12.1
2022-02-23T04:44:24.581Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.12.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.12.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (130ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (973ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (224ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (238ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (232ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (91ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (222ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (231ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (219ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (975ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (226ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (237ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (220ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.13.0
updated 1 package and audited 913 packages in 6.207s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:44:37.912Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:44:37.914Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:44:37.914Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:44:37.915Z appoptics:debug using context provider: ace-context
2022-02-23T04:44:37.979Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:44:38.210Z appoptics:patching patched crypto 
2022-02-23T04:44:38.242Z appoptics:patching patched https 
2022-02-23T04:44:38.242Z appoptics:patching patched http 
2022-02-23T04:44:38.273Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:44:38.274Z appoptics:patching patched fs 
2022-02-23T04:44:38.284Z appoptics:patching patched pg 7.13.0
2022-02-23T04:44:38.316Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.13.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.13.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (122ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (970ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (220ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (227ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (217ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (63ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (224ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (232ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (228ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (247ms)
        ✓ should trace a basic query using callback (961ms)
        ✓ should trace a basic query using promises (41ms)
        ✓ should trace a prepared statement using a callback (211ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (220ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (211ms)
        ✓ should do nothing when disabled using promises (39ms)


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.14.0
updated 1 package and audited 913 packages in 5.957s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:44:51.375Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:44:51.377Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:44:51.378Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:44:51.378Z appoptics:debug using context provider: ace-context
2022-02-23T04:44:51.439Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:44:51.658Z appoptics:patching patched crypto 
2022-02-23T04:44:51.690Z appoptics:patching patched https 
2022-02-23T04:44:51.690Z appoptics:patching patched http 
2022-02-23T04:44:51.722Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:44:51.722Z appoptics:patching patched fs 
2022-02-23T04:44:51.733Z appoptics:patching patched pg 7.14.0
2022-02-23T04:44:51.791Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.14.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.14.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (132ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (968ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (220ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (232ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (224ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (70ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (225ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (233ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (238ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (976ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (227ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (236ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (230ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.15.0
updated 1 package and audited 913 packages in 5.951s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:45:04.804Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:45:04.806Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:45:04.806Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:45:04.807Z appoptics:debug using context provider: ace-context
2022-02-23T04:45:04.872Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:45:05.085Z appoptics:patching patched crypto 
2022-02-23T04:45:05.115Z appoptics:patching patched https 
2022-02-23T04:45:05.116Z appoptics:patching patched http 
2022-02-23T04:45:05.147Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:45:05.147Z appoptics:patching patched fs 
2022-02-23T04:45:05.158Z appoptics:patching patched pg 7.15.0
2022-02-23T04:45:05.193Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.15.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.15.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (125ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (46ms)
        ✓ should trace a basic query using callback (959ms)
        ✓ should trace a basic query using promises (42ms)
        ✓ should trace a prepared statement using a callback (210ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (222ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (211ms)
        ✓ should do nothing when disabled using promises (40ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (62ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (225ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (234ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (215ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (251ms)
        ✓ should trace a basic query using callback (976ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (226ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (227ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.15.1
updated 1 package and audited 913 packages in 6.327s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:45:18.536Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:45:18.538Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:45:18.538Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:45:18.538Z appoptics:debug using context provider: ace-context
2022-02-23T04:45:18.603Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:45:18.814Z appoptics:patching patched crypto 
2022-02-23T04:45:18.850Z appoptics:patching patched https 
2022-02-23T04:45:18.850Z appoptics:patching patched http 
2022-02-23T04:45:18.888Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:45:18.888Z appoptics:patching patched fs 
2022-02-23T04:45:18.901Z appoptics:patching patched pg 7.15.1
2022-02-23T04:45:18.940Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.15.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.15.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (124ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (46ms)
        ✓ should trace a basic query using callback (958ms)
        ✓ should trace a basic query using promises (42ms)
        ✓ should trace a prepared statement using a callback (209ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (218ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (210ms)
        ✓ should do nothing when disabled using promises (40ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (69ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (218ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (227ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (216ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (970ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (220ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (230ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (224ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.15.2
updated 1 package and audited 913 packages in 6.551s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:45:32.624Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:45:32.626Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:45:32.626Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:45:32.627Z appoptics:debug using context provider: ace-context
2022-02-23T04:45:32.698Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:45:32.926Z appoptics:patching patched crypto 
2022-02-23T04:45:32.978Z appoptics:patching patched https 
2022-02-23T04:45:32.979Z appoptics:patching patched http 
2022-02-23T04:45:33.013Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:45:33.013Z appoptics:patching patched fs 
2022-02-23T04:45:33.025Z appoptics:patching patched pg 7.15.2
2022-02-23T04:45:33.057Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.15.2 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.15.2
      ✓ UDP might lose a message
      ✓ should create the pg testing context (123ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (968ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (216ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (226ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (218ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (61ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (225ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (234ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (225ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (981ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (231ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (239ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (232ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.16.0
added 1 package, updated 1 package and audited 914 packages in 5.154s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:45:45.536Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:45:45.538Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:45:45.538Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:45:45.538Z appoptics:debug using context provider: ace-context
2022-02-23T04:45:45.604Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:45:45.817Z appoptics:patching patched crypto 
2022-02-23T04:45:45.851Z appoptics:patching patched https 
2022-02-23T04:45:45.851Z appoptics:patching patched http 
2022-02-23T04:45:45.892Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:45:45.892Z appoptics:patching patched fs 
2022-02-23T04:45:45.905Z appoptics:patching patched pg 7.16.0
2022-02-23T04:45:45.946Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.16.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.16.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (132ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (42ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (977ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (227ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (225ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (81ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (216ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (232ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (218ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (973ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (224ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (239ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (223ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.16.1
updated 1 package and audited 914 packages in 5.454s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:45:58.470Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:45:58.472Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:45:58.472Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:45:58.473Z appoptics:debug using context provider: ace-context
2022-02-23T04:45:58.537Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:45:58.774Z appoptics:patching patched crypto 
2022-02-23T04:45:58.805Z appoptics:patching patched https 
2022-02-23T04:45:58.805Z appoptics:patching patched http 
2022-02-23T04:45:58.836Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:45:58.836Z appoptics:patching patched fs 
2022-02-23T04:45:58.847Z appoptics:patching patched pg 7.16.1
2022-02-23T04:45:58.881Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.16.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.16.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (145ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (76ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (41ms)
        ✓ should trace a basic query using callback (967ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (216ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (223ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (217ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (79ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (218ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (206ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (215ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (251ms)
        ✓ should trace a basic query using callback (966ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (215ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (225ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (216ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.17.0
updated 1 package and audited 914 packages in 5.432s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:46:11.588Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:46:11.590Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:46:11.590Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:46:11.591Z appoptics:debug using context provider: ace-context
2022-02-23T04:46:11.658Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:46:11.887Z appoptics:patching patched crypto 
2022-02-23T04:46:11.918Z appoptics:patching patched https 
2022-02-23T04:46:11.918Z appoptics:patching patched http 
2022-02-23T04:46:11.956Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:46:11.957Z appoptics:patching patched fs 
2022-02-23T04:46:11.969Z appoptics:patching patched pg 7.17.0
2022-02-23T04:46:12.014Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.17.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.17.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (122ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (41ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (976ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (227ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (240ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (225ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (95ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (231ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (225ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (979ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (228ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (239ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (231ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.17.1
updated 1 package and audited 914 packages in 5.268s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:46:24.387Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:46:24.389Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:46:24.389Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:46:24.390Z appoptics:debug using context provider: ace-context
2022-02-23T04:46:24.473Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:46:24.746Z appoptics:patching patched crypto 
2022-02-23T04:46:24.778Z appoptics:patching patched https 
2022-02-23T04:46:24.778Z appoptics:patching patched http 
2022-02-23T04:46:24.828Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:46:24.828Z appoptics:patching patched fs 
2022-02-23T04:46:24.842Z appoptics:patching patched pg 7.17.1
2022-02-23T04:46:24.875Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.17.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.17.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (160ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (55ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (56ms)
        ✓ should trace a basic query using callback (950ms)
        ✓ should trace a basic query using promises (51ms)
        ✓ should trace a prepared statement using a callback (200ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (44ms)
        ✓ should truncate long queries using a callback (210ms)
        ✓ should truncate long queries using promises (45ms)
        ✓ should do nothing when disabled using a callback (203ms)
        ✓ should do nothing when disabled using promises (46ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (69ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises (41ms)
        ✓ should trace a prepared statement using a callback (212ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (230ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (216ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (971ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (222ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (230ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (218ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.18.0
updated 1 package and audited 914 packages in 5.662s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:46:37.954Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:46:37.956Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:46:37.957Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:46:37.958Z appoptics:debug using context provider: ace-context
2022-02-23T04:46:38.077Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:46:38.436Z appoptics:patching patched crypto 
2022-02-23T04:46:38.479Z appoptics:patching patched https 
2022-02-23T04:46:38.479Z appoptics:patching patched http 
2022-02-23T04:46:38.530Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:46:38.531Z appoptics:patching patched fs 
2022-02-23T04:46:38.551Z appoptics:patching patched pg 7.18.0
2022-02-23T04:46:38.588Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.18.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.18.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (190ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (72ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (59ms)
        ✓ should trace a basic query using callback (945ms)
        ✓ should trace a basic query using promises (56ms)
        ✓ should trace a prepared statement using a callback (196ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (48ms)
        ✓ should truncate long queries using a callback (205ms)
        ✓ should truncate long queries using promises (49ms)
        ✓ should do nothing when disabled using a callback (198ms)
        ✓ should do nothing when disabled using promises (52ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (71ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (226ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (240ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (223ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (976ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (228ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (228ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.18.1
updated 1 package and audited 914 packages in 5.416s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:46:51.656Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:46:51.658Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:46:51.658Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:46:51.659Z appoptics:debug using context provider: ace-context
2022-02-23T04:46:51.753Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:46:51.973Z appoptics:patching patched crypto 
2022-02-23T04:46:52.002Z appoptics:patching patched https 
2022-02-23T04:46:52.003Z appoptics:patching patched http 
2022-02-23T04:46:52.036Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:46:52.037Z appoptics:patching patched fs 
2022-02-23T04:46:52.049Z appoptics:patching patched pg 7.18.1
2022-02-23T04:46:52.084Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.18.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.18.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (133ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (971ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (221ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (227ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (63ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (98ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (206ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (38ms)
        ✓ should truncate long queries using a callback (216ms)
        ✓ should truncate long queries using promises (41ms)
        ✓ should do nothing when disabled using a callback (206ms)
        ✓ should do nothing when disabled using promises (41ms)
      using pool with backed up queue
        ✓ should exhaust the pool (248ms)
        ✓ should trace a basic query using callback (962ms)
        ✓ should trace a basic query using promises (41ms)
        ✓ should trace a prepared statement using a callback (212ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (223ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (212ms)
        ✓ should do nothing when disabled using promises (38ms)


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.18.2
updated 1 package and audited 914 packages in 5.369s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:47:05.112Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:47:05.114Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:47:05.114Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:47:05.115Z appoptics:debug using context provider: ace-context
2022-02-23T04:47:05.194Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:47:05.436Z appoptics:patching patched crypto 
2022-02-23T04:47:05.470Z appoptics:patching patched https 
2022-02-23T04:47:05.471Z appoptics:patching patched http 
2022-02-23T04:47:05.507Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:47:05.508Z appoptics:patching patched fs 
2022-02-23T04:47:05.526Z appoptics:patching patched pg 7.18.2
2022-02-23T04:47:05.567Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.18.2 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.18.2
      ✓ UDP might lose a message
      ✓ should create the pg testing context (126ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (968ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (219ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (227ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (221ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (66ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (39ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (218ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (227ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (214ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (972ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (224ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (228ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (225ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.0.0
updated 2 packages and audited 914 packages in 6.221s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:47:18.906Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:47:18.907Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:47:18.907Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:47:18.909Z appoptics:debug using context provider: ace-context
2022-02-23T04:47:18.973Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:47:19.184Z appoptics:patching patched crypto 
2022-02-23T04:47:19.222Z appoptics:patching patched https 
2022-02-23T04:47:19.222Z appoptics:patching patched http 
2022-02-23T04:47:19.254Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:47:19.254Z appoptics:patching patched fs 
2022-02-23T04:47:19.265Z appoptics:patching patched pg 8.0.0
2022-02-23T04:47:19.292Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.0.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (139ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (975ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (225ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (228ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (71ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (39ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (223ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (232ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (221ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (980ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (231ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (242ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (234ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.0.1
added 1 package, removed 1 package, updated 1 package and audited 914 packages in 6.403s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:47:32.739Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:47:32.741Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:47:32.741Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:47:32.742Z appoptics:debug using context provider: ace-context
2022-02-23T04:47:32.808Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:47:33.053Z appoptics:patching patched crypto 
2022-02-23T04:47:33.086Z appoptics:patching patched https 
2022-02-23T04:47:33.086Z appoptics:patching patched http 
2022-02-23T04:47:33.118Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:47:33.119Z appoptics:patching patched fs 
2022-02-23T04:47:33.130Z appoptics:patching patched pg 8.0.1
2022-02-23T04:47:33.160Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.0.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.0.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (149ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (49ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (38ms)
        ✓ should trace a basic query using callback (968ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (219ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (227ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (221ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (69ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (228ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (226ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (979ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (226ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (231ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.0.2
updated 1 package and audited 914 packages in 5.99s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:47:46.288Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:47:46.290Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:47:46.290Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:47:46.291Z appoptics:debug using context provider: ace-context
2022-02-23T04:47:46.353Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:47:46.573Z appoptics:patching patched crypto 
2022-02-23T04:47:46.606Z appoptics:patching patched https 
2022-02-23T04:47:46.606Z appoptics:patching patched http 
2022-02-23T04:47:46.644Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:47:46.645Z appoptics:patching patched fs 
2022-02-23T04:47:46.658Z appoptics:patching patched pg 8.0.2
2022-02-23T04:47:46.696Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.0.2 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.0.2
      ✓ UDP might lose a message
      ✓ should create the pg testing context (110ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (41ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (969ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (221ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (231ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (231ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (117ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises (39ms)
        ✓ should trace a prepared statement using a callback (213ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (222ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (212ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (966ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (217ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (226ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (219ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.0.3
updated 1 package and audited 914 packages in 5.86s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:47:59.833Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:47:59.835Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:47:59.835Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:47:59.836Z appoptics:debug using context provider: ace-context
2022-02-23T04:47:59.922Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:48:00.146Z appoptics:patching patched crypto 
2022-02-23T04:48:00.186Z appoptics:patching patched https 
2022-02-23T04:48:00.186Z appoptics:patching patched http 
2022-02-23T04:48:00.217Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:48:00.217Z appoptics:patching patched fs 
2022-02-23T04:48:00.228Z appoptics:patching patched pg 8.0.3
2022-02-23T04:48:00.257Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.0.3 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.0.3
      ✓ UDP might lose a message
      ✓ should create the pg testing context (125ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (978ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (230ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (238ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (238ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (75ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises (39ms)
        ✓ should trace a prepared statement using a callback (214ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (222ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (211ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (965ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (215ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (225ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (217ms)
        ✓ should do nothing when disabled using promises (38ms)


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.1.0
updated 2 packages and audited 914 packages in 6.256s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:48:13.617Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:48:13.619Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:48:13.619Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:48:13.620Z appoptics:debug using context provider: ace-context
2022-02-23T04:48:13.682Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:48:13.891Z appoptics:patching patched crypto 
2022-02-23T04:48:13.926Z appoptics:patching patched https 
2022-02-23T04:48:13.926Z appoptics:patching patched http 
2022-02-23T04:48:13.963Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:48:13.964Z appoptics:patching patched fs 
2022-02-23T04:48:13.977Z appoptics:patching patched pg 8.1.0
2022-02-23T04:48:14.021Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.1.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.1.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (118ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (967ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (218ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (232ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (221ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (79ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (224ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (234ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (225ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (251ms)
        ✓ should trace a basic query using callback (978ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (228ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (236ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (218ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.2.0
updated 1 package and audited 914 packages in 5.72s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:48:26.877Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:48:26.879Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:48:26.879Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:48:26.880Z appoptics:debug using context provider: ace-context
2022-02-23T04:48:26.945Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:48:27.159Z appoptics:patching patched crypto 
2022-02-23T04:48:27.195Z appoptics:patching patched https 
2022-02-23T04:48:27.195Z appoptics:patching patched http 
2022-02-23T04:48:27.231Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:48:27.231Z appoptics:patching patched fs 
2022-02-23T04:48:27.247Z appoptics:patching patched pg 8.2.0
2022-02-23T04:48:27.293Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.2.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.2.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (122ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (43ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (974ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (225ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (238ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (234ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (81ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (41ms)
        ✓ should trace a basic query using promises (47ms)
        ✓ should trace a prepared statement using a callback (205ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (39ms)
        ✓ should truncate long queries using a callback (213ms)
        ✓ should truncate long queries using promises (44ms)
        ✓ should do nothing when disabled using a callback (204ms)
        ✓ should do nothing when disabled using promises (44ms)
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (961ms)
        ✓ should trace a basic query using promises (40ms)
        ✓ should trace a prepared statement using a callback (212ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (226ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (222ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.2.1
updated 1 package and audited 914 packages in 5.098s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:48:39.724Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:48:39.726Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:48:39.726Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:48:39.727Z appoptics:debug using context provider: ace-context
2022-02-23T04:48:39.810Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:48:40.056Z appoptics:patching patched crypto 
2022-02-23T04:48:40.088Z appoptics:patching patched https 
2022-02-23T04:48:40.089Z appoptics:patching patched http 
2022-02-23T04:48:40.122Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:48:40.122Z appoptics:patching patched fs 
2022-02-23T04:48:40.136Z appoptics:patching patched pg 8.2.1
2022-02-23T04:48:40.169Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.2.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.2.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (135ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (46ms)
        ✓ should trace a basic query using callback (959ms)
        ✓ should trace a basic query using promises (42ms)
        ✓ should trace a prepared statement using a callback (210ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (224ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (217ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (65ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (226ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (245ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (221ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (977ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (227ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (236ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (228ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.2.2
updated 1 package and audited 914 packages in 5.128s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:48:52.422Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:48:52.423Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:48:52.424Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:48:52.425Z appoptics:debug using context provider: ace-context
2022-02-23T04:48:52.483Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:48:52.719Z appoptics:patching patched crypto 
2022-02-23T04:48:52.752Z appoptics:patching patched https 
2022-02-23T04:48:52.752Z appoptics:patching patched http 
2022-02-23T04:48:52.783Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:48:52.783Z appoptics:patching patched fs 
2022-02-23T04:48:52.796Z appoptics:patching patched pg 8.2.2
2022-02-23T04:48:52.827Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.2.2 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.2.2
      ✓ UDP might lose a message
      ✓ should create the pg testing context (123ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (38ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (47ms)
        ✓ should trace a basic query using callback (963ms)
        ✓ should trace a basic query using promises (38ms)
        ✓ should trace a prepared statement using a callback (214ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (224ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (219ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (86ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (55ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (188ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (49ms)
        ✓ should truncate long queries using a callback (206ms)
        ✓ should truncate long queries using promises (70ms)
        ✓ should do nothing when disabled using a callback (177ms)
        ✓ should do nothing when disabled using promises (55ms)
      using pool with backed up queue
        ✓ should exhaust the pool (251ms)
        ✓ should trace a basic query using callback (946ms)
        ✓ should trace a basic query using promises (57ms)
        ✓ should trace a prepared statement using a callback (196ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (47ms)
        ✓ should truncate long queries using a callback (207ms)
        ✓ should truncate long queries using promises (50ms)
        ✓ should do nothing when disabled using a callback (201ms)
        ✓ should do nothing when disabled using promises (49ms)


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.3.0
updated 1 package and audited 914 packages in 5.285s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:49:05.327Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:49:05.329Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:49:05.329Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:49:05.330Z appoptics:debug using context provider: ace-context
2022-02-23T04:49:05.408Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:49:05.759Z appoptics:patching patched crypto 
2022-02-23T04:49:05.805Z appoptics:patching patched https 
2022-02-23T04:49:05.805Z appoptics:patching patched http 
2022-02-23T04:49:05.841Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:49:05.842Z appoptics:patching patched fs 
2022-02-23T04:49:05.865Z appoptics:patching patched pg 8.3.0
2022-02-23T04:49:05.901Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.3.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.3.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (116ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (60ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (43ms)
        ✓ should trace a basic query using callback (962ms)
        ✓ should trace a basic query using promises (40ms)
        ✓ should trace a prepared statement using a callback (212ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (216ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (226ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (73ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (226ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (216ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (980ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (231ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (241ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (237ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.3.2
updated 1 package and audited 914 packages in 5.333s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:49:18.277Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:49:18.278Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:49:18.278Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:49:18.279Z appoptics:debug using context provider: ace-context
2022-02-23T04:49:18.340Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:49:18.592Z appoptics:patching patched crypto 
2022-02-23T04:49:18.624Z appoptics:patching patched https 
2022-02-23T04:49:18.624Z appoptics:patching patched http 
2022-02-23T04:49:18.655Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:49:18.656Z appoptics:patching patched fs 
2022-02-23T04:49:18.669Z appoptics:patching patched pg 8.3.2
2022-02-23T04:49:18.708Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.3.2 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.3.2
      ✓ UDP might lose a message
      ✓ should create the pg testing context (168ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (44ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (62ms)
        ✓ should trace a basic query using callback (938ms)
        ✓ should trace a basic query using promises (60ms)
        ✓ should trace a prepared statement using a callback (192ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (52ms)
        ✓ should truncate long queries using a callback (202ms)
        ✓ should truncate long queries using promises (53ms)
        ✓ should do nothing when disabled using a callback (195ms)
        ✓ should do nothing when disabled using promises (57ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (82ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (40ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (223ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (234ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (221ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (251ms)
        ✓ should trace a basic query using callback (974ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (225ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (233ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (229ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.3.3
updated 1 package and audited 914 packages in 5.613s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:49:31.731Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:49:31.733Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:49:31.733Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:49:31.734Z appoptics:debug using context provider: ace-context
2022-02-23T04:49:31.818Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:49:32.101Z appoptics:patching patched crypto 
2022-02-23T04:49:32.131Z appoptics:patching patched https 
2022-02-23T04:49:32.131Z appoptics:patching patched http 
2022-02-23T04:49:32.162Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:49:32.163Z appoptics:patching patched fs 
2022-02-23T04:49:32.187Z appoptics:patching patched pg 8.3.3
2022-02-23T04:49:32.219Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.3.3 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.3.3
      ✓ UDP might lose a message
      ✓ should create the pg testing context (173ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (42ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (105ms)
        ✓ should trace a basic query using callback (899ms)
        ✓ should trace a basic query using promises (105ms)
        ✓ should trace a prepared statement using a callback (148ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (95ms)
        ✓ should truncate long queries using a callback (158ms)
        ✓ should truncate long queries using promises (97ms)
        ✓ should do nothing when disabled using a callback (150ms)
        ✓ should do nothing when disabled using promises (100ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (62ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (227ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (236ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (224ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (978ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (230ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (240ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (228ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.4.0
removed 1 package, updated 1 package and audited 913 packages in 5.379s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:49:45.080Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:49:45.082Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:49:45.082Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:49:45.083Z appoptics:debug using context provider: ace-context
2022-02-23T04:49:45.163Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:49:45.569Z appoptics:patching patched crypto 
2022-02-23T04:49:45.637Z appoptics:patching patched https 
2022-02-23T04:49:45.637Z appoptics:patching patched http 
2022-02-23T04:49:45.679Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:49:45.684Z appoptics:patching patched fs 
2022-02-23T04:49:45.701Z appoptics:patching patched pg 8.4.0
2022-02-23T04:49:45.731Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.4.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.4.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (120ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (968ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (219ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (228ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (219ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (68ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (38ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (223ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (232ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (221ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (976ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (227ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (234ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (240ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.4.1
updated 1 package and audited 913 packages in 5.456s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:49:58.448Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:49:58.450Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:49:58.450Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:49:58.451Z appoptics:debug using context provider: ace-context
2022-02-23T04:49:58.512Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:49:58.741Z appoptics:patching patched crypto 
2022-02-23T04:49:58.778Z appoptics:patching patched https 
2022-02-23T04:49:58.778Z appoptics:patching patched http 
2022-02-23T04:49:58.812Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:49:58.813Z appoptics:patching patched fs 
2022-02-23T04:49:58.828Z appoptics:patching patched pg 8.4.1
2022-02-23T04:49:58.856Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.4.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.4.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (125ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (970ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (220ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (227ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (221ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (81ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (50ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (220ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (230ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (219ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (974ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (224ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (232ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (227ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.4.2
updated 1 package and audited 913 packages in 6.255s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:50:12.261Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:50:12.263Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:50:12.263Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:50:12.263Z appoptics:debug using context provider: ace-context
2022-02-23T04:50:12.324Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:50:12.537Z appoptics:patching patched crypto 
2022-02-23T04:50:12.567Z appoptics:patching patched https 
2022-02-23T04:50:12.568Z appoptics:patching patched http 
2022-02-23T04:50:12.599Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:50:12.599Z appoptics:patching patched fs 
2022-02-23T04:50:12.614Z appoptics:patching patched pg 8.4.2
2022-02-23T04:50:12.642Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.4.2 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.4.2
      ✓ UDP might lose a message
      ✓ should create the pg testing context (125ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (40ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (969ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (220ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (228ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (221ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (70ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (224ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (236ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (225ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (978ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (229ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (237ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (232ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.5.0
updated 1 package and audited 913 packages in 6.191s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:50:25.870Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:50:25.871Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:50:25.872Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:50:25.872Z appoptics:debug using context provider: ace-context
2022-02-23T04:50:25.935Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:50:26.149Z appoptics:patching patched crypto 
2022-02-23T04:50:26.181Z appoptics:patching patched https 
2022-02-23T04:50:26.181Z appoptics:patching patched http 
2022-02-23T04:50:26.218Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:50:26.219Z appoptics:patching patched fs 
2022-02-23T04:50:26.235Z appoptics:patching patched pg 8.5.0
2022-02-23T04:50:26.270Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.5.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.5.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (119ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (40ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (978ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (229ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (239ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (231ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (74ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (225ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (242ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (233ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (987ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (239ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (247ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (241ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.5.1
updated 1 package and audited 913 packages in 5.909s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:50:39.195Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:50:39.196Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:50:39.196Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:50:39.197Z appoptics:debug using context provider: ace-context
2022-02-23T04:50:39.261Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:50:39.477Z appoptics:patching patched crypto 
2022-02-23T04:50:39.507Z appoptics:patching patched https 
2022-02-23T04:50:39.507Z appoptics:patching patched http 
2022-02-23T04:50:39.538Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:50:39.538Z appoptics:patching patched fs 
2022-02-23T04:50:39.551Z appoptics:patching patched pg 8.5.1
2022-02-23T04:50:39.583Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.5.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.5.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (127ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (38ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (969ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (221ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (230ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (223ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (81ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (215ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (226ms)
        ✓ should truncate long queries using promises (43ms)
        ✓ should do nothing when disabled using a callback (203ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (968ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (219ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (228ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (241ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.6.0
updated 1 package and audited 913 packages in 5.765s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:50:52.491Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:50:52.493Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:50:52.493Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:50:52.494Z appoptics:debug using context provider: ace-context
2022-02-23T04:50:52.557Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:50:52.783Z appoptics:patching patched crypto 
2022-02-23T04:50:52.813Z appoptics:patching patched https 
2022-02-23T04:50:52.813Z appoptics:patching patched http 
2022-02-23T04:50:52.844Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:50:52.844Z appoptics:patching patched fs 
2022-02-23T04:50:52.858Z appoptics:patching patched pg 8.6.0
2022-02-23T04:50:52.888Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.6.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.6.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (144ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (45ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (58ms)
        ✓ should trace a basic query using callback (946ms)
        ✓ should trace a basic query using promises (56ms)
        ✓ should trace a prepared statement using a callback (197ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (41ms)
        ✓ should truncate long queries using a callback (211ms)
        ✓ should truncate long queries using promises (43ms)
        ✓ should do nothing when disabled using a callback (205ms)
        ✓ should do nothing when disabled using promises (46ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (82ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (49ms)
        ✓ should trace a basic query using promises (39ms)
        ✓ should trace a prepared statement using a callback (209ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (216ms)
        ✓ should truncate long queries using promises (50ms)
        ✓ should do nothing when disabled using a callback (196ms)
        ✓ should do nothing when disabled using promises (41ms)
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (961ms)
        ✓ should trace a basic query using promises (42ms)
        ✓ should trace a prepared statement using a callback (210ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (221ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (213ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.7.0
updated 1 package and audited 913 packages in 6.041s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:51:06.114Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:51:06.116Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:51:06.116Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:51:06.117Z appoptics:debug using context provider: ace-context
2022-02-23T04:51:06.184Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:51:06.487Z appoptics:patching patched crypto 
2022-02-23T04:51:06.543Z appoptics:patching patched https 
2022-02-23T04:51:06.543Z appoptics:patching patched http 
2022-02-23T04:51:06.586Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:51:06.587Z appoptics:patching patched fs 
2022-02-23T04:51:06.612Z appoptics:patching patched pg 8.7.0
2022-02-23T04:51:06.644Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.7.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.7.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (172ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (43ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (69ms)
        ✓ should trace a basic query using callback (935ms)
        ✓ should trace a basic query using promises (67ms)
        ✓ should trace a prepared statement using a callback (186ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (57ms)
        ✓ should truncate long queries using a callback (196ms)
        ✓ should truncate long queries using promises (58ms)
        ✓ should do nothing when disabled using a callback (188ms)
        ✓ should do nothing when disabled using promises (62ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (81ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (40ms)
        ✓ should trace a basic query using promises (54ms)
        ✓ should trace a prepared statement using a callback (197ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (49ms)
        ✓ should truncate long queries using a callback (205ms)
        ✓ should truncate long queries using promises (52ms)
        ✓ should do nothing when disabled using a callback (194ms)
        ✓ should do nothing when disabled using promises (53ms)
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (950ms)
        ✓ should trace a basic query using promises (51ms)
        ✓ should trace a prepared statement using a callback (202ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (43ms)
        ✓ should truncate long queries using a callback (212ms)
        ✓ should truncate long queries using promises (41ms)
        ✓ should do nothing when disabled using a callback (207ms)
        ✓ should do nothing when disabled using promises (42ms)


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.7.1
updated 1 package and audited 913 packages in 6.026s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:51:19.943Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:51:19.945Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:51:19.945Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:51:19.946Z appoptics:debug using context provider: ace-context
2022-02-23T04:51:20.011Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:51:20.236Z appoptics:patching patched crypto 
2022-02-23T04:51:20.268Z appoptics:patching patched https 
2022-02-23T04:51:20.268Z appoptics:patching patched http 
2022-02-23T04:51:20.305Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:51:20.306Z appoptics:patching patched fs 
2022-02-23T04:51:20.322Z appoptics:patching patched pg 8.7.1
2022-02-23T04:51:20.357Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.7.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.7.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (148ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (43ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (39ms)
        ✓ should trace a basic query using callback (965ms)
        ✓ should trace a basic query using promises (38ms)
        ✓ should trace a prepared statement using a callback (215ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (223ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (215ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (84ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (218ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (226ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (216ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (971ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (223ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (238ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (229ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.7.3
updated 1 package and audited 913 packages in 5.661s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:51:33.231Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:51:33.232Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:51:33.233Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:51:33.233Z appoptics:debug using context provider: ace-context
2022-02-23T04:51:33.296Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:51:33.505Z appoptics:patching patched crypto 
2022-02-23T04:51:33.541Z appoptics:patching patched https 
2022-02-23T04:51:33.541Z appoptics:patching patched http 
2022-02-23T04:51:33.585Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:51:33.586Z appoptics:patching patched fs 
2022-02-23T04:51:33.603Z appoptics:patching patched pg 8.7.3
2022-02-23T04:51:33.640Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.7.3 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.7.3
      ✓ UDP might lose a message
      ✓ should create the pg testing context (152ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (42ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (48ms)
        ✓ should trace a basic query using callback (957ms)
        ✓ should trace a basic query using promises (45ms)
        ✓ should trace a prepared statement using a callback (206ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (39ms)
        ✓ should truncate long queries using a callback (215ms)
        ✓ should truncate long queries using promises (39ms)
        ✓ should do nothing when disabled using a callback (215ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (72ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (218ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (230ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (219ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (974ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (225ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (234ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (227ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.7.3
updated 1 package and audited 913 packages in 5.108s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
