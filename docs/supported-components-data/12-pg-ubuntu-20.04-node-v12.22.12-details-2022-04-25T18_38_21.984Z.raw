npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@4.5.5
added 4 packages from 7 contributors, removed 3 packages, updated 7 packages and audited 936 packages in 6.867s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:38:30.655Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:38:30.655Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:38:30.656Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:38:30.656Z appoptics:debug using context provider: ace-context
2022-04-25T18:38:30.715Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:38:30.866Z appoptics:patching patched crypto 
2022-04-25T18:38:30.888Z appoptics:patching patched https 
2022-04-25T18:38:30.888Z appoptics:patching patched http 
2022-04-25T18:38:30.918Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:38:30.919Z appoptics:patching patched fs 
2022-04-25T18:38:30.936Z appoptics:patching probes.generic-pool "acquire()" not found
2022-04-25T18:38:30.936Z appoptics:patching patched generic-pool 2.1.1
2022-04-25T18:38:30.938Z appoptics:patching patched pg 4.5.5
2022-04-25T18:38:30.970Z appoptics:debug starting runtimeMetrics


  probes.pg 4.5.5
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (16ms)
  1 failing

  1) probes.pg 4.5.5
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:426:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:345:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:105:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@4.5.6
updated 2 packages and audited 936 packages in 5.715s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:38:38.033Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:38:38.034Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:38:38.034Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:38:38.035Z appoptics:debug using context provider: ace-context
2022-04-25T18:38:38.098Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:38:38.262Z appoptics:patching patched crypto 
2022-04-25T18:38:38.282Z appoptics:patching patched https 
2022-04-25T18:38:38.282Z appoptics:patching patched http 
2022-04-25T18:38:38.317Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:38:38.318Z appoptics:patching patched fs 
2022-04-25T18:38:38.339Z appoptics:patching patched generic-pool 2.4.2
2022-04-25T18:38:38.341Z appoptics:patching patched pg 4.5.6
2022-04-25T18:38:38.378Z appoptics:debug starting runtimeMetrics


  probes.pg 4.5.6
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (19ms)
  1 failing

  1) probes.pg 4.5.6
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:426:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:345:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:105:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@4.5.7
added 1 package from 2 contributors, updated 1 package and audited 937 packages in 5.178s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:38:44.778Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:38:44.778Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:38:44.779Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:38:44.779Z appoptics:debug using context provider: ace-context
2022-04-25T18:38:44.852Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:38:45.039Z appoptics:patching patched crypto 
2022-04-25T18:38:45.071Z appoptics:patching patched https 
2022-04-25T18:38:45.072Z appoptics:patching patched http 
2022-04-25T18:38:45.104Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:38:45.105Z appoptics:patching patched fs 
2022-04-25T18:38:45.124Z appoptics:patching patched generic-pool 2.4.2
2022-04-25T18:38:45.126Z appoptics:patching patched pg 4.5.7
2022-04-25T18:38:45.151Z appoptics:debug starting runtimeMetrics


  probes.pg 4.5.7
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (20ms)
  1 failing

  1) probes.pg 4.5.7
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:426:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:345:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:105:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@5.0.0
removed 1 package, updated 3 packages and audited 936 packages in 5.334s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:38:51.723Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:38:51.723Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:38:51.723Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:38:51.724Z appoptics:debug using context provider: ace-context
2022-04-25T18:38:51.780Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:38:51.924Z appoptics:patching patched crypto 
2022-04-25T18:38:51.944Z appoptics:patching patched https 
2022-04-25T18:38:51.944Z appoptics:patching patched http 
2022-04-25T18:38:51.974Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:38:51.974Z appoptics:patching patched fs 
2022-04-25T18:38:51.989Z appoptics:patching patched generic-pool 2.4.2
2022-04-25T18:38:51.990Z appoptics:patching patched pg 5.0.0
2022-04-25T18:38:52.015Z appoptics:debug starting runtimeMetrics


  probes.pg 5.0.0
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (17ms)
  1 failing

  1) probes.pg 5.0.0
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:426:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:345:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:105:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@5.1.0
updated 2 packages and audited 936 packages in 4.75s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:38:57.829Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:38:57.830Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:38:57.830Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:38:57.830Z appoptics:debug using context provider: ace-context
2022-04-25T18:38:57.886Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:38:58.034Z appoptics:patching patched crypto 
2022-04-25T18:38:58.056Z appoptics:patching patched https 
2022-04-25T18:38:58.056Z appoptics:patching patched http 
2022-04-25T18:38:58.084Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:38:58.084Z appoptics:patching patched fs 
2022-04-25T18:38:58.100Z appoptics:patching patched generic-pool 2.4.2
2022-04-25T18:38:58.101Z appoptics:patching patched pg 5.1.0
2022-04-25T18:38:58.122Z appoptics:debug starting runtimeMetrics


  probes.pg 5.1.0
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (17ms)
  1 failing

  1) probes.pg 5.1.0
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:426:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:345:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:105:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@5.2.1
added 4 packages from 16 contributors, removed 1 package, updated 1 package and audited 939 packages in 6.565s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:39:05.985Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:39:05.986Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:39:05.986Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:39:05.987Z appoptics:debug using context provider: ace-context
2022-04-25T18:39:06.055Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:39:06.246Z appoptics:patching patched crypto 
2022-04-25T18:39:06.275Z appoptics:patching patched https 
2022-04-25T18:39:06.276Z appoptics:patching patched http 
2022-04-25T18:39:06.321Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:39:06.322Z appoptics:patching patched fs 
2022-04-25T18:39:06.341Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:39:06.343Z appoptics:patching patched pg 5.2.1
2022-04-25T18:39:06.367Z appoptics:debug starting runtimeMetrics


  probes.pg 5.2.1
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (20ms)
  1 failing

  1) probes.pg 5.2.1
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:426:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:345:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:105:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.0.0
removed 1 package, updated 1 package and audited 938 packages in 4.913s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:39:12.456Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:39:12.456Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:39:12.456Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:39:12.457Z appoptics:debug using context provider: ace-context
2022-04-25T18:39:12.513Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:39:12.660Z appoptics:patching patched crypto 
2022-04-25T18:39:12.681Z appoptics:patching patched https 
2022-04-25T18:39:12.686Z appoptics:patching patched http 
2022-04-25T18:39:12.712Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:39:12.713Z appoptics:patching patched fs 
2022-04-25T18:39:12.728Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:39:12.729Z appoptics:patching patched pg 6.0.0
2022-04-25T18:39:12.751Z appoptics:debug starting runtimeMetrics


  probes.pg 6.0.0
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (20ms)
  1 failing

  1) probes.pg 6.0.0
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:430:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:349:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:109:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.0.1
updated 1 package and audited 938 packages in 5.692s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:39:19.613Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:39:19.614Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:39:19.614Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:39:19.615Z appoptics:debug using context provider: ace-context
2022-04-25T18:39:19.694Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:39:19.875Z appoptics:patching patched crypto 
2022-04-25T18:39:19.896Z appoptics:patching patched https 
2022-04-25T18:39:19.897Z appoptics:patching patched http 
2022-04-25T18:39:19.928Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:39:19.929Z appoptics:patching patched fs 
2022-04-25T18:39:19.947Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:39:19.949Z appoptics:patching patched pg 6.0.1
2022-04-25T18:39:19.977Z appoptics:debug starting runtimeMetrics


  probes.pg 6.0.1
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (17ms)
  1 failing

  1) probes.pg 6.0.1
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:430:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:349:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:109:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.0.2
updated 1 package and audited 938 packages in 5.259s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:39:26.439Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:39:26.439Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:39:26.439Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:39:26.440Z appoptics:debug using context provider: ace-context
2022-04-25T18:39:26.496Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:39:26.636Z appoptics:patching patched crypto 
2022-04-25T18:39:26.661Z appoptics:patching patched https 
2022-04-25T18:39:26.662Z appoptics:patching patched http 
2022-04-25T18:39:26.688Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:39:26.689Z appoptics:patching patched fs 
2022-04-25T18:39:26.703Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:39:26.705Z appoptics:patching patched pg 6.0.2
2022-04-25T18:39:26.728Z appoptics:debug starting runtimeMetrics


  probes.pg 6.0.2
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (21ms)
  1 failing

  1) probes.pg 6.0.2
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:438:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:357:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:117:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.0.3
updated 1 package and audited 938 packages in 5.135s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:39:33.042Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:39:33.043Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:39:33.043Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:39:33.044Z appoptics:debug using context provider: ace-context
2022-04-25T18:39:33.100Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:39:33.242Z appoptics:patching patched crypto 
2022-04-25T18:39:33.270Z appoptics:patching patched https 
2022-04-25T18:39:33.271Z appoptics:patching patched http 
2022-04-25T18:39:33.296Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:39:33.296Z appoptics:patching patched fs 
2022-04-25T18:39:33.311Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:39:33.313Z appoptics:patching patched pg 6.0.3
2022-04-25T18:39:33.337Z appoptics:debug starting runtimeMetrics


  probes.pg 6.0.3
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (16ms)
  1 failing

  1) probes.pg 6.0.3
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:438:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:357:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:117:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.0.4
added 1 package from 1 contributor, removed 2 packages, updated 2 packages and audited 937 packages in 5.525s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:39:40.117Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:39:40.118Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:39:40.118Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:39:40.118Z appoptics:debug using context provider: ace-context
2022-04-25T18:39:40.191Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:39:40.359Z appoptics:patching patched crypto 
2022-04-25T18:39:40.400Z appoptics:patching patched https 
2022-04-25T18:39:40.401Z appoptics:patching patched http 
2022-04-25T18:39:40.432Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:39:40.433Z appoptics:patching patched fs 
2022-04-25T18:39:40.448Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:39:40.450Z appoptics:patching patched pg 6.0.4
2022-04-25T18:39:40.480Z appoptics:debug starting runtimeMetrics


  probes.pg 6.0.4
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (18ms)
  1 failing

  1) probes.pg 6.0.4
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:438:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:357:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:117:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.0.5
added 1 package from 2 contributors, updated 1 package and audited 938 packages in 4.812s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:39:46.663Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:39:46.667Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:39:46.667Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:39:46.668Z appoptics:debug using context provider: ace-context
2022-04-25T18:39:46.732Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:39:46.950Z appoptics:patching patched crypto 
2022-04-25T18:39:46.996Z appoptics:patching patched https 
2022-04-25T18:39:46.996Z appoptics:patching patched http 
2022-04-25T18:39:47.031Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:39:47.031Z appoptics:patching patched fs 
2022-04-25T18:39:47.048Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:39:47.050Z appoptics:patching patched pg 6.0.5
2022-04-25T18:39:47.085Z appoptics:debug starting runtimeMetrics


  probes.pg 6.0.5
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (30ms)
  1 failing

  1) probes.pg 6.0.5
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:438:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:357:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:117:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.1.0
removed 1 package, updated 1 package and audited 937 packages in 4.847s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:39:53.216Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:39:53.217Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:39:53.217Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:39:53.218Z appoptics:debug using context provider: ace-context
2022-04-25T18:39:53.294Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:39:53.466Z appoptics:patching patched crypto 
2022-04-25T18:39:53.507Z appoptics:patching patched https 
2022-04-25T18:39:53.508Z appoptics:patching patched http 
2022-04-25T18:39:53.539Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:39:53.539Z appoptics:patching patched fs 
2022-04-25T18:39:53.555Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:39:53.556Z appoptics:patching patched pg 6.1.0
2022-04-25T18:39:53.586Z appoptics:debug starting runtimeMetrics


  probes.pg 6.1.0
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (24ms)
  1 failing

  1) probes.pg 6.1.0
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:441:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:360:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:117:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.1.1
updated 1 package and audited 937 packages in 5.238s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:40:00.072Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:40:00.073Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:40:00.073Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:40:00.074Z appoptics:debug using context provider: ace-context
2022-04-25T18:40:00.138Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:40:00.338Z appoptics:patching patched crypto 
2022-04-25T18:40:00.359Z appoptics:patching patched https 
2022-04-25T18:40:00.359Z appoptics:patching patched http 
2022-04-25T18:40:00.389Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:40:00.389Z appoptics:patching patched fs 
2022-04-25T18:40:00.406Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:40:00.408Z appoptics:patching patched pg 6.1.1
2022-04-25T18:40:00.435Z appoptics:debug starting runtimeMetrics


  probes.pg 6.1.1
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (20ms)
  1 failing

  1) probes.pg 6.1.1
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:441:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:360:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:117:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.1.2
updated 1 package and audited 937 packages in 5.769s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:40:07.475Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:40:07.475Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:40:07.475Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:40:07.476Z appoptics:debug using context provider: ace-context
2022-04-25T18:40:07.533Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:40:07.681Z appoptics:patching patched crypto 
2022-04-25T18:40:07.701Z appoptics:patching patched https 
2022-04-25T18:40:07.701Z appoptics:patching patched http 
2022-04-25T18:40:07.729Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:40:07.730Z appoptics:patching patched fs 
2022-04-25T18:40:07.745Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:40:07.747Z appoptics:patching patched pg 6.1.2
2022-04-25T18:40:07.771Z appoptics:debug starting runtimeMetrics


  probes.pg 6.1.2
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (22ms)
  1 failing

  1) probes.pg 6.1.2
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:441:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:360:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:117:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.1.3
updated 1 package and audited 937 packages in 4.704s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:40:13.613Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:40:13.614Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:40:13.614Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:40:13.615Z appoptics:debug using context provider: ace-context
2022-04-25T18:40:13.671Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:40:13.813Z appoptics:patching patched crypto 
2022-04-25T18:40:13.834Z appoptics:patching patched https 
2022-04-25T18:40:13.835Z appoptics:patching patched http 
2022-04-25T18:40:13.863Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:40:13.863Z appoptics:patching patched fs 
2022-04-25T18:40:13.884Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:40:13.886Z appoptics:patching patched pg 6.1.3
2022-04-25T18:40:13.911Z appoptics:debug starting runtimeMetrics


  probes.pg 6.1.3
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (17ms)
  1 failing

  1) probes.pg 6.1.3
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:456:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:375:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:132:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.1.4
updated 1 package and audited 937 packages in 5.521s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:40:20.682Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:40:20.682Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:40:20.682Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:40:20.683Z appoptics:debug using context provider: ace-context
2022-04-25T18:40:20.740Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:40:20.886Z appoptics:patching patched crypto 
2022-04-25T18:40:20.906Z appoptics:patching patched https 
2022-04-25T18:40:20.907Z appoptics:patching patched http 
2022-04-25T18:40:20.935Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:40:20.935Z appoptics:patching patched fs 
2022-04-25T18:40:20.950Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:40:20.952Z appoptics:patching patched pg 6.1.4
2022-04-25T18:40:20.977Z appoptics:debug starting runtimeMetrics


  probes.pg 6.1.4
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (18ms)
  1 failing

  1) probes.pg 6.1.4
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:456:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:375:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:132:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.1.5
updated 1 package and audited 937 packages in 4.762s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:40:26.936Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:40:26.937Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:40:26.937Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:40:26.937Z appoptics:debug using context provider: ace-context
2022-04-25T18:40:26.993Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:40:27.133Z appoptics:patching patched crypto 
2022-04-25T18:40:27.154Z appoptics:patching patched https 
2022-04-25T18:40:27.154Z appoptics:patching patched http 
2022-04-25T18:40:27.187Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:40:27.187Z appoptics:patching patched fs 
2022-04-25T18:40:27.202Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:40:27.204Z appoptics:patching patched pg 6.1.5
2022-04-25T18:40:27.229Z appoptics:debug starting runtimeMetrics


  probes.pg 6.1.5
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (29ms)
  1 failing

  1) probes.pg 6.1.5
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:456:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:375:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:132:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.1.6
added 1 package from 2 contributors, updated 1 package and audited 938 packages in 5.425s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:40:33.796Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:40:33.796Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:40:33.797Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:40:33.797Z appoptics:debug using context provider: ace-context
2022-04-25T18:40:33.855Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:40:34.002Z appoptics:patching patched crypto 
2022-04-25T18:40:34.021Z appoptics:patching patched https 
2022-04-25T18:40:34.021Z appoptics:patching patched http 
2022-04-25T18:40:34.046Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:40:34.050Z appoptics:patching patched fs 
2022-04-25T18:40:34.066Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:40:34.068Z appoptics:patching patched pg 6.1.6
2022-04-25T18:40:34.093Z appoptics:debug starting runtimeMetrics


  probes.pg 6.1.6
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (16ms)
  1 failing

  1) probes.pg 6.1.6
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:456:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:375:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:132:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.2.2
removed 1 package, updated 2 packages and audited 937 packages in 5.122s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:40:40.298Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:40:40.299Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:40:40.299Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:40:40.299Z appoptics:debug using context provider: ace-context
2022-04-25T18:40:40.361Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:40:40.522Z appoptics:patching patched crypto 
2022-04-25T18:40:40.545Z appoptics:patching patched https 
2022-04-25T18:40:40.546Z appoptics:patching patched http 
2022-04-25T18:40:40.575Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:40:40.576Z appoptics:patching patched fs 
2022-04-25T18:40:40.592Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:40:40.594Z appoptics:patching patched pg 6.2.2
2022-04-25T18:40:40.618Z appoptics:debug starting runtimeMetrics


  probes.pg 6.2.2
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (17ms)
  1 failing

  1) probes.pg 6.2.2
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:459:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:375:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:132:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.2.3
updated 1 package and audited 937 packages in 6.129s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:40:47.873Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:40:47.874Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:40:47.874Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:40:47.875Z appoptics:debug using context provider: ace-context
2022-04-25T18:40:47.938Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:40:48.084Z appoptics:patching patched crypto 
2022-04-25T18:40:48.104Z appoptics:patching patched https 
2022-04-25T18:40:48.104Z appoptics:patching patched http 
2022-04-25T18:40:48.134Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:40:48.134Z appoptics:patching patched fs 
2022-04-25T18:40:48.150Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:40:48.152Z appoptics:patching patched pg 6.2.3
2022-04-25T18:40:48.176Z appoptics:debug starting runtimeMetrics


  probes.pg 6.2.3
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (16ms)
  1 failing

  1) probes.pg 6.2.3
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:459:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:375:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:132:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.2.4
updated 1 package and audited 937 packages in 4.566s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:40:53.894Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:40:53.895Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:40:53.895Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:40:53.896Z appoptics:debug using context provider: ace-context
2022-04-25T18:40:53.953Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:40:54.128Z appoptics:patching patched crypto 
2022-04-25T18:40:54.168Z appoptics:patching patched https 
2022-04-25T18:40:54.168Z appoptics:patching patched http 
2022-04-25T18:40:54.201Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:40:54.201Z appoptics:patching patched fs 
2022-04-25T18:40:54.220Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:40:54.222Z appoptics:patching patched pg 6.2.4
2022-04-25T18:40:54.252Z appoptics:debug starting runtimeMetrics


  probes.pg 6.2.4
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (20ms)
  1 failing

  1) probes.pg 6.2.4
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.2.5
added 1 package from 2 contributors, updated 1 package and audited 938 packages in 5.922s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:41:01.605Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:41:01.607Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:41:01.607Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:41:01.609Z appoptics:debug using context provider: ace-context
2022-04-25T18:41:01.678Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:41:01.861Z appoptics:patching patched crypto 
2022-04-25T18:41:01.882Z appoptics:patching patched https 
2022-04-25T18:41:01.882Z appoptics:patching patched http 
2022-04-25T18:41:01.916Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:41:01.917Z appoptics:patching patched fs 
2022-04-25T18:41:01.932Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:41:01.934Z appoptics:patching patched pg 6.2.5
2022-04-25T18:41:01.957Z appoptics:debug starting runtimeMetrics


  probes.pg 6.2.5
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (16ms)
  1 failing

  1) probes.pg 6.2.5
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.3.0
removed 1 package, updated 1 package and audited 937 packages in 4.843s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:41:08.110Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:41:08.111Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:41:08.111Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:41:08.112Z appoptics:debug using context provider: ace-context
2022-04-25T18:41:08.238Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:41:08.442Z appoptics:patching patched crypto 
2022-04-25T18:41:08.490Z appoptics:patching patched https 
2022-04-25T18:41:08.490Z appoptics:patching patched http 
2022-04-25T18:41:08.525Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:41:08.526Z appoptics:patching patched fs 
2022-04-25T18:41:08.548Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:41:08.551Z appoptics:patching patched pg 6.3.0
2022-04-25T18:41:08.593Z appoptics:debug starting runtimeMetrics


  probes.pg 6.3.0
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (23ms)
  1 failing

  1) probes.pg 6.3.0
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.3.1
updated 1 package and audited 937 packages in 5.533s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:41:15.327Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:41:15.328Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:41:15.328Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:41:15.328Z appoptics:debug using context provider: ace-context
2022-04-25T18:41:15.384Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:41:15.527Z appoptics:patching patched crypto 
2022-04-25T18:41:15.546Z appoptics:patching patched https 
2022-04-25T18:41:15.546Z appoptics:patching patched http 
2022-04-25T18:41:15.574Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:41:15.574Z appoptics:patching patched fs 
2022-04-25T18:41:15.590Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:41:15.592Z appoptics:patching patched pg 6.3.1
2022-04-25T18:41:15.615Z appoptics:debug starting runtimeMetrics


  probes.pg 6.3.1
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (16ms)
  1 failing

  1) probes.pg 6.3.1
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.3.3
added 1 package from 2 contributors, updated 1 package and audited 938 packages in 5.308s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:41:22.483Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:41:22.484Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:41:22.484Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:41:22.485Z appoptics:debug using context provider: ace-context
2022-04-25T18:41:22.543Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:41:22.687Z appoptics:patching patched crypto 
2022-04-25T18:41:22.706Z appoptics:patching patched https 
2022-04-25T18:41:22.707Z appoptics:patching patched http 
2022-04-25T18:41:22.732Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:41:22.736Z appoptics:patching patched fs 
2022-04-25T18:41:22.752Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:41:22.754Z appoptics:patching patched pg 6.3.3
2022-04-25T18:41:22.778Z appoptics:debug starting runtimeMetrics


  probes.pg 6.3.3
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (17ms)
  1 failing

  1) probes.pg 6.3.3
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.4.0
removed 1 package, updated 1 package and audited 937 packages in 5.423s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:41:29.331Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:41:29.332Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:41:29.332Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:41:29.332Z appoptics:debug using context provider: ace-context
2022-04-25T18:41:29.403Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:41:29.568Z appoptics:patching patched crypto 
2022-04-25T18:41:29.611Z appoptics:patching patched https 
2022-04-25T18:41:29.612Z appoptics:patching patched http 
2022-04-25T18:41:29.637Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:41:29.637Z appoptics:patching patched fs 
2022-04-25T18:41:29.653Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:41:29.655Z appoptics:patching patched pg 6.4.0
2022-04-25T18:41:29.679Z appoptics:debug starting runtimeMetrics


  probes.pg 6.4.0
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (18ms)
  1 failing

  1) probes.pg 6.4.0
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.4.1
updated 1 package and audited 937 packages in 5.199s

86 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (2 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:41:35.965Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:41:35.966Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:41:35.966Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:41:35.967Z appoptics:debug using context provider: ace-context
2022-04-25T18:41:36.025Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:41:36.185Z appoptics:patching patched crypto 
2022-04-25T18:41:36.226Z appoptics:patching patched https 
2022-04-25T18:41:36.227Z appoptics:patching patched http 
2022-04-25T18:41:36.264Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:41:36.265Z appoptics:patching patched fs 
2022-04-25T18:41:36.282Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:41:36.284Z appoptics:patching patched pg 6.4.1
2022-04-25T18:41:36.309Z appoptics:debug starting runtimeMetrics


  probes.pg 6.4.1
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (17ms)
  1 failing

  1) probes.pg 6.4.1
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.4.2
added 1 package from 2 contributors, updated 1 package and audited 938 packages in 5.583s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:41:43.189Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:41:43.189Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:41:43.189Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:41:43.190Z appoptics:debug using context provider: ace-context
2022-04-25T18:41:43.248Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:41:43.395Z appoptics:patching patched crypto 
2022-04-25T18:41:43.417Z appoptics:patching patched https 
2022-04-25T18:41:43.417Z appoptics:patching patched http 
2022-04-25T18:41:43.449Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:41:43.449Z appoptics:patching patched fs 
2022-04-25T18:41:43.465Z appoptics:patching patched generic-pool 2.4.3
2022-04-25T18:41:43.467Z appoptics:patching patched pg 6.4.2
2022-04-25T18:41:43.490Z appoptics:debug starting runtimeMetrics


  probes.pg 6.4.2
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (16ms)
  1 failing

  1) probes.pg 6.4.2
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.5.0
removed 3 packages, updated 3 packages and audited 935 packages in 5.721s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:41:50.457Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:41:50.458Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:41:50.458Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:41:50.458Z appoptics:debug using context provider: ace-context
2022-04-25T18:41:50.517Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:41:50.665Z appoptics:patching patched crypto 
2022-04-25T18:41:50.685Z appoptics:patching patched https 
2022-04-25T18:41:50.686Z appoptics:patching patched http 
2022-04-25T18:41:50.720Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:41:50.720Z appoptics:patching patched fs 
2022-04-25T18:41:50.728Z appoptics:patching patched pg 7.5.0
2022-04-25T18:41:50.755Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.5.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.5.0
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (110ms)
  64 failing

  1) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)

  2) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  3) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  4) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  5) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  6) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  7) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  8) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  9) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  10) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  11) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  12) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  13) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  14) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  15) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  16) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  17) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  18) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  19) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  20) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  21) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  22) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  23) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  24) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  25) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  26) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  27) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  28) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  29) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  30) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  31) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  32) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  33) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)

  34) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  35) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  36) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  37) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  38) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  39) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  40) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  41) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  42) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  43) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  44) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  45) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  46) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  47) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  48) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  49) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  50) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  51) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  52) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  53) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  54) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  55) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  56) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  57) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  58) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  59) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  60) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  61) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  62) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  63) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  64) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.6.0
updated 1 package and audited 935 packages in 4.795s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:41:56.766Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:41:56.767Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:41:56.767Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:41:56.768Z appoptics:debug using context provider: ace-context
2022-04-25T18:41:56.825Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:41:57.025Z appoptics:patching patched crypto 
2022-04-25T18:41:57.050Z appoptics:patching patched https 
2022-04-25T18:41:57.051Z appoptics:patching patched http 
2022-04-25T18:41:57.151Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:41:57.151Z appoptics:patching patched fs 
2022-04-25T18:41:57.164Z appoptics:patching patched pg 7.6.0
2022-04-25T18:41:57.219Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.6.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.6.0
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (143ms)
  64 failing

  1) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)

  2) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  3) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  4) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  5) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  6) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  7) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  8) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  9) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  10) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  11) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  12) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  13) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  14) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  15) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  16) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  17) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  18) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  19) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  20) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  21) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  22) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  23) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  24) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  25) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  26) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  27) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  28) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  29) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  30) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  31) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  32) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  33) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)

  34) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  35) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  36) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  37) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  38) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  39) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  40) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  41) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  42) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  43) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  44) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  45) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  46) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  47) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  48) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  49) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  50) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  51) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  52) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  53) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  54) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  55) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  56) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  57) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  58) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  59) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  60) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  61) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  62) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  63) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  64) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.6.1
updated 2 packages and audited 935 packages in 5.923s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:42:04.582Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:42:04.583Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:42:04.583Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:42:04.583Z appoptics:debug using context provider: ace-context
2022-04-25T18:42:04.636Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:42:04.797Z appoptics:patching patched crypto 
2022-04-25T18:42:04.817Z appoptics:patching patched https 
2022-04-25T18:42:04.817Z appoptics:patching patched http 
2022-04-25T18:42:04.850Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:42:04.851Z appoptics:patching patched fs 
2022-04-25T18:42:04.859Z appoptics:patching patched pg 7.6.1
2022-04-25T18:42:04.887Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.6.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.6.1
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (121ms)
  64 failing

  1) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)

  2) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  3) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  4) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  5) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  6) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  7) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  8) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  9) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  10) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  11) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  12) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  13) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  14) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  15) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  16) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  17) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  18) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  19) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  20) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  21) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  22) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  23) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  24) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  25) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  26) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  27) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  28) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  29) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  30) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  31) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  32) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  33) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)

  34) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  35) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  36) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  37) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  38) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  39) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  40) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  41) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  42) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  43) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  44) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  45) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  46) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  47) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  48) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  49) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  50) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  51) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  52) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  53) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  54) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  55) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  56) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  57) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  58) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  59) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  60) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  61) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  62) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  63) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  64) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.7.0
updated 1 package and audited 935 packages in 5.431s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:42:12.174Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:42:12.175Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:42:12.175Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:42:12.176Z appoptics:debug using context provider: ace-context
2022-04-25T18:42:12.291Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:42:12.652Z appoptics:patching patched crypto 
2022-04-25T18:42:12.721Z appoptics:patching patched https 
2022-04-25T18:42:12.721Z appoptics:patching patched http 
2022-04-25T18:42:12.789Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:42:12.789Z appoptics:patching patched fs 
2022-04-25T18:42:12.802Z appoptics:patching patched pg 7.7.0
2022-04-25T18:42:12.853Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.7.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.7.0
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (179ms)
  64 failing

  1) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)

  2) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  3) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  4) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  5) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  6) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  7) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  8) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  9) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  10) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  11) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  12) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  13) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  14) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  15) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  16) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  17) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  18) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  19) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  20) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  21) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  22) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  23) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  24) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  25) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  26) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  27) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  28) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  29) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  30) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  31) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  32) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  33) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)

  34) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  35) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  36) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  37) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  38) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  39) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  40) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  41) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  42) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  43) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  44) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  45) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  46) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  47) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  48) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  49) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  50) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  51) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  52) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  53) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  54) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  55) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  56) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  57) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  58) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  59) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  60) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  61) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  62) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  63) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  64) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.7.1
updated 1 package and audited 935 packages in 4.849s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:42:19.265Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:42:19.265Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:42:19.265Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:42:19.266Z appoptics:debug using context provider: ace-context
2022-04-25T18:42:19.326Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:42:19.492Z appoptics:patching patched crypto 
2022-04-25T18:42:19.536Z appoptics:patching patched https 
2022-04-25T18:42:19.536Z appoptics:patching patched http 
2022-04-25T18:42:19.577Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:42:19.578Z appoptics:patching patched fs 
2022-04-25T18:42:19.587Z appoptics:patching patched pg 7.7.1
2022-04-25T18:42:19.624Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.7.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.7.1
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (104ms)
  64 failing

  1) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)

  2) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  3) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  4) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  5) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  6) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  7) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  8) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  9) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  10) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  11) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  12) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  13) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  14) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  15) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  16) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  17) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  18) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  19) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  20) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  21) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  22) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  23) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  24) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  25) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  26) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  27) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  28) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  29) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  30) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  31) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  32) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  33) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)

  34) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  35) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  36) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  37) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  38) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  39) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  40) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  41) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  42) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  43) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  44) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  45) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  46) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  47) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  48) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  49) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  50) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  51) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  52) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  53) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  54) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  55) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  56) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  57) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  58) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  59) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  60) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  61) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  62) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  63) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  64) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.8.0
updated 3 packages and audited 935 packages in 5.433s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:42:26.438Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:42:26.439Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:42:26.439Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:42:26.439Z appoptics:debug using context provider: ace-context
2022-04-25T18:42:26.497Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:42:26.643Z appoptics:patching patched crypto 
2022-04-25T18:42:26.676Z appoptics:patching patched https 
2022-04-25T18:42:26.676Z appoptics:patching patched http 
2022-04-25T18:42:26.705Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:42:26.705Z appoptics:patching patched fs 
2022-04-25T18:42:26.714Z appoptics:patching patched pg 7.8.0
2022-04-25T18:42:26.742Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.8.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.8.0
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (133ms)
  64 failing

  1) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:443:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:359:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:120:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)

  2) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  3) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  4) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  5) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  6) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  7) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  8) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  9) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  10) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  11) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  12) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  13) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  14) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  15) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  16) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  17) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  18) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  19) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  20) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  21) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  22) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  23) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  24) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  25) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  26) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  27) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  28) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  29) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  30) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  31) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  32) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  33) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:443:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:359:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:120:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)

  34) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  35) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  36) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  37) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  38) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  39) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  40) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  41) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  42) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  43) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  44) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  45) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  46) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  47) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  48) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  49) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  50) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  51) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  52) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  53) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  54) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  55) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  56) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  57) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  58) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  59) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  60) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  61) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  62) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  63) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  64) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.8.1
updated 2 packages and audited 935 packages in 4.858s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:42:32.835Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:42:32.836Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:42:32.836Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:42:32.837Z appoptics:debug using context provider: ace-context
2022-04-25T18:42:32.894Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:42:33.041Z appoptics:patching patched crypto 
2022-04-25T18:42:33.061Z appoptics:patching patched https 
2022-04-25T18:42:33.061Z appoptics:patching patched http 
2022-04-25T18:42:33.097Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:42:33.097Z appoptics:patching patched fs 
2022-04-25T18:42:33.106Z appoptics:patching patched pg 7.8.1
2022-04-25T18:42:33.134Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.8.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.8.1
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (123ms)
  64 failing

  1) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:443:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:359:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:120:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)

  2) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  3) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  4) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  5) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  6) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  7) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  8) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  9) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  10) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  11) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  12) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  13) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  14) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  15) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  16) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  17) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  18) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  19) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  20) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  21) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  22) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  23) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  24) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  25) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  26) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  27) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  28) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  29) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  30) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  31) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  32) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  33) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:443:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:359:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:120:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)

  34) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  35) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  36) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  37) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  38) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  39) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  40) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  41) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  42) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  43) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  44) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  45) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  46) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  47) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  48) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  49) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  50) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  51) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  52) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  53) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  54) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  55) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  56) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  57) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  58) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  59) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  60) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  61) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  62) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  63) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  64) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.8.2
updated 1 package and audited 935 packages in 5.422s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:42:39.799Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:42:39.799Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:42:39.800Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:42:39.800Z appoptics:debug using context provider: ace-context
2022-04-25T18:42:39.897Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:42:40.098Z appoptics:patching patched crypto 
2022-04-25T18:42:40.125Z appoptics:patching patched https 
2022-04-25T18:42:40.126Z appoptics:patching patched http 
2022-04-25T18:42:40.169Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:42:40.169Z appoptics:patching patched fs 
2022-04-25T18:42:40.177Z appoptics:patching patched pg 7.8.2
2022-04-25T18:42:40.204Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.8.2 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.8.2
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (112ms)
  64 failing

  1) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:443:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:359:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:120:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)

  2) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  3) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  4) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  5) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  6) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  7) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  8) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  9) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  10) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  11) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  12) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  13) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  14) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  15) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  16) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  17) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  18) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  19) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  20) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  21) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  22) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  23) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  24) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  25) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  26) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  27) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  28) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  29) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  30) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  31) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  32) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  33) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:443:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:359:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:120:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)

  34) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  35) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  36) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  37) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  38) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  39) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  40) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  41) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  42) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  43) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  44) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  45) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  46) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  47) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  48) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  49) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  50) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  51) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  52) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  53) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  54) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  55) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  56) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  57) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  58) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  59) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  60) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  61) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  62) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  63) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  64) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.9.0
updated 1 package and audited 935 packages in 4.381s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:42:45.908Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:42:45.909Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:42:45.909Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:42:45.910Z appoptics:debug using context provider: ace-context
2022-04-25T18:42:45.984Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:42:46.160Z appoptics:patching patched crypto 
2022-04-25T18:42:46.203Z appoptics:patching patched https 
2022-04-25T18:42:46.203Z appoptics:patching patched http 
2022-04-25T18:42:46.240Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:42:46.241Z appoptics:patching patched fs 
2022-04-25T18:42:46.253Z appoptics:patching patched pg 7.9.0
2022-04-25T18:42:46.280Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.9.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.9.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (317ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (968ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (218ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (232ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (219ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (91ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (40ms)
        ✓ should trace a basic query using promises (52ms)
        ✓ should trace a prepared statement using a callback (200ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (232ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (220ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (972ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (223ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (230ms)
        ✓ should truncate long queries using promises (40ms)
        ✓ should do nothing when disabled using a callback (206ms)
        ✓ should do nothing when disabled using promises (39ms)


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.10.0
updated 1 package and audited 935 packages in 5.239s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:42:58.849Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:42:58.850Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:42:58.850Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:42:58.851Z appoptics:debug using context provider: ace-context
2022-04-25T18:42:58.913Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:42:59.096Z appoptics:patching patched crypto 
2022-04-25T18:42:59.120Z appoptics:patching patched https 
2022-04-25T18:42:59.120Z appoptics:patching patched http 
2022-04-25T18:42:59.155Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:42:59.156Z appoptics:patching patched fs 
2022-04-25T18:42:59.164Z appoptics:patching patched pg 7.10.0
2022-04-25T18:42:59.194Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.10.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.10.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (156ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (38ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (974ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (225ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (231ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (220ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (132ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (53ms)
        ✓ should trace a basic query using promises (46ms)
        ✓ should trace a prepared statement using a callback (204ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (225ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (207ms)
        ✓ should do nothing when disabled using promises (44ms)
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (960ms)
        ✓ should trace a basic query using promises (42ms)
        ✓ should trace a prepared statement using a callback (210ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (221ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (210ms)
        ✓ should do nothing when disabled using promises (40ms)


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.11.0
updated 1 package and audited 935 packages in 4.907s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:43:11.074Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:43:11.075Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:43:11.075Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:43:11.076Z appoptics:debug using context provider: ace-context
2022-04-25T18:43:11.133Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:43:11.280Z appoptics:patching patched crypto 
2022-04-25T18:43:11.302Z appoptics:patching patched https 
2022-04-25T18:43:11.302Z appoptics:patching patched http 
2022-04-25T18:43:11.339Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:43:11.339Z appoptics:patching patched fs 
2022-04-25T18:43:11.348Z appoptics:patching patched pg 7.11.0
2022-04-25T18:43:11.374Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.11.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.11.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (108ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (40ms)
        ✓ should trace a basic query using callback (966ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (214ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (225ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (211ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (99ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (61ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (227ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (240ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (235ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (986ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (234ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (246ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (234ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.12.0
updated 1 package and audited 935 packages in 5.022s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:43:23.229Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:43:23.230Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:43:23.230Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:43:23.231Z appoptics:debug using context provider: ace-context
2022-04-25T18:43:23.318Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:43:23.519Z appoptics:patching patched crypto 
2022-04-25T18:43:23.546Z appoptics:patching patched https 
2022-04-25T18:43:23.546Z appoptics:patching patched http 
2022-04-25T18:43:23.583Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:43:23.583Z appoptics:patching patched fs 
2022-04-25T18:43:23.592Z appoptics:patching patched pg 7.12.0
2022-04-25T18:43:23.626Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.12.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.12.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (108ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (47ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (38ms)
        ✓ should trace a basic query using callback (967ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (225ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (234ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (229ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (104ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (38ms)
        ✓ should trace a basic query using promises (40ms)
        ✓ should trace a prepared statement using a callback (211ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (229ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (210ms)
        ✓ should do nothing when disabled using promises (39ms)
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (961ms)
        ✓ should trace a basic query using promises (39ms)
        ✓ should trace a prepared statement using a callback (213ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (223ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (217ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.12.1
updated 2 packages and audited 935 packages in 5.401s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:43:36.156Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:43:36.157Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:43:36.157Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:43:36.158Z appoptics:debug using context provider: ace-context
2022-04-25T18:43:36.219Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:43:36.448Z appoptics:patching patched crypto 
2022-04-25T18:43:36.491Z appoptics:patching patched https 
2022-04-25T18:43:36.492Z appoptics:patching patched http 
2022-04-25T18:43:36.552Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:43:36.553Z appoptics:patching patched fs 
2022-04-25T18:43:36.569Z appoptics:patching patched pg 7.12.1
2022-04-25T18:43:36.607Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.12.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.12.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (107ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (973ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (230ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (241ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (230ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (89ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (216ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (226ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (217ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (251ms)
        ✓ should trace a basic query using callback (968ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (219ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (227ms)
        ✓ should truncate long queries using promises (40ms)
        ✓ should do nothing when disabled using a callback (205ms)
        ✓ should do nothing when disabled using promises (45ms)


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.13.0
updated 1 package and audited 935 packages in 5.083s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:43:48.710Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:43:48.711Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:43:48.711Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:43:48.712Z appoptics:debug using context provider: ace-context
2022-04-25T18:43:48.785Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:43:48.960Z appoptics:patching patched crypto 
2022-04-25T18:43:49.010Z appoptics:patching patched https 
2022-04-25T18:43:49.011Z appoptics:patching patched http 
2022-04-25T18:43:49.053Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:43:49.053Z appoptics:patching patched fs 
2022-04-25T18:43:49.068Z appoptics:patching patched pg 7.13.0
2022-04-25T18:43:49.110Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.13.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.13.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (130ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (58ms)
        ✓ should trace a basic query using callback (945ms)
        ✓ should trace a basic query using promises (56ms)
        ✓ should trace a prepared statement using a callback (196ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (47ms)
        ✓ should truncate long queries using a callback (207ms)
        ✓ should truncate long queries using promises (51ms)
        ✓ should do nothing when disabled using a callback (197ms)
        ✓ should do nothing when disabled using promises (54ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (94ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (217ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (244ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (238ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (991ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (242ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (252ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (240ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.14.0
updated 1 package and audited 935 packages in 4.83s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:44:01.001Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:44:01.002Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:44:01.002Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:44:01.003Z appoptics:debug using context provider: ace-context
2022-04-25T18:44:01.079Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:44:01.258Z appoptics:patching patched crypto 
2022-04-25T18:44:01.328Z appoptics:patching patched https 
2022-04-25T18:44:01.328Z appoptics:patching patched http 
2022-04-25T18:44:01.398Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:44:01.398Z appoptics:patching patched fs 
2022-04-25T18:44:01.408Z appoptics:patching patched pg 7.14.0
2022-04-25T18:44:01.458Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.14.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.14.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (151ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (975ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (222ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (238ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (228ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (95ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (218ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (247ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (226ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (979ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (231ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (247ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (235ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.15.0
updated 1 package and audited 935 packages in 5.147s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:44:13.782Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:44:13.786Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:44:13.786Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:44:13.787Z appoptics:debug using context provider: ace-context
2022-04-25T18:44:13.967Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:44:14.241Z appoptics:patching patched crypto 
2022-04-25T18:44:14.291Z appoptics:patching patched https 
2022-04-25T18:44:14.291Z appoptics:patching patched http 
2022-04-25T18:44:14.358Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:44:14.360Z appoptics:patching patched fs 
2022-04-25T18:44:14.375Z appoptics:patching patched pg 7.15.0
2022-04-25T18:44:14.419Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.15.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.15.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (186ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (44ms)
        ✓ should trace a basic query using callback (961ms)
        ✓ should trace a basic query using promises (41ms)
        ✓ should trace a prepared statement using a callback (214ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (225ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (213ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (78ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (214ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (218ms)
        ✓ should truncate long queries using promises (39ms)
        ✓ should do nothing when disabled using a callback (207ms)
        ✓ should do nothing when disabled using promises (43ms)
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (959ms)
        ✓ should trace a basic query using promises (42ms)
        ✓ should trace a prepared statement using a callback (210ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (220ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (211ms)
        ✓ should do nothing when disabled using promises (41ms)


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.15.1
updated 1 package and audited 935 packages in 5.193s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:44:26.976Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:44:26.977Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:44:26.977Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:44:26.978Z appoptics:debug using context provider: ace-context
2022-04-25T18:44:27.057Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:44:27.233Z appoptics:patching patched crypto 
2022-04-25T18:44:27.279Z appoptics:patching patched https 
2022-04-25T18:44:27.279Z appoptics:patching patched http 
2022-04-25T18:44:27.318Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:44:27.318Z appoptics:patching patched fs 
2022-04-25T18:44:27.328Z appoptics:patching patched pg 7.15.1
2022-04-25T18:44:27.361Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.15.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.15.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (126ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (40ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (51ms)
        ✓ should trace a basic query using callback (953ms)
        ✓ should trace a basic query using promises (49ms)
        ✓ should trace a prepared statement using a callback (203ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (53ms)
        ✓ should truncate long queries using a callback (196ms)
        ✓ should truncate long queries using promises (55ms)
        ✓ should do nothing when disabled using a callback (190ms)
        ✓ should do nothing when disabled using promises (61ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (80ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises (39ms)
        ✓ should trace a prepared statement using a callback (214ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (234ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (224ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (973ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (224ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (239ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (220ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.15.2
updated 1 package and audited 935 packages in 5.078s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:44:39.612Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:44:39.612Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:44:39.612Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:44:39.613Z appoptics:debug using context provider: ace-context
2022-04-25T18:44:39.691Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:44:39.868Z appoptics:patching patched crypto 
2022-04-25T18:44:39.909Z appoptics:patching patched https 
2022-04-25T18:44:39.910Z appoptics:patching patched http 
2022-04-25T18:44:39.948Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:44:39.948Z appoptics:patching patched fs 
2022-04-25T18:44:39.957Z appoptics:patching patched pg 7.15.2
2022-04-25T18:44:39.990Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.15.2 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.15.2
      ✓ UDP might lose a message
      ✓ should create the pg testing context (138ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (70ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (65ms)
        ✓ should trace a basic query using callback (938ms)
        ✓ should trace a basic query using promises (65ms)
        ✓ should trace a prepared statement using a callback (189ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (54ms)
        ✓ should truncate long queries using a callback (200ms)
        ✓ should truncate long queries using promises (56ms)
        ✓ should do nothing when disabled using a callback (190ms)
        ✓ should do nothing when disabled using promises (61ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (78ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (42ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (220ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (233ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (224ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (974ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (227ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (237ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (228ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.16.0
added 1 package, updated 1 package and audited 936 packages in 5.39s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:44:52.532Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:44:52.533Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:44:52.533Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:44:52.534Z appoptics:debug using context provider: ace-context
2022-04-25T18:44:52.620Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:44:52.787Z appoptics:patching patched crypto 
2022-04-25T18:44:52.836Z appoptics:patching patched https 
2022-04-25T18:44:52.836Z appoptics:patching patched http 
2022-04-25T18:44:52.881Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:44:52.881Z appoptics:patching patched fs 
2022-04-25T18:44:52.892Z appoptics:patching patched pg 7.16.0
2022-04-25T18:44:52.928Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.16.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.16.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (129ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (44ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (975ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (224ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (234ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (224ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (79ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (58ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (216ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (244ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (220ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (971ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (223ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (230ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (220ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.16.1
updated 1 package and audited 936 packages in 5.844s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:45:05.823Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:45:05.824Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:45:05.824Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:45:05.825Z appoptics:debug using context provider: ace-context
2022-04-25T18:45:05.917Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:45:06.117Z appoptics:patching patched crypto 
2022-04-25T18:45:06.137Z appoptics:patching patched https 
2022-04-25T18:45:06.137Z appoptics:patching patched http 
2022-04-25T18:45:06.173Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:45:06.174Z appoptics:patching patched fs 
2022-04-25T18:45:06.183Z appoptics:patching patched pg 7.16.1
2022-04-25T18:45:06.209Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.16.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.16.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (95ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (38ms)
        ✓ should trace a basic query using callback (967ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (216ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (228ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (90ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (51ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (217ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (225ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (975ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (226ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (239ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (208ms)
        ✓ should do nothing when disabled using promises (42ms)


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.17.0
updated 1 package and audited 936 packages in 5.378s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:45:18.546Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:45:18.546Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:45:18.547Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:45:18.547Z appoptics:debug using context provider: ace-context
2022-04-25T18:45:18.604Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:45:18.769Z appoptics:patching patched crypto 
2022-04-25T18:45:18.803Z appoptics:patching patched https 
2022-04-25T18:45:18.804Z appoptics:patching patched http 
2022-04-25T18:45:18.850Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:45:18.851Z appoptics:patching patched fs 
2022-04-25T18:45:18.860Z appoptics:patching patched pg 7.17.0
2022-04-25T18:45:18.887Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.17.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.17.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (106ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (970ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (221ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (229ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (219ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (84ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (41ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (219ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (251ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (240ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (992ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (242ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (252ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (237ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.17.1
updated 1 package and audited 936 packages in 5.234s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:45:31.246Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:45:31.247Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:45:31.247Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:45:31.248Z appoptics:debug using context provider: ace-context
2022-04-25T18:45:31.390Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:45:31.641Z appoptics:patching patched crypto 
2022-04-25T18:45:31.677Z appoptics:patching patched https 
2022-04-25T18:45:31.678Z appoptics:patching patched http 
2022-04-25T18:45:31.767Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:45:31.767Z appoptics:patching patched fs 
2022-04-25T18:45:31.778Z appoptics:patching patched pg 7.17.1
2022-04-25T18:45:31.886Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.17.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.17.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (165ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (40ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (52ms)
        ✓ should trace a basic query using callback (953ms)
        ✓ should trace a basic query using promises (48ms)
        ✓ should trace a prepared statement using a callback (205ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (39ms)
        ✓ should truncate long queries using a callback (220ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (207ms)
        ✓ should do nothing when disabled using promises (45ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (70ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (45ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (217ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (229ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (216ms)
        ✓ should do nothing when disabled using promises (40ms)
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (962ms)
        ✓ should trace a basic query using promises (39ms)
        ✓ should trace a prepared statement using a callback (213ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (39ms)
        ✓ should truncate long queries using a callback (215ms)
        ✓ should truncate long queries using promises (42ms)
        ✓ should do nothing when disabled using a callback (205ms)
        ✓ should do nothing when disabled using promises (47ms)


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.18.0
updated 1 package and audited 936 packages in 6.22s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:45:45.122Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:45:45.123Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:45:45.123Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:45:45.123Z appoptics:debug using context provider: ace-context
2022-04-25T18:45:45.183Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:45:45.334Z appoptics:patching patched crypto 
2022-04-25T18:45:45.353Z appoptics:patching patched https 
2022-04-25T18:45:45.354Z appoptics:patching patched http 
2022-04-25T18:45:45.390Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:45:45.391Z appoptics:patching patched fs 
2022-04-25T18:45:45.400Z appoptics:patching patched pg 7.18.0
2022-04-25T18:45:45.432Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.18.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.18.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (110ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (39ms)
        ✓ should trace a basic query using callback (965ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (215ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (222ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (213ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (86ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (40ms)
        ✓ should trace a basic query using promises (39ms)
        ✓ should trace a prepared statement using a callback (212ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (228ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (219ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (968ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (220ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (230ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (216ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.18.1
updated 1 package and audited 936 packages in 6.002s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:45:58.473Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:45:58.474Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:45:58.474Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:45:58.475Z appoptics:debug using context provider: ace-context
2022-04-25T18:45:58.548Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:45:58.717Z appoptics:patching patched crypto 
2022-04-25T18:45:58.750Z appoptics:patching patched https 
2022-04-25T18:45:58.750Z appoptics:patching patched http 
2022-04-25T18:45:58.782Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:45:58.783Z appoptics:patching patched fs 
2022-04-25T18:45:58.792Z appoptics:patching patched pg 7.18.1
2022-04-25T18:45:58.819Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.18.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.18.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (113ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (38ms)
        ✓ should trace a basic query using callback (966ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (216ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (227ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (217ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (76ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises (45ms)
        ✓ should trace a prepared statement using a callback (206ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (233ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (216ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (965ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (216ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (224ms)
        ✓ should truncate long queries using promises (43ms)
        ✓ should do nothing when disabled using a callback (203ms)
        ✓ should do nothing when disabled using promises (43ms)


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.18.2
updated 1 package and audited 936 packages in 5.507s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:46:11.031Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:46:11.031Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:46:11.031Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:46:11.032Z appoptics:debug using context provider: ace-context
2022-04-25T18:46:11.089Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:46:11.235Z appoptics:patching patched crypto 
2022-04-25T18:46:11.255Z appoptics:patching patched https 
2022-04-25T18:46:11.255Z appoptics:patching patched http 
2022-04-25T18:46:11.290Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:46:11.291Z appoptics:patching patched fs 
2022-04-25T18:46:11.300Z appoptics:patching patched pg 7.18.2
2022-04-25T18:46:11.325Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.18.2 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.18.2
      ✓ UDP might lose a message
      ✓ should create the pg testing context (98ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (50ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (39ms)
        ✓ should trace a basic query using callback (964ms)
        ✓ should trace a basic query using promises (38ms)
        ✓ should trace a prepared statement using a callback (213ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (227ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (215ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (115ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (46ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (221ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (223ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (974ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (226ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (239ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (230ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.0.0
updated 2 packages and audited 936 packages in 5.117s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:46:23.382Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:46:23.383Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:46:23.383Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:46:23.383Z appoptics:debug using context provider: ace-context
2022-04-25T18:46:23.440Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:46:23.586Z appoptics:patching patched crypto 
2022-04-25T18:46:23.614Z appoptics:patching patched https 
2022-04-25T18:46:23.614Z appoptics:patching patched http 
2022-04-25T18:46:23.648Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:46:23.648Z appoptics:patching patched fs 
2022-04-25T18:46:23.657Z appoptics:patching patched pg 8.0.0
2022-04-25T18:46:23.682Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.0.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (108ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (42ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (42ms)
        ✓ should trace a basic query using callback (962ms)
        ✓ should trace a basic query using promises (40ms)
        ✓ should trace a prepared statement using a callback (218ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (229ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (227ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (92ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (38ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (218ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (226ms)
        ✓ should truncate long queries using promises (43ms)
        ✓ should do nothing when disabled using a callback (202ms)
        ✓ should do nothing when disabled using promises (47ms)
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (954ms)
        ✓ should trace a basic query using promises (48ms)
        ✓ should trace a prepared statement using a callback (204ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (218ms)
        ✓ should truncate long queries using promises (41ms)
        ✓ should do nothing when disabled using a callback (205ms)
        ✓ should do nothing when disabled using promises (46ms)


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.0.1
added 1 package, removed 1 package, updated 1 package and audited 936 packages in 5.781s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:46:36.334Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:46:36.335Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:46:36.335Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:46:36.336Z appoptics:debug using context provider: ace-context
2022-04-25T18:46:36.389Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:46:36.550Z appoptics:patching patched crypto 
2022-04-25T18:46:36.575Z appoptics:patching patched https 
2022-04-25T18:46:36.576Z appoptics:patching patched http 
2022-04-25T18:46:36.620Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:46:36.621Z appoptics:patching patched fs 
2022-04-25T18:46:36.630Z appoptics:patching patched pg 8.0.1
2022-04-25T18:46:36.660Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.0.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.0.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (107ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (975ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (225ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (237ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (229ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (88ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (216ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (231ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (211ms)
        ✓ should do nothing when disabled using promises (39ms)
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (961ms)
        ✓ should trace a basic query using promises (39ms)
        ✓ should trace a prepared statement using a callback (211ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (220ms)
        ✓ should truncate long queries using promises (39ms)
        ✓ should do nothing when disabled using a callback (207ms)
        ✓ should do nothing when disabled using promises (44ms)


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.0.2
updated 1 package and audited 936 packages in 5.423s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:46:48.997Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:46:48.998Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:46:48.998Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:46:48.999Z appoptics:debug using context provider: ace-context
2022-04-25T18:46:49.082Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:46:49.291Z appoptics:patching patched crypto 
2022-04-25T18:46:49.312Z appoptics:patching patched https 
2022-04-25T18:46:49.313Z appoptics:patching patched http 
2022-04-25T18:46:49.346Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:46:49.347Z appoptics:patching patched fs 
2022-04-25T18:46:49.355Z appoptics:patching patched pg 8.0.2
2022-04-25T18:46:49.382Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.0.2 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.0.2
      ✓ UDP might lose a message
      ✓ should create the pg testing context (97ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (40ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (47ms)
        ✓ should trace a basic query using callback (957ms)
        ✓ should trace a basic query using promises (44ms)
        ✓ should trace a prepared statement using a callback (207ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (218ms)
        ✓ should truncate long queries using promises (38ms)
        ✓ should do nothing when disabled using a callback (209ms)
        ✓ should do nothing when disabled using promises (41ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (71ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (45ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (222ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (238ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (231ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (251ms)
        ✓ should trace a basic query using callback (977ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (228ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (236ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (227ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.0.3
updated 1 package and audited 936 packages in 5.672s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:47:01.856Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:47:01.857Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:47:01.857Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:47:01.858Z appoptics:debug using context provider: ace-context
2022-04-25T18:47:01.917Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:47:02.071Z appoptics:patching patched crypto 
2022-04-25T18:47:02.095Z appoptics:patching patched https 
2022-04-25T18:47:02.096Z appoptics:patching patched http 
2022-04-25T18:47:02.132Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:47:02.133Z appoptics:patching patched fs 
2022-04-25T18:47:02.142Z appoptics:patching patched pg 8.0.3
2022-04-25T18:47:02.177Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.0.3 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.0.3
      ✓ UDP might lose a message
      ✓ should create the pg testing context (108ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (39ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (40ms)
        ✓ should trace a basic query using callback (965ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (215ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (230ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (217ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (86ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (45ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (206ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (222ms)
        ✓ should truncate long queries using promises (39ms)
        ✓ should do nothing when disabled using a callback (207ms)
        ✓ should do nothing when disabled using promises (41ms)
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (961ms)
        ✓ should trace a basic query using promises (44ms)
        ✓ should trace a prepared statement using a callback (209ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (222ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (208ms)
        ✓ should do nothing when disabled using promises (43ms)


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.1.0
updated 2 packages and audited 936 packages in 6.072s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:47:15.114Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:47:15.114Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:47:15.114Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:47:15.115Z appoptics:debug using context provider: ace-context
2022-04-25T18:47:15.171Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:47:15.324Z appoptics:patching patched crypto 
2022-04-25T18:47:15.343Z appoptics:patching patched https 
2022-04-25T18:47:15.344Z appoptics:patching patched http 
2022-04-25T18:47:15.377Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:47:15.378Z appoptics:patching patched fs 
2022-04-25T18:47:15.389Z appoptics:patching patched pg 8.1.0
2022-04-25T18:47:15.423Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.1.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.1.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (112ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (45ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (52ms)
        ✓ should trace a basic query using callback (953ms)
        ✓ should trace a basic query using promises (50ms)
        ✓ should trace a prepared statement using a callback (202ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (43ms)
        ✓ should truncate long queries using a callback (212ms)
        ✓ should truncate long queries using promises (43ms)
        ✓ should do nothing when disabled using a callback (202ms)
        ✓ should do nothing when disabled using promises (48ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (80ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (43ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (218ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (234ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (223ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (973ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (223ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (233ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (221ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.2.0
updated 1 package and audited 936 packages in 5.565s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:47:27.775Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:47:27.776Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:47:27.776Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:47:27.777Z appoptics:debug using context provider: ace-context
2022-04-25T18:47:27.830Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:47:27.983Z appoptics:patching patched crypto 
2022-04-25T18:47:28.007Z appoptics:patching patched https 
2022-04-25T18:47:28.008Z appoptics:patching patched http 
2022-04-25T18:47:28.043Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:47:28.043Z appoptics:patching patched fs 
2022-04-25T18:47:28.054Z appoptics:patching patched pg 8.2.0
2022-04-25T18:47:28.081Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.2.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.2.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (98ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (974ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (225ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (229ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (232ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (91ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises (40ms)
        ✓ should trace a prepared statement using a callback (213ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (228ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (218ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (979ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (224ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (237ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (230ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.2.1
updated 1 package and audited 936 packages in 6.424s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:47:41.675Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:47:41.676Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:47:41.676Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:47:41.676Z appoptics:debug using context provider: ace-context
2022-04-25T18:47:41.735Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:47:41.879Z appoptics:patching patched crypto 
2022-04-25T18:47:41.901Z appoptics:patching patched https 
2022-04-25T18:47:41.901Z appoptics:patching patched http 
2022-04-25T18:47:41.940Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:47:41.940Z appoptics:patching patched fs 
2022-04-25T18:47:41.951Z appoptics:patching patched pg 8.2.1
2022-04-25T18:47:41.977Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.2.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.2.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (105ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (972ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (219ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (229ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (221ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (82ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (38ms)
        ✓ should trace a basic query using promises (49ms)
        ✓ should trace a prepared statement using a callback (203ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (222ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (206ms)
        ✓ should do nothing when disabled using promises (44ms)
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (960ms)
        ✓ should trace a basic query using promises (41ms)
        ✓ should trace a prepared statement using a callback (211ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (218ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (208ms)
        ✓ should do nothing when disabled using promises (43ms)


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.2.2
updated 1 package and audited 936 packages in 5.295s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:47:54.100Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:47:54.101Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:47:54.101Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:47:54.102Z appoptics:debug using context provider: ace-context
2022-04-25T18:47:54.161Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:47:54.344Z appoptics:patching patched crypto 
2022-04-25T18:47:54.382Z appoptics:patching patched https 
2022-04-25T18:47:54.382Z appoptics:patching patched http 
2022-04-25T18:47:54.424Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:47:54.424Z appoptics:patching patched fs 
2022-04-25T18:47:54.438Z appoptics:patching patched pg 8.2.2
2022-04-25T18:47:54.463Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.2.2 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.2.2
      ✓ UDP might lose a message
      ✓ should create the pg testing context (104ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (44ms)
        ✓ should trace a basic query using callback (961ms)
        ✓ should trace a basic query using promises (42ms)
        ✓ should trace a prepared statement using a callback (210ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (220ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (211ms)
        ✓ should do nothing when disabled using promises (39ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (74ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (222ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (229ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (210ms)
        ✓ should do nothing when disabled using promises (40ms)
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (961ms)
        ✓ should trace a basic query using promises (41ms)
        ✓ should trace a prepared statement using a callback (210ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (219ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (214ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.3.0
updated 1 package and audited 936 packages in 6.165s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:48:07.560Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:48:07.560Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:48:07.561Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:48:07.561Z appoptics:debug using context provider: ace-context
2022-04-25T18:48:07.618Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:48:07.771Z appoptics:patching patched crypto 
2022-04-25T18:48:07.791Z appoptics:patching patched https 
2022-04-25T18:48:07.791Z appoptics:patching patched http 
2022-04-25T18:48:07.829Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:48:07.829Z appoptics:patching patched fs 
2022-04-25T18:48:07.841Z appoptics:patching patched pg 8.3.0
2022-04-25T18:48:07.867Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.3.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.3.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (100ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (44ms)
        ✓ should trace a basic query using callback (961ms)
        ✓ should trace a basic query using promises (41ms)
        ✓ should trace a prepared statement using a callback (210ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (221ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (211ms)
        ✓ should do nothing when disabled using promises (39ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (76ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (46ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (222ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (236ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (224ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (975ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (225ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (233ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (228ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.3.2
updated 1 package and audited 936 packages in 6.091s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:48:20.710Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:48:20.711Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:48:20.711Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:48:20.711Z appoptics:debug using context provider: ace-context
2022-04-25T18:48:20.806Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:48:20.953Z appoptics:patching patched crypto 
2022-04-25T18:48:20.973Z appoptics:patching patched https 
2022-04-25T18:48:20.974Z appoptics:patching patched http 
2022-04-25T18:48:21.009Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:48:21.010Z appoptics:patching patched fs 
2022-04-25T18:48:21.020Z appoptics:patching patched pg 8.3.2
2022-04-25T18:48:21.046Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.3.2 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.3.2
      ✓ UDP might lose a message
      ✓ should create the pg testing context (99ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (66ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (47ms)
        ✓ should trace a basic query using callback (960ms)
        ✓ should trace a basic query using promises (43ms)
        ✓ should trace a prepared statement using a callback (216ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (224ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (216ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (72ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (56ms)
        ✓ should trace a basic query using promises (41ms)
        ✓ should trace a prepared statement using a callback (211ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (227ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (218ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (967ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (218ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (226ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (219ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.3.3
updated 1 package and audited 936 packages in 6.213s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:48:34.180Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:48:34.181Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:48:34.181Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:48:34.182Z appoptics:debug using context provider: ace-context
2022-04-25T18:48:34.245Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:48:34.406Z appoptics:patching patched crypto 
2022-04-25T18:48:34.427Z appoptics:patching patched https 
2022-04-25T18:48:34.427Z appoptics:patching patched http 
2022-04-25T18:48:34.467Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:48:34.467Z appoptics:patching patched fs 
2022-04-25T18:48:34.478Z appoptics:patching patched pg 8.3.3
2022-04-25T18:48:34.504Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.3.3 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.3.3
      ✓ UDP might lose a message
      ✓ should create the pg testing context (102ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (67ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (62ms)
        ✓ should trace a basic query using callback (943ms)
        ✓ should trace a basic query using promises (59ms)
        ✓ should trace a prepared statement using a callback (193ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (48ms)
        ✓ should truncate long queries using a callback (200ms)
        ✓ should truncate long queries using promises (55ms)
        ✓ should do nothing when disabled using a callback (193ms)
        ✓ should do nothing when disabled using promises (58ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (95ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (52ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (216ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (229ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (219ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (972ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (223ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (233ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (228ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.4.0
removed 1 package, updated 1 package and audited 935 packages in 6.338s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:48:48.013Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:48:48.014Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:48:48.014Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:48:48.015Z appoptics:debug using context provider: ace-context
2022-04-25T18:48:48.067Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:48:48.221Z appoptics:patching patched crypto 
2022-04-25T18:48:48.241Z appoptics:patching patched https 
2022-04-25T18:48:48.241Z appoptics:patching patched http 
2022-04-25T18:48:48.277Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:48:48.277Z appoptics:patching patched fs 
2022-04-25T18:48:48.288Z appoptics:patching patched pg 8.4.0
2022-04-25T18:48:48.311Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.4.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.4.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (98ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (45ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (51ms)
        ✓ should trace a basic query using callback (954ms)
        ✓ should trace a basic query using promises (48ms)
        ✓ should trace a prepared statement using a callback (205ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (40ms)
        ✓ should truncate long queries using a callback (212ms)
        ✓ should truncate long queries using promises (41ms)
        ✓ should do nothing when disabled using a callback (206ms)
        ✓ should do nothing when disabled using promises (45ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (73ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (47ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (227ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (252ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (241ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (993ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (245ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (251ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (243ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.4.1
updated 1 package and audited 935 packages in 5.674s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:49:01.096Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:49:01.097Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:49:01.097Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:49:01.099Z appoptics:debug using context provider: ace-context
2022-04-25T18:49:01.169Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:49:01.368Z appoptics:patching patched crypto 
2022-04-25T18:49:01.395Z appoptics:patching patched https 
2022-04-25T18:49:01.395Z appoptics:patching patched http 
2022-04-25T18:49:01.441Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:49:01.441Z appoptics:patching patched fs 
2022-04-25T18:49:01.454Z appoptics:patching patched pg 8.4.1
2022-04-25T18:49:01.480Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.4.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.4.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (109ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (52ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (39ms)
        ✓ should trace a basic query using callback (966ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (216ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (225ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (218ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (103ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (40ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (216ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (241ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (236ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (1004ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (234ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (248ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (239ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.4.2
updated 1 package and audited 935 packages in 5.115s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:49:13.717Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:49:13.718Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:49:13.718Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:49:13.719Z appoptics:debug using context provider: ace-context
2022-04-25T18:49:13.782Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:49:14.013Z appoptics:patching patched crypto 
2022-04-25T18:49:14.058Z appoptics:patching patched https 
2022-04-25T18:49:14.058Z appoptics:patching patched http 
2022-04-25T18:49:14.104Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:49:14.104Z appoptics:patching patched fs 
2022-04-25T18:49:14.115Z appoptics:patching patched pg 8.4.2
2022-04-25T18:49:14.148Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.4.2 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.4.2
      ✓ UDP might lose a message
      ✓ should create the pg testing context (128ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (46ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (47ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (44ms)
        ✓ should trace a basic query using callback (961ms)
        ✓ should trace a basic query using promises (49ms)
        ✓ should trace a prepared statement using a callback (203ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (41ms)
        ✓ should truncate long queries using a callback (213ms)
        ✓ should truncate long queries using promises (45ms)
        ✓ should do nothing when disabled using a callback (201ms)
        ✓ should do nothing when disabled using promises (47ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (77ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (218ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (233ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (222ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (973ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (236ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (248ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (231ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.5.0
updated 1 package and audited 935 packages in 6.312s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:49:27.532Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:49:27.533Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:49:27.533Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:49:27.534Z appoptics:debug using context provider: ace-context
2022-04-25T18:49:27.590Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:49:27.771Z appoptics:patching patched crypto 
2022-04-25T18:49:27.795Z appoptics:patching patched https 
2022-04-25T18:49:27.795Z appoptics:patching patched http 
2022-04-25T18:49:27.830Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:49:27.830Z appoptics:patching patched fs 
2022-04-25T18:49:27.841Z appoptics:patching patched pg 8.5.0
2022-04-25T18:49:27.865Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.5.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.5.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (96ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (969ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (220ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (232ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (224ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (95ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises (39ms)
        ✓ should trace a prepared statement using a callback (214ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (228ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (219ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (970ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (219ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (247ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (243ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.5.1
updated 1 package and audited 935 packages in 5.181s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:49:39.814Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:49:39.815Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:49:39.815Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:49:39.816Z appoptics:debug using context provider: ace-context
2022-04-25T18:49:39.869Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:49:40.027Z appoptics:patching patched crypto 
2022-04-25T18:49:40.058Z appoptics:patching patched https 
2022-04-25T18:49:40.058Z appoptics:patching patched http 
2022-04-25T18:49:40.088Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:49:40.089Z appoptics:patching patched fs 
2022-04-25T18:49:40.099Z appoptics:patching patched pg 8.5.1
2022-04-25T18:49:40.121Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.5.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.5.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (96ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (47ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (974ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (226ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (226ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (103ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (218ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (226ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (977ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (245ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (249ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (238ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.6.0
updated 1 package and audited 935 packages in 5.098s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:49:52.271Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:49:52.272Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:49:52.272Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:49:52.273Z appoptics:debug using context provider: ace-context
2022-04-25T18:49:52.358Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:49:52.523Z appoptics:patching patched crypto 
2022-04-25T18:49:52.556Z appoptics:patching patched https 
2022-04-25T18:49:52.556Z appoptics:patching patched http 
2022-04-25T18:49:52.595Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:49:52.596Z appoptics:patching patched fs 
2022-04-25T18:49:52.607Z appoptics:patching patched pg 8.6.0
2022-04-25T18:49:52.632Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.6.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.6.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (139ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (41ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (973ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (226ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (236ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (234ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (116ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (51ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (218ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (236ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (225ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (975ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (224ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (233ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (224ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.7.0
updated 1 package and audited 935 packages in 4.605s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:50:04.151Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:50:04.152Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:50:04.152Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:50:04.152Z appoptics:debug using context provider: ace-context
2022-04-25T18:50:04.216Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:50:04.361Z appoptics:patching patched crypto 
2022-04-25T18:50:04.390Z appoptics:patching patched https 
2022-04-25T18:50:04.391Z appoptics:patching patched http 
2022-04-25T18:50:04.421Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:50:04.421Z appoptics:patching patched fs 
2022-04-25T18:50:04.431Z appoptics:patching patched pg 8.7.0
2022-04-25T18:50:04.455Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.7.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.7.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (121ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (43ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (974ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (224ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (216ms)
        ✓ should do nothing when disabled using promises (43ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (91ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises (46ms)
        ✓ should trace a prepared statement using a callback (209ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (229ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (219ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (970ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (221ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (229ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (237ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.7.1
updated 1 package and audited 935 packages in 4.607s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:50:16.015Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:50:16.016Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:50:16.017Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:50:16.019Z appoptics:debug using context provider: ace-context
2022-04-25T18:50:16.091Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:50:16.253Z appoptics:patching patched crypto 
2022-04-25T18:50:16.276Z appoptics:patching patched https 
2022-04-25T18:50:16.276Z appoptics:patching patched http 
2022-04-25T18:50:16.311Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:50:16.311Z appoptics:patching patched fs 
2022-04-25T18:50:16.322Z appoptics:patching patched pg 8.7.1
2022-04-25T18:50:16.347Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.7.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.7.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (115ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (43ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (98ms)
        ✓ should trace a basic query using callback (907ms)
        ✓ should trace a basic query using promises (96ms)
        ✓ should trace a prepared statement using a callback (159ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (88ms)
        ✓ should truncate long queries using a callback (171ms)
        ✓ should truncate long queries using promises (86ms)
        ✓ should do nothing when disabled using a callback (155ms)
        ✓ should do nothing when disabled using promises (94ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (112ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (42ms)
        ✓ should trace a basic query using promises (40ms)
        ✓ should trace a prepared statement using a callback (213ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (234ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (225ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (978ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (229ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (249ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (241ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.7.3
updated 1 package and audited 935 packages in 4.837s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-04-25T18:50:28.128Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-04-25T18:50:28.129Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-04-25T18:50:28.129Z appoptics:debug serviceKey dIOz...wWK0:node-agent-test
2022-04-25T18:50:28.130Z appoptics:debug using context provider: ace-context
2022-04-25T18:50:28.207Z appoptics:debug apm 10.2.2-ao.0, bindings 11.2.0, oboe 10.2.0
2022-04-25T18:50:28.385Z appoptics:patching patched crypto 
2022-04-25T18:50:28.405Z appoptics:patching patched https 
2022-04-25T18:50:28.406Z appoptics:patching patched http 
2022-04-25T18:50:28.440Z appoptics:patching fs.realpath - adding native method
2022-04-25T18:50:28.441Z appoptics:patching patched fs 
2022-04-25T18:50:28.451Z appoptics:patching patched pg 8.7.3
2022-04-25T18:50:28.483Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.7.3 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.7.3
      ✓ UDP might lose a message
      ✓ should create the pg testing context (146ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (970ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (222ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (232ms)
        ✓ should truncate long queries using promises (38ms)
        ✓ should do nothing when disabled using a callback (225ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (165ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (82ms)
        ✓ should trace a basic query using promises (73ms)
        ✓ should trace a prepared statement using a callback (178ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (55ms)
        ✓ should truncate long queries using a callback (195ms)
        ✓ should truncate long queries using promises (60ms)
        ✓ should do nothing when disabled using a callback (186ms)
        ✓ should do nothing when disabled using promises (65ms)
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (948ms)
        ✓ should trace a basic query using promises (53ms)
        ✓ should trace a prepared statement using a callback (187ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (58ms)
        ✓ should truncate long queries using a callback (198ms)
        ✓ should truncate long queries using promises (58ms)
        ✓ should do nothing when disabled using a callback (188ms)
        ✓ should do nothing when disabled using promises (62ms)


  67 passing (6s)

npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.7.3
updated 1 package and audited 935 packages in 4.941s

86 packages are looking for funding
  run `npm fund` for details

found 7 vulnerabilities (2 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
