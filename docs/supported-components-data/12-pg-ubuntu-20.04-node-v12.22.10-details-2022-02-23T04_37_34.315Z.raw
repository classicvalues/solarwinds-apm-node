npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@4.5.5
added 4 packages from 7 contributors, removed 3 packages, updated 7 packages and audited 914 packages in 4.97s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:37:40.527Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:37:40.529Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:37:40.529Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:37:40.529Z appoptics:debug using context provider: ace-context
2022-02-23T04:37:40.595Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:37:40.754Z appoptics:patching patched crypto 
2022-02-23T04:37:40.778Z appoptics:patching patched https 
2022-02-23T04:37:40.778Z appoptics:patching patched http 
2022-02-23T04:37:40.805Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:37:40.805Z appoptics:patching patched fs 
2022-02-23T04:37:40.838Z appoptics:patching probes.generic-pool "acquire()" not found
2022-02-23T04:37:40.838Z appoptics:patching patched generic-pool 2.1.1
2022-02-23T04:37:40.840Z appoptics:patching patched pg 4.5.5
2022-02-23T04:37:40.864Z appoptics:debug starting runtimeMetrics


  probes.pg 4.5.5
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (13ms)
  1 failing

  1) probes.pg 4.5.5
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:426:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:345:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:105:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@4.5.6
updated 2 packages and audited 914 packages in 3.666s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:37:45.480Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:37:45.481Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:37:45.481Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:37:45.481Z appoptics:debug using context provider: ace-context
2022-02-23T04:37:45.528Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:37:45.656Z appoptics:patching patched crypto 
2022-02-23T04:37:45.672Z appoptics:patching patched https 
2022-02-23T04:37:45.672Z appoptics:patching patched http 
2022-02-23T04:37:45.705Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:37:45.705Z appoptics:patching patched fs 
2022-02-23T04:37:45.718Z appoptics:patching patched generic-pool 2.4.2
2022-02-23T04:37:45.719Z appoptics:patching patched pg 4.5.6
2022-02-23T04:37:45.739Z appoptics:debug starting runtimeMetrics


  probes.pg 4.5.6
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (14ms)
  1 failing

  1) probes.pg 4.5.6
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:426:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:345:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:105:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@4.5.7
added 1 package from 2 contributors, updated 1 package and audited 915 packages in 4.336s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:37:50.999Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:37:51.001Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:37:51.001Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:37:51.001Z appoptics:debug using context provider: ace-context
2022-02-23T04:37:51.067Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:37:51.249Z appoptics:patching patched crypto 
2022-02-23T04:37:51.266Z appoptics:patching patched https 
2022-02-23T04:37:51.267Z appoptics:patching patched http 
2022-02-23T04:37:51.324Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:37:51.325Z appoptics:patching patched fs 
2022-02-23T04:37:51.340Z appoptics:patching patched generic-pool 2.4.2
2022-02-23T04:37:51.341Z appoptics:patching patched pg 4.5.7
2022-02-23T04:37:51.368Z appoptics:debug starting runtimeMetrics


  probes.pg 4.5.7
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (20ms)
  1 failing

  1) probes.pg 4.5.7
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:426:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:345:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:105:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@5.0.0
removed 1 package, updated 3 packages and audited 914 packages in 3.6s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:37:55.971Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:37:55.972Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:37:55.972Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:37:55.973Z appoptics:debug using context provider: ace-context
2022-02-23T04:37:56.021Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:37:56.150Z appoptics:patching patched crypto 
2022-02-23T04:37:56.167Z appoptics:patching patched https 
2022-02-23T04:37:56.167Z appoptics:patching patched http 
2022-02-23T04:37:56.210Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:37:56.211Z appoptics:patching patched fs 
2022-02-23T04:37:56.229Z appoptics:patching patched generic-pool 2.4.2
2022-02-23T04:37:56.230Z appoptics:patching patched pg 5.0.0
2022-02-23T04:37:56.255Z appoptics:debug starting runtimeMetrics


  probes.pg 5.0.0
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (17ms)
  1 failing

  1) probes.pg 5.0.0
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:426:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:345:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:105:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@5.1.0
updated 2 packages and audited 914 packages in 3.744s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:38:01.137Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:38:01.137Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:38:01.137Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:38:01.138Z appoptics:debug using context provider: ace-context
2022-02-23T04:38:01.180Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:38:01.290Z appoptics:patching patched crypto 
2022-02-23T04:38:01.310Z appoptics:patching patched https 
2022-02-23T04:38:01.311Z appoptics:patching patched http 
2022-02-23T04:38:01.330Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:38:01.330Z appoptics:patching patched fs 
2022-02-23T04:38:01.360Z appoptics:patching patched generic-pool 2.4.2
2022-02-23T04:38:01.361Z appoptics:patching patched pg 5.1.0
2022-02-23T04:38:01.412Z appoptics:debug starting runtimeMetrics


  probes.pg 5.1.0
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (33ms)
  1 failing

  1) probes.pg 5.1.0
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:426:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:345:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:105:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@5.2.1
added 4 packages from 16 contributors, removed 1 package, updated 1 package and audited 917 packages in 5.206s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:38:07.827Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:38:07.827Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:38:07.827Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:38:07.828Z appoptics:debug using context provider: ace-context
2022-02-23T04:38:07.889Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:38:08.021Z appoptics:patching patched crypto 
2022-02-23T04:38:08.037Z appoptics:patching patched https 
2022-02-23T04:38:08.038Z appoptics:patching patched http 
2022-02-23T04:38:08.058Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:38:08.059Z appoptics:patching patched fs 
2022-02-23T04:38:08.078Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:38:08.080Z appoptics:patching patched pg 5.2.1
2022-02-23T04:38:08.108Z appoptics:debug starting runtimeMetrics


  probes.pg 5.2.1
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (30ms)
  1 failing

  1) probes.pg 5.2.1
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:426:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:345:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:105:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.0.0
removed 1 package, updated 1 package and audited 916 packages in 4.328s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:38:13.858Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:38:13.859Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:38:13.859Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:38:13.859Z appoptics:debug using context provider: ace-context
2022-02-23T04:38:13.926Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:38:14.087Z appoptics:patching patched crypto 
2022-02-23T04:38:14.104Z appoptics:patching patched https 
2022-02-23T04:38:14.104Z appoptics:patching patched http 
2022-02-23T04:38:14.152Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:38:14.152Z appoptics:patching patched fs 
2022-02-23T04:38:14.169Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:38:14.171Z appoptics:patching patched pg 6.0.0
2022-02-23T04:38:14.208Z appoptics:debug starting runtimeMetrics


  probes.pg 6.0.0
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (22ms)
  1 failing

  1) probes.pg 6.0.0
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:430:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:349:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:109:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.0.1
updated 1 package and audited 916 packages in 3.89s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:38:18.984Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:38:18.985Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:38:18.985Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:38:18.986Z appoptics:debug using context provider: ace-context
2022-02-23T04:38:19.033Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:38:19.163Z appoptics:patching patched crypto 
2022-02-23T04:38:19.179Z appoptics:patching patched https 
2022-02-23T04:38:19.180Z appoptics:patching patched http 
2022-02-23T04:38:19.206Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:38:19.211Z appoptics:patching patched fs 
2022-02-23T04:38:19.225Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:38:19.227Z appoptics:patching patched pg 6.0.1
2022-02-23T04:38:19.249Z appoptics:debug starting runtimeMetrics


  probes.pg 6.0.1
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (13ms)
  1 failing

  1) probes.pg 6.0.1
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:430:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:349:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:109:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.0.2
updated 1 package and audited 916 packages in 3.56s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:38:23.747Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:38:23.747Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:38:23.747Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:38:23.748Z appoptics:debug using context provider: ace-context
2022-02-23T04:38:23.819Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:38:23.963Z appoptics:patching patched crypto 
2022-02-23T04:38:23.999Z appoptics:patching patched https 
2022-02-23T04:38:23.999Z appoptics:patching patched http 
2022-02-23T04:38:24.028Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:38:24.028Z appoptics:patching patched fs 
2022-02-23T04:38:24.042Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:38:24.043Z appoptics:patching patched pg 6.0.2
2022-02-23T04:38:24.071Z appoptics:debug starting runtimeMetrics


  probes.pg 6.0.2
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (18ms)
  1 failing

  1) probes.pg 6.0.2
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:438:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:357:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:117:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.0.3
updated 1 package and audited 916 packages in 4.278s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:38:29.488Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:38:29.489Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:38:29.489Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:38:29.490Z appoptics:debug using context provider: ace-context
2022-02-23T04:38:29.537Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:38:29.661Z appoptics:patching patched crypto 
2022-02-23T04:38:29.677Z appoptics:patching patched https 
2022-02-23T04:38:29.677Z appoptics:patching patched http 
2022-02-23T04:38:29.698Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:38:29.699Z appoptics:patching patched fs 
2022-02-23T04:38:29.717Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:38:29.718Z appoptics:patching patched pg 6.0.3
2022-02-23T04:38:29.738Z appoptics:debug starting runtimeMetrics


  probes.pg 6.0.3
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (14ms)
  1 failing

  1) probes.pg 6.0.3
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:438:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:357:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:117:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.0.4
added 1 package from 1 contributor, removed 2 packages, updated 2 packages and audited 915 packages in 3.67s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:38:34.273Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:38:34.274Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:38:34.274Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:38:34.274Z appoptics:debug using context provider: ace-context
2022-02-23T04:38:34.319Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:38:34.445Z appoptics:patching patched crypto 
2022-02-23T04:38:34.461Z appoptics:patching patched https 
2022-02-23T04:38:34.461Z appoptics:patching patched http 
2022-02-23T04:38:34.481Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:38:34.481Z appoptics:patching patched fs 
2022-02-23T04:38:34.502Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:38:34.503Z appoptics:patching patched pg 6.0.4
2022-02-23T04:38:34.524Z appoptics:debug starting runtimeMetrics


  probes.pg 6.0.4
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (14ms)
  1 failing

  1) probes.pg 6.0.4
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:438:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:357:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:117:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.0.5
added 1 package from 2 contributors, updated 1 package and audited 916 packages in 4.389s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:38:39.795Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:38:39.796Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:38:39.796Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:38:39.796Z appoptics:debug using context provider: ace-context
2022-02-23T04:38:39.840Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:38:39.973Z appoptics:patching patched crypto 
2022-02-23T04:38:39.989Z appoptics:patching patched https 
2022-02-23T04:38:39.989Z appoptics:patching patched http 
2022-02-23T04:38:40.010Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:38:40.011Z appoptics:patching patched fs 
2022-02-23T04:38:40.029Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:38:40.031Z appoptics:patching patched pg 6.0.5
2022-02-23T04:38:40.051Z appoptics:debug starting runtimeMetrics


  probes.pg 6.0.5
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (14ms)
  1 failing

  1) probes.pg 6.0.5
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:438:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:357:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:117:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.1.0
removed 1 package, updated 1 package and audited 915 packages in 3.689s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:38:44.642Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:38:44.642Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:38:44.642Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:38:44.643Z appoptics:debug using context provider: ace-context
2022-02-23T04:38:44.690Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:38:44.815Z appoptics:patching patched crypto 
2022-02-23T04:38:44.831Z appoptics:patching patched https 
2022-02-23T04:38:44.831Z appoptics:patching patched http 
2022-02-23T04:38:44.852Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:38:44.852Z appoptics:patching patched fs 
2022-02-23T04:38:44.870Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:38:44.871Z appoptics:patching patched pg 6.1.0
2022-02-23T04:38:44.890Z appoptics:debug starting runtimeMetrics


  probes.pg 6.1.0
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (14ms)
  1 failing

  1) probes.pg 6.1.0
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:441:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:360:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:117:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.1.1
updated 1 package and audited 915 packages in 3.957s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:38:49.851Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:38:49.852Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:38:49.852Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:38:49.853Z appoptics:debug using context provider: ace-context
2022-02-23T04:38:49.913Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:38:50.054Z appoptics:patching patched crypto 
2022-02-23T04:38:50.071Z appoptics:patching patched https 
2022-02-23T04:38:50.072Z appoptics:patching patched http 
2022-02-23T04:38:50.124Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:38:50.124Z appoptics:patching patched fs 
2022-02-23T04:38:50.140Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:38:50.142Z appoptics:patching patched pg 6.1.1
2022-02-23T04:38:50.180Z appoptics:debug starting runtimeMetrics


  probes.pg 6.1.1
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (16ms)
  1 failing

  1) probes.pg 6.1.1
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:441:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:360:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:117:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.1.2
updated 1 package and audited 915 packages in 3.629s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:38:54.789Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:38:54.790Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:38:54.790Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:38:54.790Z appoptics:debug using context provider: ace-context
2022-02-23T04:38:54.837Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:38:54.962Z appoptics:patching patched crypto 
2022-02-23T04:38:54.978Z appoptics:patching patched https 
2022-02-23T04:38:54.979Z appoptics:patching patched http 
2022-02-23T04:38:55.000Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:38:55.001Z appoptics:patching patched fs 
2022-02-23T04:38:55.019Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:38:55.020Z appoptics:patching patched pg 6.1.2
2022-02-23T04:38:55.040Z appoptics:debug starting runtimeMetrics


  probes.pg 6.1.2
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (15ms)
  1 failing

  1) probes.pg 6.1.2
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:441:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:360:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:117:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.1.3
updated 1 package and audited 915 packages in 3.575s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:38:59.518Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:38:59.518Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:38:59.519Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:38:59.519Z appoptics:debug using context provider: ace-context
2022-02-23T04:38:59.567Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:38:59.699Z appoptics:patching patched crypto 
2022-02-23T04:38:59.715Z appoptics:patching patched https 
2022-02-23T04:38:59.715Z appoptics:patching patched http 
2022-02-23T04:38:59.747Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:38:59.748Z appoptics:patching patched fs 
2022-02-23T04:38:59.761Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:38:59.763Z appoptics:patching patched pg 6.1.3
2022-02-23T04:38:59.783Z appoptics:debug starting runtimeMetrics


  probes.pg 6.1.3
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (14ms)
  1 failing

  1) probes.pg 6.1.3
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:456:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:375:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:132:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.1.4
updated 1 package and audited 915 packages in 4.879s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:39:05.532Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:39:05.533Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:39:05.533Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:39:05.533Z appoptics:debug using context provider: ace-context
2022-02-23T04:39:05.581Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:39:05.706Z appoptics:patching patched crypto 
2022-02-23T04:39:05.722Z appoptics:patching patched https 
2022-02-23T04:39:05.723Z appoptics:patching patched http 
2022-02-23T04:39:05.747Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:39:05.747Z appoptics:patching patched fs 
2022-02-23T04:39:05.760Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:39:05.762Z appoptics:patching patched pg 6.1.4
2022-02-23T04:39:05.782Z appoptics:debug starting runtimeMetrics


  probes.pg 6.1.4
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (14ms)
  1 failing

  1) probes.pg 6.1.4
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:456:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:375:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:132:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.1.5
updated 1 package and audited 915 packages in 3.828s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:39:10.522Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:39:10.523Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:39:10.523Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:39:10.523Z appoptics:debug using context provider: ace-context
2022-02-23T04:39:10.570Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:39:10.696Z appoptics:patching patched crypto 
2022-02-23T04:39:10.712Z appoptics:patching patched https 
2022-02-23T04:39:10.712Z appoptics:patching patched http 
2022-02-23T04:39:10.745Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:39:10.746Z appoptics:patching patched fs 
2022-02-23T04:39:10.758Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:39:10.760Z appoptics:patching patched pg 6.1.5
2022-02-23T04:39:10.779Z appoptics:debug starting runtimeMetrics


  probes.pg 6.1.5
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (14ms)
  1 failing

  1) probes.pg 6.1.5
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:456:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:375:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:132:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.1.6
added 1 package from 2 contributors, updated 1 package and audited 916 packages in 3.938s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:39:15.559Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:39:15.559Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:39:15.559Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:39:15.560Z appoptics:debug using context provider: ace-context
2022-02-23T04:39:15.603Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:39:15.730Z appoptics:patching patched crypto 
2022-02-23T04:39:15.750Z appoptics:patching patched https 
2022-02-23T04:39:15.750Z appoptics:patching patched http 
2022-02-23T04:39:15.773Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:39:15.773Z appoptics:patching patched fs 
2022-02-23T04:39:15.787Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:39:15.788Z appoptics:patching patched pg 6.1.6
2022-02-23T04:39:15.808Z appoptics:debug starting runtimeMetrics


  probes.pg 6.1.6
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (14ms)
  1 failing

  1) probes.pg 6.1.6
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:456:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:375:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:132:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.2.2
removed 1 package, updated 2 packages and audited 915 packages in 3.522s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:39:20.267Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:39:20.267Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:39:20.267Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:39:20.268Z appoptics:debug using context provider: ace-context
2022-02-23T04:39:20.329Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:39:20.452Z appoptics:patching patched crypto 
2022-02-23T04:39:20.469Z appoptics:patching patched https 
2022-02-23T04:39:20.469Z appoptics:patching patched http 
2022-02-23T04:39:20.496Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:39:20.497Z appoptics:patching patched fs 
2022-02-23T04:39:20.510Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:39:20.511Z appoptics:patching patched pg 6.2.2
2022-02-23T04:39:20.531Z appoptics:debug starting runtimeMetrics


  probes.pg 6.2.2
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (13ms)
  1 failing

  1) probes.pg 6.2.2
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:459:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:375:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:132:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.2.3
updated 1 package and audited 915 packages in 3.716s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:39:25.232Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:39:25.234Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:39:25.234Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:39:25.234Z appoptics:debug using context provider: ace-context
2022-02-23T04:39:25.278Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:39:25.436Z appoptics:patching patched crypto 
2022-02-23T04:39:25.454Z appoptics:patching patched https 
2022-02-23T04:39:25.454Z appoptics:patching patched http 
2022-02-23T04:39:25.513Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:39:25.513Z appoptics:patching patched fs 
2022-02-23T04:39:25.528Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:39:25.529Z appoptics:patching patched pg 6.2.3
2022-02-23T04:39:25.564Z appoptics:debug starting runtimeMetrics


  probes.pg 6.2.3
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (15ms)
  1 failing

  1) probes.pg 6.2.3
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:459:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:375:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:132:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.2.4
updated 1 package and audited 915 packages in 3.976s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:39:30.563Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:39:30.564Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:39:30.564Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:39:30.564Z appoptics:debug using context provider: ace-context
2022-02-23T04:39:30.608Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:39:30.757Z appoptics:patching patched crypto 
2022-02-23T04:39:30.790Z appoptics:patching patched https 
2022-02-23T04:39:30.790Z appoptics:patching patched http 
2022-02-23T04:39:30.819Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:39:30.819Z appoptics:patching patched fs 
2022-02-23T04:39:30.832Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:39:30.834Z appoptics:patching patched pg 6.2.4
2022-02-23T04:39:30.866Z appoptics:debug starting runtimeMetrics


  probes.pg 6.2.4
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (16ms)
  1 failing

  1) probes.pg 6.2.4
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.2.5
added 1 package from 2 contributors, updated 1 package and audited 916 packages in 3.599s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:39:35.419Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:39:35.419Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:39:35.420Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:39:35.420Z appoptics:debug using context provider: ace-context
2022-02-23T04:39:35.467Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:39:35.592Z appoptics:patching patched crypto 
2022-02-23T04:39:35.607Z appoptics:patching patched https 
2022-02-23T04:39:35.607Z appoptics:patching patched http 
2022-02-23T04:39:35.629Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:39:35.633Z appoptics:patching patched fs 
2022-02-23T04:39:35.647Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:39:35.648Z appoptics:patching patched pg 6.2.5
2022-02-23T04:39:35.668Z appoptics:debug starting runtimeMetrics


  probes.pg 6.2.5
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (13ms)
  1 failing

  1) probes.pg 6.2.5
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.3.0
removed 1 package, updated 1 package and audited 915 packages in 4.082s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:39:40.627Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:39:40.628Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:39:40.628Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:39:40.628Z appoptics:debug using context provider: ace-context
2022-02-23T04:39:40.677Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:39:40.799Z appoptics:patching patched crypto 
2022-02-23T04:39:40.815Z appoptics:patching patched https 
2022-02-23T04:39:40.815Z appoptics:patching patched http 
2022-02-23T04:39:40.836Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:39:40.837Z appoptics:patching patched fs 
2022-02-23T04:39:40.855Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:39:40.856Z appoptics:patching patched pg 6.3.0
2022-02-23T04:39:40.876Z appoptics:debug starting runtimeMetrics


  probes.pg 6.3.0
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (14ms)
  1 failing

  1) probes.pg 6.3.0
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.3.1
updated 1 package and audited 915 packages in 3.959s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:39:45.758Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:39:45.759Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:39:45.759Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:39:45.760Z appoptics:debug using context provider: ace-context
2022-02-23T04:39:45.805Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:39:45.919Z appoptics:patching patched crypto 
2022-02-23T04:39:45.933Z appoptics:patching patched https 
2022-02-23T04:39:45.933Z appoptics:patching patched http 
2022-02-23T04:39:45.952Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:39:45.953Z appoptics:patching patched fs 
2022-02-23T04:39:45.968Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:39:45.970Z appoptics:patching patched pg 6.3.1
2022-02-23T04:39:45.988Z appoptics:debug starting runtimeMetrics


  probes.pg 6.3.1
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (14ms)
  1 failing

  1) probes.pg 6.3.1
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.3.3
added 1 package from 2 contributors, updated 1 package and audited 916 packages in 3.573s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:39:50.432Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:39:50.432Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:39:50.432Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:39:50.433Z appoptics:debug using context provider: ace-context
2022-02-23T04:39:50.490Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:39:50.661Z appoptics:patching patched crypto 
2022-02-23T04:39:50.680Z appoptics:patching patched https 
2022-02-23T04:39:50.680Z appoptics:patching patched http 
2022-02-23T04:39:50.722Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:39:50.723Z appoptics:patching patched fs 
2022-02-23T04:39:50.735Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:39:50.736Z appoptics:patching patched pg 6.3.3
2022-02-23T04:39:50.760Z appoptics:debug starting runtimeMetrics


  probes.pg 6.3.3
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (16ms)
  1 failing

  1) probes.pg 6.3.3
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.4.0
removed 1 package, updated 1 package and audited 915 packages in 3.638s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:39:55.361Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:39:55.361Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:39:55.361Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:39:55.362Z appoptics:debug using context provider: ace-context
2022-02-23T04:39:55.404Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:39:55.516Z appoptics:patching patched crypto 
2022-02-23T04:39:55.531Z appoptics:patching patched https 
2022-02-23T04:39:55.531Z appoptics:patching patched http 
2022-02-23T04:39:55.558Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:39:55.558Z appoptics:patching patched fs 
2022-02-23T04:39:55.570Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:39:55.571Z appoptics:patching patched pg 6.4.0
2022-02-23T04:39:55.590Z appoptics:debug starting runtimeMetrics


  probes.pg 6.4.0
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (13ms)
  1 failing

  1) probes.pg 6.4.0
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.4.1
updated 1 package and audited 915 packages in 3.602s

83 packages are looking for funding
  run `npm fund` for details

found 9 vulnerabilities (3 moderate, 6 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:40:00.090Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:40:00.090Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:40:00.090Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:40:00.091Z appoptics:debug using context provider: ace-context
2022-02-23T04:40:00.145Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:40:00.273Z appoptics:patching patched crypto 
2022-02-23T04:40:00.287Z appoptics:patching patched https 
2022-02-23T04:40:00.287Z appoptics:patching patched http 
2022-02-23T04:40:00.306Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:40:00.311Z appoptics:patching patched fs 
2022-02-23T04:40:00.323Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:40:00.324Z appoptics:patching patched pg 6.4.1
2022-02-23T04:40:00.341Z appoptics:debug starting runtimeMetrics


  probes.pg 6.4.1
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (12ms)
  1 failing

  1) probes.pg 6.4.1
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@6.4.2
added 1 package from 2 contributors, updated 1 package and audited 916 packages in 4.398s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:40:05.575Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:40:05.576Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:40:05.576Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:40:05.576Z appoptics:debug using context provider: ace-context
2022-02-23T04:40:05.625Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:40:05.736Z appoptics:patching patched crypto 
2022-02-23T04:40:05.750Z appoptics:patching patched https 
2022-02-23T04:40:05.750Z appoptics:patching patched http 
2022-02-23T04:40:05.769Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:40:05.769Z appoptics:patching patched fs 
2022-02-23T04:40:05.786Z appoptics:patching patched generic-pool 2.4.3
2022-02-23T04:40:05.787Z appoptics:patching patched pg 6.4.2
2022-02-23T04:40:05.804Z appoptics:debug starting runtimeMetrics


  probes.pg 6.4.2
    1) "before all" hook for "should sanitize SQL by default"


  0 passing (13ms)
  1 failing

  1) probes.pg 6.4.2
       "before all" hook for "should sanitize SQL by default":
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:454:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:370:17)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:129:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.5.0
removed 3 packages, updated 3 packages and audited 913 packages in 3.791s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:40:10.421Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:40:10.421Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:40:10.421Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:40:10.422Z appoptics:debug using context provider: ace-context
2022-02-23T04:40:10.461Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:40:10.585Z appoptics:patching patched crypto 
2022-02-23T04:40:10.602Z appoptics:patching patched https 
2022-02-23T04:40:10.603Z appoptics:patching patched http 
2022-02-23T04:40:10.633Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:40:10.633Z appoptics:patching patched fs 
2022-02-23T04:40:10.640Z appoptics:patching patched pg 7.5.0
2022-02-23T04:40:10.669Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.5.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.5.0
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (85ms)
  64 failing

  1) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)

  2) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  3) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  4) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  5) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  6) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  7) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  8) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  9) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  10) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  11) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  12) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  13) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  14) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  15) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  16) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  17) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  18) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  19) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  20) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  21) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  22) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  23) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  24) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  25) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  26) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  27) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  28) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  29) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  30) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  31) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  32) probes.pg6+ 7.5.0 pg-native 3.0.0
       javascript 7.5.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  33) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)

  34) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  35) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  36) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  37) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  38) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  39) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  40) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  41) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  42) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  43) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  44) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  45) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  46) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  47) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  48) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  49) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  50) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  51) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  52) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  53) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  54) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  55) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  56) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  57) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  58) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  59) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  60) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  61) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  62) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  63) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  64) probes.pg6+ 7.5.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.6.0
updated 1 package and audited 913 packages in 4.576s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:40:16.207Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:40:16.207Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:40:16.207Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:40:16.208Z appoptics:debug using context provider: ace-context
2022-02-23T04:40:16.256Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:40:16.385Z appoptics:patching patched crypto 
2022-02-23T04:40:16.401Z appoptics:patching patched https 
2022-02-23T04:40:16.402Z appoptics:patching patched http 
2022-02-23T04:40:16.430Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:40:16.431Z appoptics:patching patched fs 
2022-02-23T04:40:16.438Z appoptics:patching patched pg 7.6.0
2022-02-23T04:40:16.460Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.6.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.6.0
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (88ms)
  64 failing

  1) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)

  2) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  3) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  4) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  5) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  6) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  7) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  8) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  9) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  10) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  11) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  12) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  13) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  14) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  15) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  16) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  17) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  18) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  19) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  20) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  21) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  22) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  23) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  24) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  25) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  26) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  27) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  28) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  29) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  30) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  31) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  32) probes.pg6+ 7.6.0 pg-native 3.0.0
       javascript 7.6.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  33) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)

  34) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  35) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  36) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  37) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  38) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  39) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  40) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  41) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  42) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  43) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  44) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  45) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  46) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  47) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  48) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  49) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  50) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  51) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  52) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  53) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  54) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  55) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  56) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  57) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  58) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  59) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  60) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  61) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  62) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  63) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  64) probes.pg6+ 7.6.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.6.1
updated 2 packages and audited 913 packages in 3.695s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:40:21.151Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:40:21.151Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:40:21.151Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:40:21.152Z appoptics:debug using context provider: ace-context
2022-02-23T04:40:21.199Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:40:21.320Z appoptics:patching patched crypto 
2022-02-23T04:40:21.336Z appoptics:patching patched https 
2022-02-23T04:40:21.337Z appoptics:patching patched http 
2022-02-23T04:40:21.363Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:40:21.363Z appoptics:patching patched fs 
2022-02-23T04:40:21.370Z appoptics:patching patched pg 7.6.1
2022-02-23T04:40:21.392Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.6.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.6.1
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (81ms)
  64 failing

  1) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)

  2) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  3) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  4) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  5) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  6) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  7) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  8) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  9) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  10) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  11) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  12) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  13) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  14) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  15) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  16) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  17) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  18) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  19) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  20) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  21) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  22) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  23) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  24) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  25) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  26) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  27) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  28) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  29) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  30) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  31) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  32) probes.pg6+ 7.6.1 pg-native 3.0.0
       javascript 7.6.1
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  33) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)

  34) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  35) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  36) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  37) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  38) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  39) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  40) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  41) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  42) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  43) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  44) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  45) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  46) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  47) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  48) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  49) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  50) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  51) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  52) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  53) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  54) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  55) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  56) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  57) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  58) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  59) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  60) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  61) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  62) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  63) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  64) probes.pg6+ 7.6.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.7.0
updated 1 package and audited 913 packages in 3.593s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:40:26.047Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:40:26.048Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:40:26.048Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:40:26.049Z appoptics:debug using context provider: ace-context
2022-02-23T04:40:26.115Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:40:26.401Z appoptics:patching patched crypto 
2022-02-23T04:40:26.471Z appoptics:patching patched https 
2022-02-23T04:40:26.472Z appoptics:patching patched http 
2022-02-23T04:40:26.536Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:40:26.536Z appoptics:patching patched fs 
2022-02-23T04:40:26.549Z appoptics:patching patched pg 7.7.0
2022-02-23T04:40:26.591Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.7.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.7.0
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (139ms)
  64 failing

  1) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)

  2) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  3) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  4) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  5) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  6) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  7) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  8) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  9) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  10) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  11) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  12) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  13) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  14) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  15) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  16) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  17) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  18) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  19) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  20) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  21) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  22) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  23) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  24) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  25) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  26) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  27) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  28) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  29) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  30) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  31) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  32) probes.pg6+ 7.7.0 pg-native 3.0.0
       javascript 7.7.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  33) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)

  34) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  35) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  36) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  37) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  38) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  39) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  40) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  41) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  42) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  43) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  44) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  45) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  46) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  47) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  48) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  49) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  50) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  51) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  52) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  53) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  54) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  55) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  56) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  57) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  58) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  59) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  60) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  61) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  62) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  63) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  64) probes.pg6+ 7.7.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.7.1
updated 1 package and audited 913 packages in 3.666s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:40:31.313Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:40:31.314Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:40:31.314Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:40:31.315Z appoptics:debug using context provider: ace-context
2022-02-23T04:40:31.357Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:40:31.469Z appoptics:patching patched crypto 
2022-02-23T04:40:31.485Z appoptics:patching patched https 
2022-02-23T04:40:31.486Z appoptics:patching patched http 
2022-02-23T04:40:31.512Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:40:31.512Z appoptics:patching patched fs 
2022-02-23T04:40:31.518Z appoptics:patching patched pg 7.7.1
2022-02-23T04:40:31.539Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.7.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.7.1
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (79ms)
  64 failing

  1) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)

  2) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  3) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  4) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  5) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  6) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  7) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  8) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  9) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  10) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  11) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  12) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  13) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  14) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  15) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  16) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  17) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  18) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  19) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  20) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  21) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  22) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  23) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  24) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  25) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  26) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  27) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  28) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  29) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  30) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  31) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  32) probes.pg6+ 7.7.1 pg-native 3.0.0
       javascript 7.7.1
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  33) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:442:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:358:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:119:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)

  34) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  35) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  36) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  37) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  38) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  39) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  40) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  41) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  42) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  43) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  44) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  45) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  46) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  47) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  48) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  49) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  50) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  51) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  52) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  53) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  54) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  55) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  56) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  57) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  58) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  59) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  60) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  61) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  62) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  63) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  64) probes.pg6+ 7.7.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.8.0
updated 3 packages and audited 913 packages in 3.606s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:40:36.045Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:40:36.046Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:40:36.046Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:40:36.046Z appoptics:debug using context provider: ace-context
2022-02-23T04:40:36.088Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:40:36.200Z appoptics:patching patched crypto 
2022-02-23T04:40:36.218Z appoptics:patching patched https 
2022-02-23T04:40:36.218Z appoptics:patching patched http 
2022-02-23T04:40:36.243Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:40:36.243Z appoptics:patching patched fs 
2022-02-23T04:40:36.249Z appoptics:patching patched pg 7.8.0
2022-02-23T04:40:36.270Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.8.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.8.0
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (78ms)
  64 failing

  1) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:443:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:359:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:120:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)

  2) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  3) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  4) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  5) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  6) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  7) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  8) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  9) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  10) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  11) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  12) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  13) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  14) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  15) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  16) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  17) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  18) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  19) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  20) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  21) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  22) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  23) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  24) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  25) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  26) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  27) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  28) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  29) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  30) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  31) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  32) probes.pg6+ 7.8.0 pg-native 3.0.0
       javascript 7.8.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  33) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:443:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:359:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:120:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)

  34) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  35) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  36) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  37) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  38) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  39) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  40) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  41) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  42) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  43) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  44) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  45) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  46) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  47) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  48) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  49) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  50) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  51) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  52) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  53) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  54) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  55) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  56) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  57) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  58) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  59) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  60) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  61) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  62) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  63) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  64) probes.pg6+ 7.8.0 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.8.1
updated 2 packages and audited 913 packages in 4.513s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:40:41.710Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:40:41.711Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:40:41.711Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:40:41.712Z appoptics:debug using context provider: ace-context
2022-02-23T04:40:41.756Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:40:41.880Z appoptics:patching patched crypto 
2022-02-23T04:40:41.896Z appoptics:patching patched https 
2022-02-23T04:40:41.896Z appoptics:patching patched http 
2022-02-23T04:40:41.934Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:40:41.934Z appoptics:patching patched fs 
2022-02-23T04:40:41.940Z appoptics:patching patched pg 7.8.1
2022-02-23T04:40:41.966Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.8.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.8.1
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (102ms)
  64 failing

  1) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:443:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:359:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:120:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)

  2) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  3) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  4) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  5) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  6) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  7) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  8) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  9) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  10) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  11) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  12) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  13) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  14) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  15) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  16) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  17) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  18) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  19) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  20) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  21) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  22) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  23) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  24) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  25) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  26) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  27) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  28) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  29) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  30) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  31) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  32) probes.pg6+ 7.8.1 pg-native 3.0.0
       javascript 7.8.1
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  33) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:443:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:359:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:120:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)

  34) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  35) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  36) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  37) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  38) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  39) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  40) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  41) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  42) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  43) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  44) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  45) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  46) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  47) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  48) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  49) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  50) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  51) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  52) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  53) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  54) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  55) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  56) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  57) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  58) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  59) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  60) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  61) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  62) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  63) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  64) probes.pg6+ 7.8.1 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.8.2
updated 1 package and audited 913 packages in 3.389s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:40:46.320Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:40:46.321Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:40:46.321Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:40:46.321Z appoptics:debug using context provider: ace-context
2022-02-23T04:40:46.366Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:40:46.492Z appoptics:patching patched crypto 
2022-02-23T04:40:46.512Z appoptics:patching patched https 
2022-02-23T04:40:46.512Z appoptics:patching patched http 
2022-02-23T04:40:46.542Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:40:46.543Z appoptics:patching patched fs 
2022-02-23T04:40:46.550Z appoptics:patching patched pg 7.8.2
2022-02-23T04:40:46.572Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.8.2 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.8.2
      ✓ UDP might lose a message
      1) should create the pg testing context
      using client
        2) should trace a basic query using callback
        3) should trace a basic query using promises
        4) should trace a prepared statement using a callback
        5) should trace a prepared statement using promises
        6) should sanitize query when no value list using a callback
        7) should sanitize query when no value list using promises
        8) should truncate long queries using a callback
        9) should truncate long queries using promises
        10) should do nothing when disabled using a callback
        11) should do nothing when disabled using promises
      using pool
        12) should trace a basic query using callback
        13) should trace a basic query using promises
        14) should trace a prepared statement using a callback
        15) should trace a prepared statement using promises
        16) should sanitize query when no value list using a callback
        17) should sanitize query when no value list using promises
        18) should truncate long queries using a callback
        19) should truncate long queries using promises
        20) should do nothing when disabled using a callback
        21) should do nothing when disabled using promises
      using pool with backed up queue
        22) should exhaust the pool
        23) should trace a basic query using callback
        24) should trace a basic query using promises
        25) should trace a prepared statement using a callback
        26) should trace a prepared statement using promises
        27) should sanitize query when no value list using a callback
        28) should sanitize query when no value list using promises
        29) should truncate long queries using a callback
        30) should truncate long queries using promises
        31) should do nothing when disabled using a callback
        32) should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      33) should create the pg testing context
      using client
        34) should trace a basic query using callback
        35) should trace a basic query using promises
        36) should trace a prepared statement using a callback
        37) should trace a prepared statement using promises
        38) should sanitize query when no value list using a callback
        39) should sanitize query when no value list using promises
        40) should truncate long queries using a callback
        41) should truncate long queries using promises
        42) should do nothing when disabled using a callback
        43) should do nothing when disabled using promises
      using pool
        44) should trace a basic query using callback
        45) should trace a basic query using promises
        46) should trace a prepared statement using a callback
        47) should trace a prepared statement using promises
        48) should sanitize query when no value list using a callback
        49) should sanitize query when no value list using promises
        50) should truncate long queries using a callback
        51) should truncate long queries using promises
        52) should do nothing when disabled using a callback
        53) should do nothing when disabled using promises
      using pool with backed up queue
        54) should exhaust the pool
        55) should trace a basic query using callback
        56) should trace a basic query using promises
        57) should trace a prepared statement using a callback
        58) should trace a prepared statement using promises
        59) should sanitize query when no value list using a callback
        60) should sanitize query when no value list using promises
        61) should truncate long queries using a callback
        62) should truncate long queries using promises
        63) should do nothing when disabled using a callback
        64) should do nothing when disabled using promises


  3 passing (86ms)
  64 failing

  1) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:443:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:359:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:120:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)

  2) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'get' of undefined
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  3) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'get' of undefined
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  4) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  5) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'getNoRelease' of undefined
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  6) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  7) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'get' of undefined
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  8) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'get' of undefined
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  9) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'get' of undefined
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  10) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'get' of undefined
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  11) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'get' of undefined
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  12) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  13) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  14) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  15) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  16) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  17) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  18) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  19) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  20) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  21) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  22) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  23) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  24) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  25) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  26) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  27) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  28) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  29) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  30) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  31) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  32) probes.pg6+ 7.8.2 pg-native 3.0.0
       javascript 7.8.2
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  33) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         should create the pg testing context:
     Uncaught Error: Unknown authenticationOk message typeMessage { name: 'authenticationOk', length: 23 }
      at Connection.parseR (node_modules/pg/lib/connection.js:443:9)
      at Connection.parseMessage (node_modules/pg/lib/connection.js:359:19)
      at Socket.<anonymous> (node_modules/pg/lib/connection.js:120:22)
      at addChunk (_stream_readable.js:297:12)
      at readableAddChunk (_stream_readable.js:272:9)
      at Socket.Readable.push (_stream_readable.js:213:10)
      at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
      at TCP.callbackTrampoline (internal/async_hooks.js:126:14)

  34) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  35) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  36) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  37) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  38) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  39) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  40) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  41) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  42) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:240:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  43) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using client
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:249:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  44) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  45) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  46) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  47) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  48) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  49) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  50) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  51) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  52) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:267:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  53) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:276:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  54) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should exhaust the pool:
     TypeError: Cannot read property 'connect' of undefined
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:299:21)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  55) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cBasic (test/probes/pg/pg6-plus-subtests.js:35:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  56) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a basic query using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pBasic (test/probes/pg/pg6-plus-subtests.js:40:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  57) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:392:21)
      at cPrepared (test/probes/pg/pg6-plus-subtests.js:80:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  58) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should trace a prepared statement using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.poolAcquireClient [as getNoRelease] (test/probes/pg/pg6-plus.js:400:28)
      at pPrepared (test/probes/pg/pg6-plus-subtests.js:104:16)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  59) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cSanitize (test/probes/pg/pg6-plus-subtests.js:148:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  60) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should sanitize query when no value list using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pSanitize (test/probes/pg/pg6-plus-subtests.js:161:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  61) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at ctruncate (test/probes/pg/pg6-plus-subtests.js:199:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  62) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should truncate long queries using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at ptruncate (test/probes/pg/pg6-plus-subtests.js:206:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  63) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using a callback:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:361:21)
      at cDisabled (test/probes/pg/pg6-plus-subtests.js:229:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:322:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)

  64) probes.pg6+ 7.8.2 pg-native 3.0.0
       native 3.0.0
         using pool with backed up queue
           should do nothing when disabled using promises:
     TypeError: Cannot read property 'connect' of undefined
      at Object.pooledClient [as query] (test/probes/pg/pg6-plus.js:371:28)
      at pDisabled (test/probes/pg/pg6-plus-subtests.js:238:22)
      at ao.requestStore.run.newContext (test/helper.js:296:5)
      at Namespace.run (node_modules/ace-context/context.js:187:5)
      at Object.exports.test (test/helper.js:288:19)
      at Context.<anonymous> (test/probes/pg/pg6-plus.js:331:20)
      at processImmediate (internal/timers.js:461:21)
      at process.callbackTrampoline (internal/async_hooks.js:126:14)



npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.9.0
updated 1 package and audited 913 packages in 4.134s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:40:51.769Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:40:51.769Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:40:51.770Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:40:51.770Z appoptics:debug using context provider: ace-context
2022-02-23T04:40:51.838Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:40:52.030Z appoptics:patching patched crypto 
2022-02-23T04:40:52.057Z appoptics:patching patched https 
2022-02-23T04:40:52.057Z appoptics:patching patched http 
2022-02-23T04:40:52.151Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:40:52.152Z appoptics:patching patched fs 
2022-02-23T04:40:52.163Z appoptics:patching patched pg 7.9.0
2022-02-23T04:40:52.212Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.9.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.9.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (166ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (979ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (230ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (238ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (230ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (100ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (217ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (229ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (221ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (970ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (220ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (230ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (221ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.10.0
updated 1 package and audited 913 packages in 3.836s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:41:02.677Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:41:02.678Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:41:02.678Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:41:02.678Z appoptics:debug using context provider: ace-context
2022-02-23T04:41:02.743Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:41:02.889Z appoptics:patching patched crypto 
2022-02-23T04:41:02.906Z appoptics:patching patched https 
2022-02-23T04:41:02.906Z appoptics:patching patched http 
2022-02-23T04:41:02.962Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:41:02.963Z appoptics:patching patched fs 
2022-02-23T04:41:02.970Z appoptics:patching patched pg 7.10.0
2022-02-23T04:41:02.998Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.10.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.10.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (98ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (39ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (42ms)
        ✓ should trace a basic query using callback (961ms)
        ✓ should trace a basic query using promises (40ms)
        ✓ should trace a prepared statement using a callback (211ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (221ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (212ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (64ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (218ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (239ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (224ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (976ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (226ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (212ms)
        ✓ should do nothing when disabled using promises (39ms)


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.11.0
updated 1 package and audited 913 packages in 4.019s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:41:13.505Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:41:13.506Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:41:13.506Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:41:13.507Z appoptics:debug using context provider: ace-context
2022-02-23T04:41:13.549Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:41:13.663Z appoptics:patching patched crypto 
2022-02-23T04:41:13.679Z appoptics:patching patched https 
2022-02-23T04:41:13.679Z appoptics:patching patched http 
2022-02-23T04:41:13.705Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:41:13.705Z appoptics:patching patched fs 
2022-02-23T04:41:13.712Z appoptics:patching patched pg 7.11.0
2022-02-23T04:41:13.730Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.11.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.11.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (73ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (991ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (235ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (244ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (236ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (60ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (227ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (238ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (230ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (991ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (231ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (238ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (232ms)
        ✓ should do nothing when disabled using promises


  67 passing (5s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.12.0
updated 1 package and audited 913 packages in 4.118s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:41:24.199Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:41:24.199Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:41:24.199Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:41:24.200Z appoptics:debug using context provider: ace-context
2022-02-23T04:41:24.245Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:41:24.394Z appoptics:patching patched crypto 
2022-02-23T04:41:24.411Z appoptics:patching patched https 
2022-02-23T04:41:24.412Z appoptics:patching patched http 
2022-02-23T04:41:24.455Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:41:24.455Z appoptics:patching patched fs 
2022-02-23T04:41:24.463Z appoptics:patching patched pg 7.12.0
2022-02-23T04:41:24.486Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.12.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.12.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (96ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (984ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (230ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (240ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (228ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (65ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (222ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (244ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (227ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (979ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (231ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (239ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (231ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.12.1
updated 2 packages and audited 913 packages in 3.676s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:41:34.640Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:41:34.641Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:41:34.641Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:41:34.642Z appoptics:debug using context provider: ace-context
2022-02-23T04:41:34.692Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:41:34.829Z appoptics:patching patched crypto 
2022-02-23T04:41:34.850Z appoptics:patching patched https 
2022-02-23T04:41:34.851Z appoptics:patching patched http 
2022-02-23T04:41:34.882Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:41:34.883Z appoptics:patching patched fs 
2022-02-23T04:41:34.890Z appoptics:patching patched pg 7.12.1
2022-02-23T04:41:34.914Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.12.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.12.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (81ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (43ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (46ms)
        ✓ should trace a basic query using callback (957ms)
        ✓ should trace a basic query using promises (45ms)
        ✓ should trace a prepared statement using a callback (208ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (39ms)
        ✓ should truncate long queries using a callback (215ms)
        ✓ should truncate long queries using promises (41ms)
        ✓ should do nothing when disabled using a callback (205ms)
        ✓ should do nothing when disabled using promises (46ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (67ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (42ms)
        ✓ should trace a basic query using promises (68ms)
        ✓ should trace a prepared statement using a callback (183ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (58ms)
        ✓ should truncate long queries using a callback (205ms)
        ✓ should truncate long queries using promises (49ms)
        ✓ should do nothing when disabled using a callback (188ms)
        ✓ should do nothing when disabled using promises (62ms)
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (939ms)
        ✓ should trace a basic query using promises (62ms)
        ✓ should trace a prepared statement using a callback (189ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (56ms)
        ✓ should truncate long queries using a callback (198ms)
        ✓ should truncate long queries using promises (58ms)
        ✓ should do nothing when disabled using a callback (189ms)
        ✓ should do nothing when disabled using promises (63ms)


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.13.0
updated 1 package and audited 913 packages in 4.691s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:41:46.120Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:41:46.121Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:41:46.121Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:41:46.121Z appoptics:debug using context provider: ace-context
2022-02-23T04:41:46.168Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:41:46.294Z appoptics:patching patched crypto 
2022-02-23T04:41:46.309Z appoptics:patching patched https 
2022-02-23T04:41:46.309Z appoptics:patching patched http 
2022-02-23T04:41:46.339Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:41:46.339Z appoptics:patching patched fs 
2022-02-23T04:41:46.347Z appoptics:patching patched pg 7.13.0
2022-02-23T04:41:46.368Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.13.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.13.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (79ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (979ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (230ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (238ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (231ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (76ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (48ms)
        ✓ should trace a basic query using promises (54ms)
        ✓ should trace a prepared statement using a callback (197ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (46ms)
        ✓ should truncate long queries using a callback (209ms)
        ✓ should truncate long queries using promises (47ms)
        ✓ should do nothing when disabled using a callback (203ms)
        ✓ should do nothing when disabled using promises (48ms)
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (953ms)
        ✓ should trace a basic query using promises (46ms)
        ✓ should trace a prepared statement using a callback (205ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (41ms)
        ✓ should truncate long queries using a callback (214ms)
        ✓ should truncate long queries using promises (43ms)
        ✓ should do nothing when disabled using a callback (203ms)
        ✓ should do nothing when disabled using promises (47ms)


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.14.0
updated 1 package and audited 913 packages in 3.88s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:41:56.723Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:41:56.724Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:41:56.724Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:41:56.724Z appoptics:debug using context provider: ace-context
2022-02-23T04:41:56.772Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:41:56.899Z appoptics:patching patched crypto 
2022-02-23T04:41:56.915Z appoptics:patching patched https 
2022-02-23T04:41:56.916Z appoptics:patching patched http 
2022-02-23T04:41:56.942Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:41:56.942Z appoptics:patching patched fs 
2022-02-23T04:41:56.954Z appoptics:patching patched pg 7.14.0
2022-02-23T04:41:56.975Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.14.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.14.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (86ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (43ms)
        ✓ should trace a basic query using callback (961ms)
        ✓ should trace a basic query using promises (40ms)
        ✓ should trace a prepared statement using a callback (210ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (220ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (212ms)
        ✓ should do nothing when disabled using promises (39ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (134ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (45ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (221ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (239ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (232ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (984ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (236ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (245ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (237ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.15.0
updated 1 package and audited 913 packages in 4.105s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:42:07.667Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:42:07.668Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:42:07.668Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:42:07.669Z appoptics:debug using context provider: ace-context
2022-02-23T04:42:07.744Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:42:07.881Z appoptics:patching patched crypto 
2022-02-23T04:42:07.898Z appoptics:patching patched https 
2022-02-23T04:42:07.898Z appoptics:patching patched http 
2022-02-23T04:42:07.928Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:42:07.928Z appoptics:patching patched fs 
2022-02-23T04:42:07.936Z appoptics:patching patched pg 7.15.0
2022-02-23T04:42:07.959Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.15.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.15.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (79ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (981ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (231ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (239ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (231ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (136ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (58ms)
        ✓ should trace a basic query using promises (40ms)
        ✓ should trace a prepared statement using a callback (210ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (237ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (219ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (970ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (220ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (227ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (220ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.15.1
updated 1 package and audited 913 packages in 3.921s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:42:18.455Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:42:18.456Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:42:18.456Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:42:18.457Z appoptics:debug using context provider: ace-context
2022-02-23T04:42:18.502Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:42:18.634Z appoptics:patching patched crypto 
2022-02-23T04:42:18.650Z appoptics:patching patched https 
2022-02-23T04:42:18.661Z appoptics:patching patched http 
2022-02-23T04:42:18.689Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:42:18.689Z appoptics:patching patched fs 
2022-02-23T04:42:18.698Z appoptics:patching patched pg 7.15.1
2022-02-23T04:42:18.721Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.15.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.15.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (85ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (969ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (221ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (229ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (217ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (64ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (225ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (233ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (226ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (975ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (227ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (236ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (217ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.15.2
updated 1 package and audited 913 packages in 4.032s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:42:29.130Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:42:29.131Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:42:29.131Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:42:29.131Z appoptics:debug using context provider: ace-context
2022-02-23T04:42:29.181Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:42:29.313Z appoptics:patching patched crypto 
2022-02-23T04:42:29.331Z appoptics:patching patched https 
2022-02-23T04:42:29.331Z appoptics:patching patched http 
2022-02-23T04:42:29.362Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:42:29.362Z appoptics:patching patched fs 
2022-02-23T04:42:29.370Z appoptics:patching patched pg 7.15.2
2022-02-23T04:42:29.393Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.15.2 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.15.2
      ✓ UDP might lose a message
      ✓ should create the pg testing context (84ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (981ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (229ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (239ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (232ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (65ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (225ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (236ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (221ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (256ms)
        ✓ should trace a basic query using callback (965ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (217ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (223ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (214ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.16.0
added 1 package, updated 1 package and audited 914 packages in 4.334s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:42:40.185Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:42:40.186Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:42:40.186Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:42:40.187Z appoptics:debug using context provider: ace-context
2022-02-23T04:42:40.234Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:42:40.358Z appoptics:patching patched crypto 
2022-02-23T04:42:40.375Z appoptics:patching patched https 
2022-02-23T04:42:40.375Z appoptics:patching patched http 
2022-02-23T04:42:40.406Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:42:40.406Z appoptics:patching patched fs 
2022-02-23T04:42:40.414Z appoptics:patching patched pg 7.16.0
2022-02-23T04:42:40.436Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.16.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.16.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (84ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (39ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (47ms)
        ✓ should trace a basic query using callback (957ms)
        ✓ should trace a basic query using promises (43ms)
        ✓ should trace a prepared statement using a callback (208ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (38ms)
        ✓ should truncate long queries using a callback (215ms)
        ✓ should truncate long queries using promises (40ms)
        ✓ should do nothing when disabled using a callback (208ms)
        ✓ should do nothing when disabled using promises (41ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (59ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (227ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (237ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (231ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (981ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (231ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (241ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (233ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.16.1
updated 1 package and audited 914 packages in 5.349s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:42:52.211Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:42:52.212Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:42:52.212Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:42:52.213Z appoptics:debug using context provider: ace-context
2022-02-23T04:42:52.259Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:42:52.382Z appoptics:patching patched crypto 
2022-02-23T04:42:52.398Z appoptics:patching patched https 
2022-02-23T04:42:52.399Z appoptics:patching patched http 
2022-02-23T04:42:52.431Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:42:52.432Z appoptics:patching patched fs 
2022-02-23T04:42:52.440Z appoptics:patching patched pg 7.16.1
2022-02-23T04:42:52.461Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.16.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.16.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (80ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (980ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (230ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (238ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (232ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (64ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (220ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (232ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (223ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (975ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (224ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (234ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (224ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.17.0
updated 1 package and audited 914 packages in 3.558s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:43:02.459Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:43:02.459Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:43:02.459Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:43:02.460Z appoptics:debug using context provider: ace-context
2022-02-23T04:43:02.500Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:43:02.615Z appoptics:patching patched crypto 
2022-02-23T04:43:02.631Z appoptics:patching patched https 
2022-02-23T04:43:02.631Z appoptics:patching patched http 
2022-02-23T04:43:02.662Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:43:02.662Z appoptics:patching patched fs 
2022-02-23T04:43:02.669Z appoptics:patching patched pg 7.17.0
2022-02-23T04:43:02.688Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.17.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.17.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (81ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (981ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (231ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (240ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (232ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (69ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (225ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (237ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (231ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (241ms)
        ✓ should trace a basic query using callback (980ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (230ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (238ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (229ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.17.1
updated 1 package and audited 914 packages in 3.718s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:43:12.873Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:43:12.873Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:43:12.873Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:43:12.874Z appoptics:debug using context provider: ace-context
2022-02-23T04:43:12.922Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:43:13.045Z appoptics:patching patched crypto 
2022-02-23T04:43:13.062Z appoptics:patching patched https 
2022-02-23T04:43:13.062Z appoptics:patching patched http 
2022-02-23T04:43:13.093Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:43:13.094Z appoptics:patching patched fs 
2022-02-23T04:43:13.101Z appoptics:patching patched pg 7.17.1
2022-02-23T04:43:13.123Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.17.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.17.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (85ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (978ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (228ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (237ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (231ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (68ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (226ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (229ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (223ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (974ms)
        ✓ should trace a basic query using promises (39ms)
        ✓ should trace a prepared statement using a callback (212ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (220ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (210ms)
        ✓ should do nothing when disabled using promises (44ms)


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.18.0
updated 1 package and audited 914 packages in 4.193s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:43:23.744Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:43:23.745Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:43:23.745Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:43:23.745Z appoptics:debug using context provider: ace-context
2022-02-23T04:43:23.795Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:43:23.930Z appoptics:patching patched crypto 
2022-02-23T04:43:23.958Z appoptics:patching patched https 
2022-02-23T04:43:23.958Z appoptics:patching patched http 
2022-02-23T04:43:23.984Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:43:23.985Z appoptics:patching patched fs 
2022-02-23T04:43:23.992Z appoptics:patching patched pg 7.18.0
2022-02-23T04:43:24.016Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.18.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.18.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (83ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (981ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (232ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (241ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (241ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (64ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (226ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (237ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (221ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (973ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (223ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (232ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (223ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.18.1
updated 1 package and audited 914 packages in 4.293s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:43:34.934Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:43:34.935Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:43:34.935Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:43:34.936Z appoptics:debug using context provider: ace-context
2022-02-23T04:43:34.983Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:43:35.106Z appoptics:patching patched crypto 
2022-02-23T04:43:35.121Z appoptics:patching patched https 
2022-02-23T04:43:35.121Z appoptics:patching patched http 
2022-02-23T04:43:35.151Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:43:35.152Z appoptics:patching patched fs 
2022-02-23T04:43:35.160Z appoptics:patching patched pg 7.18.1
2022-02-23T04:43:35.182Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.18.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.18.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (85ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (40ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (967ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (217ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (224ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (218ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (83ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (43ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (231ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (241ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (237ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (985ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (237ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (245ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (223ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@7.18.2
updated 1 package and audited 914 packages in 4.004s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:43:45.952Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:43:45.953Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:43:45.953Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:43:45.954Z appoptics:debug using context provider: ace-context
2022-02-23T04:43:45.999Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:43:46.131Z appoptics:patching patched crypto 
2022-02-23T04:43:46.148Z appoptics:patching patched https 
2022-02-23T04:43:46.148Z appoptics:patching patched http 
2022-02-23T04:43:46.196Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:43:46.196Z appoptics:patching patched fs 
2022-02-23T04:43:46.204Z appoptics:patching patched pg 7.18.2
2022-02-23T04:43:46.227Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 7.18.2 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 7.18.2
      ✓ UDP might lose a message
      ✓ should create the pg testing context (96ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (979ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (229ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (237ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (230ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (104ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (224ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (245ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (230ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (983ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (234ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (245ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (238ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.0.0
updated 2 packages and audited 914 packages in 5.726s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:43:58.437Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:43:58.438Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:43:58.438Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:43:58.438Z appoptics:debug using context provider: ace-context
2022-02-23T04:43:58.485Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:43:58.609Z appoptics:patching patched crypto 
2022-02-23T04:43:58.625Z appoptics:patching patched https 
2022-02-23T04:43:58.625Z appoptics:patching patched http 
2022-02-23T04:43:58.684Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:43:58.684Z appoptics:patching patched fs 
2022-02-23T04:43:58.692Z appoptics:patching patched pg 8.0.0
2022-02-23T04:43:58.730Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.0.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (82ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (978ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (230ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (239ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (234ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (67ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (228ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (247ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (240ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (992ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (252ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (253ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (238ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.0.1
added 1 package, removed 1 package, updated 1 package and audited 914 packages in 4.701s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:44:09.902Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:44:09.902Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:44:09.902Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:44:09.903Z appoptics:debug using context provider: ace-context
2022-02-23T04:44:09.953Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:44:10.076Z appoptics:patching patched crypto 
2022-02-23T04:44:10.092Z appoptics:patching patched https 
2022-02-23T04:44:10.092Z appoptics:patching patched http 
2022-02-23T04:44:10.124Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:44:10.124Z appoptics:patching patched fs 
2022-02-23T04:44:10.132Z appoptics:patching patched pg 8.0.1
2022-02-23T04:44:10.160Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.0.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.0.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (85ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (979ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (228ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (238ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (231ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (87ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (227ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (239ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (231ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (981ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (233ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (241ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (231ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.0.2
updated 1 package and audited 914 packages in 4.344s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:44:20.884Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:44:20.885Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:44:20.885Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:44:20.886Z appoptics:debug using context provider: ace-context
2022-02-23T04:44:20.969Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:44:21.089Z appoptics:patching patched crypto 
2022-02-23T04:44:21.104Z appoptics:patching patched https 
2022-02-23T04:44:21.105Z appoptics:patching patched http 
2022-02-23T04:44:21.131Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:44:21.131Z appoptics:patching patched fs 
2022-02-23T04:44:21.138Z appoptics:patching patched pg 8.0.2
2022-02-23T04:44:21.157Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.0.2 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.0.2
      ✓ UDP might lose a message
      ✓ should create the pg testing context (73ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (39ms)
        ✓ should trace a basic query using callback (967ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (217ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (225ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (218ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (51ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (228ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (233ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (981ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (232ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (240ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (233ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.0.3
updated 1 package and audited 914 packages in 4.085s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:44:31.624Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:44:31.624Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:44:31.624Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:44:31.625Z appoptics:debug using context provider: ace-context
2022-02-23T04:44:31.695Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:44:31.820Z appoptics:patching patched crypto 
2022-02-23T04:44:31.836Z appoptics:patching patched https 
2022-02-23T04:44:31.836Z appoptics:patching patched http 
2022-02-23T04:44:31.879Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:44:31.879Z appoptics:patching patched fs 
2022-02-23T04:44:31.886Z appoptics:patching patched pg 8.0.3
2022-02-23T04:44:31.908Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.0.3 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.0.3
      ✓ UDP might lose a message
      ✓ should create the pg testing context (80ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (981ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (231ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (240ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (232ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (60ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (226ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (239ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (222ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (983ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (235ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (251ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (234ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.1.0
updated 2 packages and audited 914 packages in 3.887s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:44:42.389Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:44:42.389Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:44:42.389Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:44:42.390Z appoptics:debug using context provider: ace-context
2022-02-23T04:44:42.467Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:44:42.604Z appoptics:patching patched crypto 
2022-02-23T04:44:42.619Z appoptics:patching patched https 
2022-02-23T04:44:42.619Z appoptics:patching patched http 
2022-02-23T04:44:42.655Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:44:42.655Z appoptics:patching patched fs 
2022-02-23T04:44:42.662Z appoptics:patching patched pg 8.1.0
2022-02-23T04:44:42.682Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.1.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.1.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (80ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (979ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (239ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (247ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (242ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (66ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (225ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (237ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (219ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (981ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (233ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (243ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (235ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.2.0
updated 1 package and audited 914 packages in 3.521s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:44:52.718Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:44:52.719Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:44:52.719Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:44:52.720Z appoptics:debug using context provider: ace-context
2022-02-23T04:44:52.791Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:44:52.938Z appoptics:patching patched crypto 
2022-02-23T04:44:52.954Z appoptics:patching patched https 
2022-02-23T04:44:52.955Z appoptics:patching patched http 
2022-02-23T04:44:53.011Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:44:53.011Z appoptics:patching patched fs 
2022-02-23T04:44:53.021Z appoptics:patching patched pg 8.2.0
2022-02-23T04:44:53.048Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.2.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.2.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (92ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (41ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (968ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (217ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (226ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (220ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (75ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (219ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (229ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (223ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (241ms)
        ✓ should trace a basic query using callback (974ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (224ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (232ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (226ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.2.1
updated 1 package and audited 914 packages in 3.409s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:45:02.965Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:45:02.965Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:45:02.965Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:45:02.966Z appoptics:debug using context provider: ace-context
2022-02-23T04:45:03.014Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:45:03.162Z appoptics:patching patched crypto 
2022-02-23T04:45:03.179Z appoptics:patching patched https 
2022-02-23T04:45:03.179Z appoptics:patching patched http 
2022-02-23T04:45:03.221Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:45:03.222Z appoptics:patching patched fs 
2022-02-23T04:45:03.231Z appoptics:patching patched pg 8.2.1
2022-02-23T04:45:03.253Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.2.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.2.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (81ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (980ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (232ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (244ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (243ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (74ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (226ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (237ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (231ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (971ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (224ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (232ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (228ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.2.2
updated 1 package and audited 914 packages in 3.544s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:45:13.271Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:45:13.272Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:45:13.272Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:45:13.273Z appoptics:debug using context provider: ace-context
2022-02-23T04:45:13.320Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:45:13.432Z appoptics:patching patched crypto 
2022-02-23T04:45:13.448Z appoptics:patching patched https 
2022-02-23T04:45:13.448Z appoptics:patching patched http 
2022-02-23T04:45:13.475Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:45:13.475Z appoptics:patching patched fs 
2022-02-23T04:45:13.483Z appoptics:patching patched pg 8.2.2
2022-02-23T04:45:13.503Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.2.2 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.2.2
      ✓ UDP might lose a message
      ✓ should create the pg testing context (73ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (980ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (231ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (239ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (233ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (98ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (220ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (229ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (222ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (973ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (225ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (230ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (225ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.3.0
updated 1 package and audited 914 packages in 3.245s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:45:23.263Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:45:23.264Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:45:23.264Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:45:23.265Z appoptics:debug using context provider: ace-context
2022-02-23T04:45:23.311Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:45:23.435Z appoptics:patching patched crypto 
2022-02-23T04:45:23.451Z appoptics:patching patched https 
2022-02-23T04:45:23.451Z appoptics:patching patched http 
2022-02-23T04:45:23.482Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:45:23.482Z appoptics:patching patched fs 
2022-02-23T04:45:23.491Z appoptics:patching patched pg 8.3.0
2022-02-23T04:45:23.513Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.3.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.3.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (81ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (969ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (218ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (229ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (222ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (55ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (226ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (237ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (229ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (983ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (234ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (241ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (234ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.3.2
updated 1 package and audited 914 packages in 3.49s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:45:33.364Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:45:33.365Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:45:33.365Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:45:33.365Z appoptics:debug using context provider: ace-context
2022-02-23T04:45:33.413Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:45:33.536Z appoptics:patching patched crypto 
2022-02-23T04:45:33.552Z appoptics:patching patched https 
2022-02-23T04:45:33.552Z appoptics:patching patched http 
2022-02-23T04:45:33.578Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:45:33.578Z appoptics:patching patched fs 
2022-02-23T04:45:33.591Z appoptics:patching patched pg 8.3.2
2022-02-23T04:45:33.620Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.3.2 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.3.2
      ✓ UDP might lose a message
      ✓ should create the pg testing context (81ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (45ms)
        ✓ should trace a basic query using callback (958ms)
        ✓ should trace a basic query using promises (42ms)
        ✓ should trace a prepared statement using a callback (209ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (217ms)
        ✓ should truncate long queries using promises (39ms)
        ✓ should do nothing when disabled using a callback (210ms)
        ✓ should do nothing when disabled using promises (40ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (53ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (44ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (229ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (238ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (230ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (981ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (232ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (245ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (235ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.3.3
updated 1 package and audited 914 packages in 3.771s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:45:43.845Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:45:43.846Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:45:43.846Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:45:43.846Z appoptics:debug using context provider: ace-context
2022-02-23T04:45:43.889Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:45:44.003Z appoptics:patching patched crypto 
2022-02-23T04:45:44.017Z appoptics:patching patched https 
2022-02-23T04:45:44.017Z appoptics:patching patched http 
2022-02-23T04:45:44.045Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:45:44.045Z appoptics:patching patched fs 
2022-02-23T04:45:44.053Z appoptics:patching patched pg 8.3.3
2022-02-23T04:45:44.074Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.3.3 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.3.3
      ✓ UDP might lose a message
      ✓ should create the pg testing context (70ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (982ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (230ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (241ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (233ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (62ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (228ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (240ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (234ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (983ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (247ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (252ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (244ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.4.0
removed 1 package, updated 1 package and audited 913 packages in 4.013s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:45:54.653Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:45:54.654Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:45:54.654Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:45:54.654Z appoptics:debug using context provider: ace-context
2022-02-23T04:45:54.742Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:45:54.875Z appoptics:patching patched crypto 
2022-02-23T04:45:54.891Z appoptics:patching patched https 
2022-02-23T04:45:54.891Z appoptics:patching patched http 
2022-02-23T04:45:54.921Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:45:54.922Z appoptics:patching patched fs 
2022-02-23T04:45:54.931Z appoptics:patching patched pg 8.4.0
2022-02-23T04:45:54.951Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.4.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.4.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (77ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (981ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (232ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (239ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (232ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (73ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (226ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (237ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (231ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (981ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (233ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (250ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (246ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.4.1
updated 1 package and audited 913 packages in 4.68s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:46:06.006Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:46:06.006Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:46:06.006Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:46:06.007Z appoptics:debug using context provider: ace-context
2022-02-23T04:46:06.053Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:46:06.180Z appoptics:patching patched crypto 
2022-02-23T04:46:06.197Z appoptics:patching patched https 
2022-02-23T04:46:06.198Z appoptics:patching patched http 
2022-02-23T04:46:06.228Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:46:06.228Z appoptics:patching patched fs 
2022-02-23T04:46:06.237Z appoptics:patching patched pg 8.4.1
2022-02-23T04:46:06.259Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.4.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.4.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (90ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (979ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (230ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (239ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (232ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (72ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (228ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (239ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (233ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (987ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (227ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (244ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (237ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.4.2
updated 1 package and audited 913 packages in 4.404s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:46:17.057Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:46:17.057Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:46:17.057Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:46:17.058Z appoptics:debug using context provider: ace-context
2022-02-23T04:46:17.101Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:46:17.211Z appoptics:patching patched crypto 
2022-02-23T04:46:17.226Z appoptics:patching patched https 
2022-02-23T04:46:17.226Z appoptics:patching patched http 
2022-02-23T04:46:17.252Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:46:17.253Z appoptics:patching patched fs 
2022-02-23T04:46:17.260Z appoptics:patching patched pg 8.4.2
2022-02-23T04:46:17.279Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.4.2 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.4.2
      ✓ UDP might lose a message
      ✓ should create the pg testing context (71ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (974ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (225ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (233ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (223ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (66ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (228ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (239ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (231ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (981ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (233ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (240ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (235ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.5.0
updated 1 package and audited 913 packages in 3.86s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:46:27.688Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:46:27.688Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:46:27.688Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:46:27.689Z appoptics:debug using context provider: ace-context
2022-02-23T04:46:27.735Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:46:27.858Z appoptics:patching patched crypto 
2022-02-23T04:46:27.883Z appoptics:patching patched https 
2022-02-23T04:46:27.883Z appoptics:patching patched http 
2022-02-23T04:46:27.909Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:46:27.910Z appoptics:patching patched fs 
2022-02-23T04:46:27.918Z appoptics:patching patched pg 8.5.0
2022-02-23T04:46:27.938Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.5.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.5.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (104ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (979ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (229ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (238ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (229ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (67ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (225ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (236ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (232ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (994ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (234ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (241ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (233ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.5.1
updated 1 package and audited 913 packages in 4.189s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:46:38.818Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:46:38.819Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:46:38.819Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:46:38.820Z appoptics:debug using context provider: ace-context
2022-02-23T04:46:38.882Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:46:39.015Z appoptics:patching patched crypto 
2022-02-23T04:46:39.050Z appoptics:patching patched https 
2022-02-23T04:46:39.051Z appoptics:patching patched http 
2022-02-23T04:46:39.085Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:46:39.085Z appoptics:patching patched fs 
2022-02-23T04:46:39.095Z appoptics:patching patched pg 8.5.1
2022-02-23T04:46:39.121Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.5.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.5.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (104ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (48ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (59ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (64ms)
        ✓ should trace a basic query using callback (940ms)
        ✓ should trace a basic query using promises (61ms)
        ✓ should trace a prepared statement using a callback (191ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (54ms)
        ✓ should truncate long queries using a callback (200ms)
        ✓ should truncate long queries using promises (55ms)
        ✓ should do nothing when disabled using a callback (194ms)
        ✓ should do nothing when disabled using promises (54ms)
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (92ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (217ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (228ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (221ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (981ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (224ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (232ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (232ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.6.0
updated 1 package and audited 913 packages in 3.378s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:46:49.099Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:46:49.099Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:46:49.100Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:46:49.100Z appoptics:debug using context provider: ace-context
2022-02-23T04:46:49.142Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:46:49.256Z appoptics:patching patched crypto 
2022-02-23T04:46:49.271Z appoptics:patching patched https 
2022-02-23T04:46:49.272Z appoptics:patching patched http 
2022-02-23T04:46:49.297Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:46:49.297Z appoptics:patching patched fs 
2022-02-23T04:46:49.305Z appoptics:patching patched pg 8.6.0
2022-02-23T04:46:49.323Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.6.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.6.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (85ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (983ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (232ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (240ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (233ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (63ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (224ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (235ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (227ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (979ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (228ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (236ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (231ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.7.0
updated 1 package and audited 913 packages in 3.742s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:46:59.484Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:46:59.485Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:46:59.485Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:46:59.485Z appoptics:debug using context provider: ace-context
2022-02-23T04:46:59.527Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:46:59.637Z appoptics:patching patched crypto 
2022-02-23T04:46:59.653Z appoptics:patching patched https 
2022-02-23T04:46:59.653Z appoptics:patching patched http 
2022-02-23T04:46:59.676Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:46:59.677Z appoptics:patching patched fs 
2022-02-23T04:46:59.689Z appoptics:patching patched pg 8.7.0
2022-02-23T04:46:59.706Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.7.0 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.7.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (183ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (976ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (226ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (233ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (217ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (55ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (222ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (234ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (227ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (980ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (221ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (229ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (224ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.7.1
updated 1 package and audited 913 packages in 3.802s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:47:10.156Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:47:10.156Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:47:10.157Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:47:10.157Z appoptics:debug using context provider: ace-context
2022-02-23T04:47:10.209Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:47:10.355Z appoptics:patching patched crypto 
2022-02-23T04:47:10.372Z appoptics:patching patched https 
2022-02-23T04:47:10.373Z appoptics:patching patched http 
2022-02-23T04:47:10.402Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:47:10.402Z appoptics:patching patched fs 
2022-02-23T04:47:10.411Z appoptics:patching patched pg 8.7.1
2022-02-23T04:47:10.430Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.7.1 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.7.1
      ✓ UDP might lose a message
      ✓ should create the pg testing context (98ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (977ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (227ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (236ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (237ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (79ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (38ms)
        ✓ should trace a basic query using promises (70ms)
        ✓ should trace a prepared statement using a callback (178ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (64ms)
        ✓ should truncate long queries using a callback (190ms)
        ✓ should truncate long queries using promises (65ms)
        ✓ should do nothing when disabled using a callback (182ms)
        ✓ should do nothing when disabled using promises (69ms)
      using pool with backed up queue
        ✓ should exhaust the pool (249ms)
        ✓ should trace a basic query using callback (934ms)
        ✓ should trace a basic query using promises (67ms)
        ✓ should trace a prepared statement using a callback (185ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises (62ms)
        ✓ should truncate long queries using a callback (193ms)
        ✓ should truncate long queries using promises (61ms)
        ✓ should do nothing when disabled using a callback (186ms)
        ✓ should do nothing when disabled using promises (64ms)


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.7.3
updated 1 package and audited 913 packages in 4.268s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
2022-02-23T04:47:21.146Z appoptics:debug read config from /__w/appoptics-apm-node/appoptics-apm-node/appoptics-apm-config
2022-02-23T04:47:21.146Z appoptics:debug guc ignoring APPOPTICS_LOG_SETTINGS
2022-02-23T04:47:21.146Z appoptics:debug serviceKey dIOz...wWK0:ao-node-test
2022-02-23T04:47:21.147Z appoptics:debug using context provider: ace-context
2022-02-23T04:47:21.186Z appoptics:debug apm 10.2.1, bindings 11.2.0, oboe 10.2.0
2022-02-23T04:47:21.296Z appoptics:patching patched crypto 
2022-02-23T04:47:21.311Z appoptics:patching patched https 
2022-02-23T04:47:21.311Z appoptics:patching patched http 
2022-02-23T04:47:21.338Z appoptics:patching fs.realpath - adding native method
2022-02-23T04:47:21.338Z appoptics:patching patched fs 
2022-02-23T04:47:21.346Z appoptics:patching patched pg 8.7.3
2022-02-23T04:47:21.364Z appoptics:debug starting runtimeMetrics


  probes.pg6+ 8.7.3 pg-native 3.0.0
    ✓ should sanitize SQL by default
    javascript 8.7.3
      ✓ UDP might lose a message
      ✓ should create the pg testing context (89ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback (40ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool
        ✓ should trace a basic query using callback (968ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (218ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (238ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (218ms)
        ✓ should do nothing when disabled using promises
    native 3.0.0
      ✓ UDP might lose a message
      ✓ should create the pg testing context (79ms)
      using client
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback
        ✓ should do nothing when disabled using promises
      using pool
        ✓ should trace a basic query using callback
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (221ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (241ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (219ms)
        ✓ should do nothing when disabled using promises
      using pool with backed up queue
        ✓ should exhaust the pool (250ms)
        ✓ should trace a basic query using callback (969ms)
        ✓ should trace a basic query using promises
        ✓ should trace a prepared statement using a callback (221ms)
        ✓ should trace a prepared statement using promises
        ✓ should sanitize query when no value list using a callback
        ✓ should sanitize query when no value list using promises
        ✓ should truncate long queries using a callback (228ms)
        ✓ should truncate long queries using promises
        ✓ should do nothing when disabled using a callback (223ms)
        ✓ should do nothing when disabled using promises


  67 passing (6s)

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@~2.3.1 (node_modules/chokidar/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"linux","arch":"x64"})

+ pg@8.7.3
updated 1 package and audited 913 packages in 3.69s

83 packages are looking for funding
  run `npm fund` for details

found 8 vulnerabilities (3 moderate, 5 high)
  run `npm audit fix` to fix them, or `npm audit` for details
