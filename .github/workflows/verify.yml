name: Verify - Install & Trace (after Release)

on:
  workflow_run:
    workflows: ["Release - NPM Publish (manual)"]
    types: [completed]

  workflow_dispatch:
    inputs:
      solarwinds-version:
        required: false
        description: "solarwinds-apm version (e.g. solarwinds-apm@prerelease)"
        default: "solarwinds-apm@latest"

jobs:
  load-test-group:
    name: Load Test Group Config JSON from Bindings Repo
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix-with-arch }}
      arm64-images: ${{ steps.set-matrix.outputs.arm64-images }}

    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Checkout solarwindscloud/solarwinds-bindings-node
        uses: actions/checkout@v3
        with:
          repository: solarwindscloud/solarwinds-bindings-node

      - name: Load test group data
        id: set-matrix
        # json load script is does variable substitution based on repo where workflow runs
        # this workflow runs in the agent repo thus needs to "tweak" environment for correct load.
        run: |
          export GITHUB_REPOSITORY=solarwindscloud/solarwinds-bindings-node
          .github/scripts/matrix-from-json.sh .github/config/test-group.json

  launch-arm64:
    name: Launch arm64 Runners
    runs-on: ubuntu-latest
    needs: load-test-group
    outputs:
      matrix: ${{ steps.launch.outputs.matrix }}
    steps:
      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CI_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CI_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Setup GitHub Token
        uses: getsentry/action-github-app-token@v2
        id: github-token
        with:
          app_id: ${{ vars.APPLICATION_ID }}
          private_key: ${{ secrets.APPLICATION_PRIVATE_KEY }}

      - name: Launch Runners
        id: launch
        uses: solarwindscloud/ec2-runner-action@main
        with:
          action: launch
          github-token: ${{ steps.github-token.outputs.token }}
          matrix: ${{ needs.load-test-group.outputs.arm64-images }}
          runner-user: github
          runner-directory: /gh
          instance-type: t4g.medium
          ami-name: gha-arm64-ubuntu22-.*
          ami-owner: ${{ secrets.CI_AMI_OWNER }}
          subnet-id: ${{ secrets.CI_SUBNET }}
          security-group-ids: ${{ secrets.CI_SECURITY_GROUP }}

  install-trace:
    name: Install and Trace
    runs-on: ${{ matrix.arch == 'arm64' && fromJson(needs.launch-arm64.outputs.matrix)[matrix.image].label || 'ubuntu-latest' }}
    needs: [load-test-group, launch-arm64]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.load-test-group.outputs.matrix) }}
    container:
      image: ${{ matrix.image }}

    env:
      # workflow is "simulating" an end user
      NODE_ENV: production

    steps:
      # install deps and spoof os-release to get gha to work on arm64 alpine
      # https://github.com/actions/runner/issues/801#issuecomment-1374967227
      - name: Prepare Alpine arm64
        run: |
          apk add gcompat
          sed -i "s/ID=alpine/ID=armpine/" /etc/os-release
        if: ${{ matrix.arch == 'arm64' && contains(matrix.image, 'alpine') }}

      - name: Checkout ${{ github.ref }}
        uses: actions/checkout@v3

      - name: Show Environment Info
        run: |
          printenv
          node --version
          npm --version 
          cat /etc/os-release

      # of all bad options, this is the cleanest way to branch the version of the package
      - name: NPM Install (solarwinds-apm version from Input)
        run: |
          version=${{ github.event.inputs.solarwinds-version }}
          npm install
          npm install $version --unsafe-perm
        working-directory: .github/utils
        if: ${{ github.event.inputs.solarwinds-version }}

      - name: NPM Install (solarwinds-apm version from Package)
        run: |
          version=solarwinds-apm@$(node -e "console.log(require('../../package.json').version)")
          npm install
          npm install $version --unsafe-perm
        working-directory: .github/utils
        if: ${{ !github.event.inputs.solarwinds-version }}

      # when installing the package, the binding dependency is either built from source or downloaded as pre-built tarball
      # in either case, the binary has to be present. if it is not, it is a failed install and the step will fail
      - name: Check Artifacts
        run: |
          ls node_modules/solarwinds-apm-bindings-*/bindings.node 
          ls node_modules/solarwinds-apm-bindings-*/metrics.node
        working-directory: .github/utils

      # confirms thst server can be instrumented via .readyToSample
      - name: Preflight Staging Server
        # own images name are full url. remove that to make a nice service name
        # use client multiple times to make an easily noticeable mark on UI
        run: |
          image=${{ matrix.image  }}
          pre=ghcr.io/solarwindscloud/solarwinds-bindings-node/
          export SW_APM_SERVICE_KEY=${{ secrets.SW_APM_TEST_SERVICE_KEY }}-${image#"$pre"}
          export SW_APM_COLLECTOR=${{ secrets.SW_APM_TEST_COLLECTOR }}
          node server.js --preflight
        working-directory: .github/utils

      # results of step should be visually examined in solarwinds staging backend
      - name: Start Server & use Client against Staging
        run: |
          image=${{ matrix.image  }}
          pre=ghcr.io/solarwindscloud/solarwinds-bindings-node/
          export SW_APM_SERVICE_KEY=${{ secrets.SW_APM_TEST_SERVICE_KEY }}-${image#"$pre"}
          export SW_APM_COLLECTOR=${{ secrets.SW_APM_TEST_COLLECTOR }}
          node server.js & node client.js --total 20
        working-directory: .github/utils

      # confirms that production server can be instrumented via .readyToSample
      # override SW_APM_COLLECTOR
      - name: Preflight Production Server
        run: |
          image=${{ matrix.image  }}
          pre=ghcr.io/solarwindscloud/solarwinds-bindings-node/
          export SW_APM_SERVICE_KEY=${{ secrets.SW_APM_TEST_PROD_SERVICE_KEY }}-${image#"$pre"}
          export SW_APM_COLLECTOR=${{ secrets.SW_APM_TEST_PROD_COLLECTOR }}
          node server.js --preflight
        working-directory: .github/utils

      # results of step should be visually examined in solarwinds production backend
      - name: Start Server & use Client against Production
        run: |
          image=${{ matrix.image  }}
          pre=ghcr.io/solarwindscloud/solarwinds-bindings-node/
          export SW_APM_SERVICE_KEY=${{ secrets.SW_APM_TEST_PROD_SERVICE_KEY }}-${image#"$pre"}
          export SW_APM_COLLECTOR=${{ secrets.SW_APM_TEST_PROD_COLLECTOR }}
          node server.js --port 3001 & node client.js --port 3001 --total 20
        working-directory: .github/utils

  terminate-arm64:
    name: Terminate arm64 Runners
    runs-on: ubuntu-latest
    needs: [launch-arm64, install-trace]
    if: always()
    steps:
      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CI_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CI_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Setup GitHub Token
        uses: getsentry/action-github-app-token@v2
        id: github-token
        with:
          app_id: ${{ vars.APPLICATION_ID }}
          private_key: ${{ secrets.APPLICATION_PRIVATE_KEY }}

      - name: Terminate Runners
        uses: solarwindscloud/ec2-runner-action@main
        with:
          action: terminate
          github-token: ${{ steps.github-token.outputs.token }}
          matrix: ${{ needs.launch-arm64.outputs.matrix }}
