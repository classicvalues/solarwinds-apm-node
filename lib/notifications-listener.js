'use strict'

const ao = require('..')

// oboe config

// msg.seqNo 1
// msg.source 'oboe'
// msg.type 'config'
// msg.hostname 'collector.appoptics.com'
// msg.port 443
// msg.log ''
// msg.clientId maskedKey
// msg.buffersize 1000
// msg.maxTransactions 200
// msg.flushMaxWaitTime 5000
// msg.eventsFlushInterval 2
// msg.maxRequestSizeBytes 3000000
// msg.proxy ''

// msg.source 'oboe'
// msg.type 'keep-alive'

// source 'oboe'
// type 'logging'
// message 'the log message'
// srcName 'oboe.c'
// srcLine 1113
// module 'lib'
// level fatal|error|warn|info|low|medium|high
// pid 23644
// tid 23644

// msg.source 'collector'
// msg.type 'remote-config'
// msg.config remote-config-name
// msg.value remote-config-value

// source 'collector'
// type 'remote-warning'
// message 'remote warning message'

// msg.source 'notifier'
// msg.type 'error'
// msg.error Error

const levels = {
  fatal: 'error',
  error: 'error',
  warn: 'warn',
  info: 'info',
  low: 'info',
  medium: 'info',
  high: 'info'
}

function notificationListener (msg) {
  if (msg.source === 'oboe') {
    //
    // oboe messages
    //
    if (msg.type === 'keep-alive') {

    } else if (msg.type === 'logging') {
      let logLevel = 'info'
      // map msg log levels to agent log levels if possible.
      if (msg.level in levels) {
        logLevel = levels[msg.level]
      }
      if (msg.level === 'high' && msg.message.startsWith('Valid IPv6 interface:')) {
        msg.message = msg.message.replace('%', '%%')
      }
      // add oboe log level as prefix
      ao.loggers[logLevel](`[${msg.level}]${msg.message}`)
    } else if (msg.type === 'config') {
      ao.loggers.debug(`endpoint: ${msg.hostname}:${msg.port}`)
      ao.loggers.info('oboe-config: ', msg)
    } else if (msg.type === 'error-status') {
      const errors = {
        sn: msg.seqNo,
        dropped: msg.dropped,
        sendErrors: msg.sendErrors
      }
      const { interval, total } = ao.notifications.getStats('clear')
      ao.loggers.debug('oboe-error-status:', errors, interval, total)
    } else {
      ao.loggers.debug('unexpected oboe message type: ', msg)
    }
  } else if (msg.source === 'collector') {
    //
    // collector messages
    //
    if (msg.type === 'remote-config') {
      // take appropriate action
    } else if (msg.type === 'remote-warning') {
      ao.loggers.warn(msg.message)
    } else {
      ao.loggers.debug('unexpected collector message type: ', msg)
    }
  } else if (msg.source === 'notifier') {
    //
    // messages generated by the notifier-handler code.
    //
    if (msg.type === 'error' || msg.type === 'warn') {
      ao.loggers[msg.type]('notifier error: ', msg.error.message)
    } else {
      ao.loggers.debug('notifier error: ', msg.error)
    }
  } else {
    //
    // unknown message type
    //
    ao.loggers.debug('unknown source for:', msg)
  }
}

module.exports = notificationListener
